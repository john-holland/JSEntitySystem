{"ts":1344349992471,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\r\nvar NextFreeId = 0;\r\n\r\n/*\r\nThe component metadata collection.\r\nkeyed on the componentName, toLowered\r\nComponent[\"name\"] =    {\r\n    ComponentName : \"name\",\r\n\tMethods : {\r\n\t\tAssigned : method,\r\n\t\tRemoved : method,\r\n\t\tUpdate : method,\r\n\t\tRender : method\r\n\t},\r\n\tRequiredComponents : array of strings,\r\n\tRequiredData : array of data names\r\n}\r\n*/\r\nvar Components = {\r\n};\r\n\r\n/*\r\n  Datas is a \r\n*/\r\nvar Datas = {\r\n};\r\n\r\nvar Entities = {\r\n};\r\n\r\nfunction Component(assigned, removed, update, render) {\r\n\tthis.Assigned = assigned;\r\n\tthis.Removed = removed;\r\n\tthis.Update = update;\r\n\tthis.Render = render;\r\n}\r\n\r\nfunction RegisterComponent(componentName, component, requiredComponents, requiredData) {\r\n\tComponents[componentName] = {\r\n\t\tComponentName : componentName,\r\n\t\tMethods : component,\r\n\t\tRequiredComponents : requiredComponents,\r\n\t\tRequiredData : requiredData\r\n\t};\r\n}\r\n\r\nfunction AddComponent(entity, componentName) {\r\n\tvar component = Components[componentName];\r\n\tvar requiredData = component.RequiredData;\r\n\tvar requiredComponents = component.RequiredComponent;\r\n\t\r\n\tif (!(componentName in entity.Components)) {\r\n\t\tentity.Components[componentName] = Components[componentName];\r\n\t\tentity.UpdateComponents.push(Components[componentName]);\r\n\t}\r\n\t\r\n\tfor (var key in component.RequiredComponents) {\r\n\t\tif (!(key in entity.Components)) {\r\n\t\t\tAddComponent(entity, key);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfor (var key in component.RequiredData) {\r\n\t\tif (!(key in entity.Datas)) {\r\n\t\t\tentity.Datas[key] = component.RequiredData[key];\r\n\t\t}\r\n\t}\r\n}\r\n\r\nRegisterComponent('TestComponent',\r\n\tComponent(\r\n            function(entity, gameTime) {\r\n                //assigned\r\n\t\t\t\t},\r\n\t\t\tfunction(entity, gameTime) {\r\n                //removed\r\n\t\t\t\t},\r\n\t\t\tfunction(entity, gameTime) {\r\n                //update\r\n\t\t\t\t},\r\n\t\t\tfunction(entity, gameTime) {\r\n                //render\r\n\t\t\t}),\r\n\t\t\tnew Array(),\r\n            new Array());\r\n\r\nfunction Entity() {\r\n\tvar self = this;\r\n\tNextFreeId = NextFreeId + 1;\r\n\tthis.Id = NextFreeId;\r\n\tthis.Datas = {\r\n\t};\r\n\tthis.Components = {\r\n\t};\r\n    \r\n\tthis.UpdateComponents = new Array();\r\n\t\r\n    this.AddComponent = function(componentName) {\r\n\t\tif (!(componentName in this.components)) {\r\n\t\t\t//recursively add components here.\r\n\t\t\t//make sure to add each components required data here as well.\r\n\t\t\tAddComponent(componentName);\r\n\t\t}\r\n\t};\r\n    \r\n    this.RemoveComponent = function(componentName) {\r\n        if (componentName in this.components) {\r\n            \r\n        }\r\n    };\r\n\t\r\n\tthis.Update = function(gameTime) {\r\n\t\tvar i = 0;\r\n\t\tfor (i = 0; i < this.UpdateComponents.length; i++) {\r\n\t\t\tthis.UpdateComponents[i].Update(gameTime, self);\r\n\t\t}\r\n\t};\r\n\t\r\n\tEntities[this.Id] = this;\r\n}\r\n\r\nvar ent = new Entity();\r\nalert(ent.test);\r\nalert(Entities[ent.Id].test);"]],"start1":0,"start2":0,"length1":0,"length2":2755}]],"length":2755}
{"contributors":[],"silentsave":true,"ts":1344377344766,"patch":[[{"diffs":[[0,"ay());\r\n"],[1,"d"],[0,"\r\nfuncti"]],"start1":1884,"start2":1884,"length1":16,"length2":17}]],"length":2756,"saved":false}
{"ts":1344377345993,"patch":[[{"diffs":[[0,"ay());\r\n"],[-1,"d"],[0,"\r\nfuncti"]],"start1":1884,"start2":1884,"length1":17,"length2":16}]],"length":2755,"saved":false}
{"ts":1344377352035,"patch":[[{"diffs":[[0,"ent',\r\n\t"],[1,"new "],[0,"Componen"]],"start1":1548,"start2":1548,"length1":16,"length2":20}]],"length":2759,"saved":false}
{"ts":1344377495413,"patch":[[{"diffs":[[0,"mponent("],[-1,"\r\n "],[0,"        "]],"start1":1562,"start2":1562,"length1":19,"length2":16}]],"length":2756,"saved":false}
{"ts":1344377496745,"patch":[[{"diffs":[[0,"mponent("],[-1,"           "],[0,"function"]],"start1":1562,"start2":1562,"length1":27,"length2":16}]],"length":2745,"saved":false}
{"ts":1344377501227,"patch":[[{"diffs":[[0,"        "],[1,"    "],[0,"//assign"]],"start1":1608,"start2":1608,"length1":16,"length2":20},{"diffs":[[0,"//assigned\r\n"],[1,"    "],[0,"\t\t\t\t},\r\n"],[1,"    "],[0,"\t\t\tfunction("]],"start1":1620,"start2":1620,"length1":32,"length2":40},{"diffs":[[0,"            "],[1,"    "],[0,"//removed\r\n\t"]],"start1":1685,"start2":1685,"length1":24,"length2":28},{"diffs":[[0,"emoved\r\n"],[1,"    "],[0,"\t\t\t\t},\r\n"],[1,"    "],[0,"\t\t\tfunct"]],"start1":1704,"start2":1704,"length1":24,"length2":32},{"diffs":[[0,"        "],[1,"    "],[0,"//update"]],"start1":1769,"start2":1769,"length1":16,"length2":20},{"diffs":[[0,"update\r\n"],[1,"    "],[0,"\t\t\t\t},\r\n"],[1,"    "],[0,"\t\t\tfunct"]],"start1":1783,"start2":1783,"length1":24,"length2":32},{"diffs":[[0,"            "],[1,"    "],[0,"//render\r\n\t\t"]],"start1":1844,"start2":1844,"length1":24,"length2":28},{"diffs":[[0,"render\r\n"],[1,"    "],[0,"\t\t\t}),\r\n"]],"start1":1862,"start2":1862,"length1":16,"length2":20}]],"length":2789,"saved":false}
{"ts":1344377502088,"patch":[[{"diffs":[[0,"        "],[1,"    "],[0,"//assign"]],"start1":1612,"start2":1612,"length1":16,"length2":20},{"diffs":[[0,"//assigned\r\n    "],[1,"  "],[1,"  "],[0,"\t\t\t\t},\r\n    \t\t\tf"]],"start1":1624,"start2":1624,"length1":32,"length2":36},{"diffs":[[0,"    \t\t\t\t},\r\n    "],[1,"   "],[1," "],[0,"\t\t\tfunction(enti"]],"start1":1640,"start2":1640,"length1":32,"length2":36},{"diffs":[[0,"            "],[1,"    "],[0,"//removed\r\n "]],"start1":1701,"start2":1701,"length1":24,"length2":28},{"diffs":[[0,"emoved\r\n    "],[1," "],[1,"   "],[0,"\t\t\t\t},\r\n    "]],"start1":1720,"start2":1720,"length1":24,"length2":28},{"diffs":[[0,"    \t\t\t\t},\r\n    "],[1,"  "],[1,"  "],[0,"\t\t\tfunction(enti"]],"start1":1732,"start2":1732,"length1":32,"length2":36},{"diffs":[[0,"        "],[1,"    "],[0,"//update"]],"start1":1797,"start2":1797,"length1":16,"length2":20},{"diffs":[[0,"update\r\n    "],[1," "],[1,"   "],[0,"\t\t\t\t},\r\n    "]],"start1":1811,"start2":1811,"length1":24,"length2":28},{"diffs":[[0,"\t\t\t\t},\r\n    "],[1," "],[1,"   "],[0,"\t\t\tfunction("]],"start1":1827,"start2":1827,"length1":24,"length2":28},{"diffs":[[0,"            "],[1,"    "],[0,"//render\r\n  "]],"start1":1884,"start2":1884,"length1":24,"length2":28},{"diffs":[[0,"render\r\n"],[1,"    "],[0,"    \t\t\t}"]],"start1":1902,"start2":1902,"length1":16,"length2":20}]],"length":2833,"saved":false}
{"ts":1344377520505,"patch":[[{"diffs":[[0,"}),\r\n\t\t\t"],[-1,"new Array()"],[1,"p["],[0,",\r\n     "]],"start1":1921,"start2":1921,"length1":27,"length2":18}]],"length":2824,"saved":false}
{"ts":1344377521683,"patch":[[{"diffs":[[0,"\n\t\t\t"],[-1,"p"],[0,"["],[1,"]"],[0,",\r\n "]],"start1":1925,"start2":1925,"length1":10,"length2":10}]],"length":2824,"saved":false}
{"ts":1344377526379,"patch":[[{"diffs":[[0,"        "],[-1,"new Array()"],[1,"[]"],[0,");\r\n\r\nfu"]],"start1":1938,"start2":1938,"length1":27,"length2":18}]],"length":2815,"saved":false}
{"ts":1344377548156,"patch":[[{"diffs":[[0,"),\r\n"],[-1,"\t\t"],[0,"\t[],\r\n"],[-1,"        "],[0,"    "]],"start1":1922,"start2":1922,"length1":24,"length2":14}]],"length":2805,"saved":false}
{"contributors":[],"silentsave":true,"ts":1344523641956,"patch":[[{"diffs":[[0,"\r\n"],[-1,"var NextFreeId = 0;\r\n\r\n/*\r\n"],[1,"function JSEntitySystem() {\r\n    this.NextFreeId = 0;\r\n    var engine = this;\r\n    /*\r\n    "],[0,"The "]],"start1":0,"start2":0,"length1":33,"length2":97},{"diffs":[[0,"ction.\r\n"],[1,"    "],[0,"keyed on"]],"start1":121,"start2":121,"length1":16,"length2":20},{"diffs":[[0,"owered\r\n"],[1,"    "],[0,"Componen"]],"start1":164,"start2":164,"length1":16,"length2":20},{"diffs":[[0,"=    {\r\n    "],[1,"   "],[1," "],[0,"ComponentNam"]],"start1":194,"start2":194,"length1":24,"length2":28},{"diffs":[[0,"name\",\r\n"],[1,"    "],[0,"\tMethods"]],"start1":227,"start2":227,"length1":16,"length2":20},{"diffs":[[0,"ds : {\r\n"],[1,"    "],[0,"\t\tAssign"]],"start1":245,"start2":245,"length1":16,"length2":20},{"diffs":[[0," : method,\r\n"],[1,"    "],[0,"\t\tRemoved : "]],"start1":267,"start2":267,"length1":24,"length2":28},{"diffs":[[0,"ethod,\r\n"],[1,"    "],[0,"\t\tUpdate"]],"start1":296,"start2":296,"length1":16,"length2":20},{"diffs":[[0,"ethod,\r\n"],[1,"    "],[0,"\t\tRender"]],"start1":320,"start2":320,"length1":16,"length2":20},{"diffs":[[0,"method\r\n"],[1,"    "],[0,"\t},\r\n"],[1,"    "],[0,"\tRequire"]],"start1":343,"start2":343,"length1":21,"length2":29},{"diffs":[[0,"rings,\r\n"],[1,"    "],[0,"\tRequire"]],"start1":397,"start2":397,"length1":16,"length2":20},{"diffs":[[0,"es\r\n"],[-1,"}\r\n*/\r\nvar "],[1,"    }\r\n    */\r\n    this."],[0,"Comp"]],"start1":442,"start2":442,"length1":19,"length2":32},{"diffs":[[0," = {"],[-1,"\r\n"],[1," "],[0,"};\r\n"],[-1,"\r\n/*\r\n  Datas is a \r\n*/\r\nvar Datas = {\r\n};\r\n\r\nvar "],[1,"    \r\n    /*\r\n      Datas is an associative object for holding data.\r\n    */\r\n    this.Datas = { };\r\n    \r\n    /*\r\n      Entities is an associative object for holding entities.\r\n    */\r\n    this."],[0,"Enti"]],"start1":480,"start2":480,"length1":64,"length2":208},{"diffs":[[0," = {"],[-1,"\r\n"],[1," "],[0,"};\r\n"],[-1,"\r\nfunction Component"],[1,"    \r\n    /*\r\n      EntityUpdateList is an array used to update the entities for the engine.\r\n    */    \r\n    this.EntityUpdateList = [];\r\n    \r\n    this.Component = function"],[0,"(ass"]],"start1":692,"start2":692,"length1":34,"length2":187},{"diffs":[[0,"der) {\r\n"],[1,"    "],[0,"\tthis.As"]],"start1":906,"start2":906,"length1":16,"length2":20},{"diffs":[[0," assigned;\r\n"],[1,"    "],[0,"\tthis.Remove"]],"start1":934,"start2":934,"length1":24,"length2":28},{"diffs":[[0,"= removed;\r\n"],[1,"    "],[0,"\tthis.Update"]],"start1":964,"start2":964,"length1":24,"length2":28},{"diffs":[[0,"pdate;\r\n"],[1,"    "],[0,"\tthis.Re"]],"start1":996,"start2":996,"length1":16,"length2":20},{"diffs":[[0,"ender;\r\n"],[-1,"}\r\n\r\nfunction "],[1,"    }\r\n    \r\n    this."],[0,"Register"]],"start1":1024,"start2":1024,"length1":30,"length2":38},{"diffs":[[0,"egisterComponent"],[1," = function"],[0,"(componentName, "]],"start1":1055,"start2":1055,"length1":32,"length2":43},{"diffs":[[0,"ata) {\r\n"],[-1,"\t"],[1,"    \tengine."],[0,"Componen"]],"start1":1138,"start2":1138,"length1":17,"length2":28},{"diffs":[[0,"e] = {\r\n"],[1,"    "],[0,"\t\tCompon"]],"start1":1181,"start2":1181,"length1":16,"length2":20},{"diffs":[[0,"tName,\r\n"],[1,"    "],[0,"\t\tMethod"]],"start1":1219,"start2":1219,"length1":16,"length2":20},{"diffs":[[0,"onent,\r\n"],[1,"    "],[0,"\t\tRequir"]],"start1":1247,"start2":1247,"length1":16,"length2":20},{"diffs":[[0,"nents,\r\n"],[1,"    "],[0,"\t\tRequir"]],"start1":1295,"start2":1295,"length1":16,"length2":20},{"diffs":[[0,"ta\r\n"],[1,"    "],[0,"\t};\r\n"],[-1,"}\r\n\r\nfunction "],[1,"    }\r\n    \r\n    this."],[0,"AddC"]],"start1":1334,"start2":1334,"length1":27,"length2":39},{"diffs":[[0,"his.AddComponent"],[1," = function"],[0,"(entity, compone"]],"start1":1365,"start2":1365,"length1":32,"length2":43},{"diffs":[[0,"entName) {\r\n"],[1,"    "],[0,"\tvar compone"]],"start1":1407,"start2":1407,"length1":24,"length2":28},{"diffs":[[0,"onent = "],[1,"engine."],[0,"Componen"]],"start1":1432,"start2":1432,"length1":16,"length2":23},{"diffs":[[0,"Name];\r\n"],[1,"    "],[0,"\tvar req"]],"start1":1467,"start2":1467,"length1":16,"length2":20},{"diffs":[[0,"dData;\r\n"],[1,"    "],[0,"\tvar req"]],"start1":1516,"start2":1516,"length1":16,"length2":20},{"diffs":[[0,"onent;\r\n"],[-1,"\t\r\n"],[1,"    \t\r\n    "],[0,"\tif (!(c"]],"start1":1576,"start2":1576,"length1":19,"length2":27},{"diffs":[[0,"ts)) {\r\n"],[1,"    "],[0,"\t\tentity"]],"start1":1634,"start2":1634,"length1":16,"length2":20},{"diffs":[[0,"Name] = "],[1,"engine."],[0,"Componen"]],"start1":1675,"start2":1675,"length1":16,"length2":23},{"diffs":[[0,"Name];\r\n"],[1,"    "],[0,"\t\tentity"]],"start1":1710,"start2":1710,"length1":16,"length2":20},{"diffs":[[0,"ts.push("],[1,"engine."],[0,"Componen"]],"start1":1745,"start2":1745,"length1":16,"length2":23},{"diffs":[[0,"ame]);\r\n"],[-1,"\t}\r\n\t\r\n"],[1,"    \t}\r\n    \t\r\n    "],[0,"\tfor (va"]],"start1":1781,"start2":1781,"length1":23,"length2":35},{"diffs":[[0,"ponents) {\r\n"],[1,"    "],[0,"\t\tif (!(key "]],"start1":1846,"start2":1846,"length1":24,"length2":28},{"diffs":[[0,"ts)) {\r\n"],[-1,"\t\t\t"],[1,"    \t\t\tengine."],[0,"AddCompo"]],"start1":1892,"start2":1892,"length1":19,"length2":30},{"diffs":[[0,");\r\n"],[1,"    "],[0,"\t\t}\r\n"],[-1,"\t}\r\n\t\r\n"],[1,"    \t}\r\n    \t\r\n    "],[0,"\tfor"]],"start1":1938,"start2":1938,"length1":20,"length2":36},{"diffs":[[0,"redData) {\r\n"],[1,"    "],[0,"\t\tif (!(key "]],"start1":2002,"start2":2002,"length1":24,"length2":28},{"diffs":[[0,"as)) {\r\n"],[1,"    "],[0,"\t\t\tentit"]],"start1":2043,"start2":2043,"length1":16,"length2":20},{"diffs":[[0,"];\r\n"],[1,"    "],[0,"\t\t}\r\n"],[-1,"\t}\r\n}\r\n\r\nRegisterComponent('TestComponent',\r\n\tnew Component(function(entity, gameTime) {\r\n                        //assigned\r\n        \t\t\t\t},\r\n        \t\t\tfunction(entity, gameTime) {\r\n                        //removed\r\n        \t\t\t\t},\r\n        \t\t\tfunction(entity, gameTime) {\r\n                        //update\r\n"],[1,"    \t}\r\n    }\r\n    \r\n    //May have to make a CreateEntity function.\r\n    this.Entity = function(idToUse) {\r\n        var self = this;\r\n        \r\n        if (typeof idToUse == 'number') {\r\n            if (engine.Entities.Any(function(ent) { ent.Id == idToUse })) {\r\n                throw new Error(\"Tried to create an entity with an explicity Id that already existed! Entity in question: \" + idToUse);\r\n                return;\r\n    "],[0,"        "],[-1,"\t\t\t\t},"],[1,"}"],[0,"\r\n  "]],"start1":2104,"start2":2104,"length1":336,"length2":457},{"diffs":[[0,"    "],[1," "],[-1,"\t\t\tfunction(entity, gameTime) {\r\n                        //render\r\n        \t\t\t}),\r\n\t[],\r\n    []);\r\n\r\nfunction Entity() {\r\n\tvar self = this;\r\n\t"],[1,"   \r\n            this.Id = idToUse;\r\n        } else {\r\n            engine."],[0,"Next"]],"start1":2563,"start2":2563,"length1":150,"length2":83},{"diffs":[[0,"extFreeId = "],[1,"engine."],[0,"NextFreeId +"]],"start1":2643,"start2":2643,"length1":24,"length2":31},{"diffs":[[0,"d + 1;\r\n"],[-1,"\t"],[1,"            "],[0,"this.Id "]],"start1":2671,"start2":2671,"length1":17,"length2":28},{"diffs":[[0,"is.Id = "],[1,"engine."],[0,"NextFree"]],"start1":2693,"start2":2693,"length1":16,"length2":23},{"diffs":[[0,"tFreeId;"],[-1,"\r\n"],[1,"    \r\n        }\r\n        \r\n    "],[0,"\tthis.Da"]],"start1":2711,"start2":2711,"length1":18,"length2":47},{"diffs":[[0,"as = {\r\n"],[1,"    "],[0,"\t};\r\n"],[1,"    "],[0,"\tthis.Co"]],"start1":2759,"start2":2759,"length1":21,"length2":29},{"diffs":[[0,"ts = {\r\n"],[1,"    "],[0,"\t};\r\n   "]],"start1":2794,"start2":2794,"length1":16,"length2":20},{"diffs":[[0,"};\r\n    "],[-1,"\r\n"],[1,"    \r\n    "],[0,"\tthis.Up"]],"start1":2807,"start2":2807,"length1":18,"length2":26},{"diffs":[[0,"s = "],[-1,"new Array();\r\n\t\r\n"],[1,"[];\r\n    \t\r\n    "],[0,"    "]],"start1":2846,"start2":2846,"length1":25,"length2":24},{"diffs":[[0,"ame) {\r\n"],[1,"    "],[0,"\t\tif (!("]],"start1":2909,"start2":2909,"length1":16,"length2":20},{"diffs":[[0,"ts)) {\r\n"],[1,"    "],[0,"\t\t\t//rec"]],"start1":2959,"start2":2959,"length1":16,"length2":20},{"diffs":[[0," here.\r\n"],[1,"    "],[0,"\t\t\t//mak"]],"start1":3002,"start2":3002,"length1":16,"length2":20},{"diffs":[[0," well.\r\n"],[-1,"\t\t\t"],[1,"    \t\t\tengine."],[0,"AddCompo"]],"start1":3073,"start2":3073,"length1":19,"length2":30},{"diffs":[[0,"mponent("],[1,"this, "],[0,"componen"]],"start1":3100,"start2":3100,"length1":16,"length2":22},{"diffs":[[0,"nentName);\r\n"],[1,"    "],[0,"\t\t}\r\n"],[1,"    "],[0,"\t};\r\n    \r\n "]],"start1":3119,"start2":3119,"length1":29,"length2":37},{"diffs":[[0,"   \t};\r\n    "],[-1,"\r\n"],[1,"    \r\n  "],[0,"    "],[1,"  "],[0,"this.RemoveC"]],"start1":3141,"start2":3141,"length1":30,"length2":38},{"diffs":[[0," {\r\n        "],[1,"    "],[0,"if (componen"]],"start1":3213,"start2":3213,"length1":24,"length2":28},{"diffs":[[0,"entName in this."],[-1,"c"],[1,"C"],[0,"omponents) {\r\n  "]],"start1":3239,"start2":3239,"length1":33,"length2":33},{"diffs":[[0,"    "],[-1,"\r\n        }\r\n    };\r\n\t\r\n"],[1,"    delete this.Components[componentName];\r\n            }\r\n        };\r\n    \t\r\n    "],[0,"\tthi"]],"start1":3278,"start2":3278,"length1":32,"length2":90},{"diffs":[[0,"ime) {\r\n"],[1,"    "],[0,"\t\tvar i "]],"start1":3393,"start2":3393,"length1":16,"length2":20},{"diffs":[[0,"i = 0;\r\n"],[1,"    "],[0,"\t\tfor (i"]],"start1":3411,"start2":3411,"length1":16,"length2":20},{"diffs":[[0,"i++) {\r\n"],[1,"    "],[0,"\t\t\tthis."]],"start1":3471,"start2":3471,"length1":16,"length2":20},{"diffs":[[0,"ate("],[1,"self, "],[0,"gameTime"],[-1,", self"],[0,");\r\n"],[1,"    "],[0,"\t\t}\r\n"],[1,"    "],[0,"\t};\r\n"],[-1,"\t\r\n\t"],[1,"    \t\r\n    \tengine."],[0,"Enti"]],"start1":3514,"start2":3514,"length1":40,"length2":63},{"diffs":[[0,"s;\r\n"],[-1,"}\r\n\r\nvar ent = new Entity();\r\nalert(ent.test);\r\nalert(Entities[ent.Id].test"],[1,"        engine.EntityUpdateList.push(this);\r\n    }\r\n    \r\n    this.RemoveEntity = function(entityId) {\r\n        var entityToRemove = engine.Entities[entityId];\r\n        \r\n        if (entityToRemove === null) {\r\n            return;\r\n        }\r\n        \r\n        var indexOfEntity = engine.EntityUpdateList.indexOf(entityToRemove);\r\n        \r\n        if (indexOfEntity !=== -1) {\r\n            engine.EntityUpdateList.splice(indexOfEntity, 1);\r\n        }\r\n        \r\n        delete engine.Entities[entityId];\r\n    }\r\n    \r\n    this.Update = function(gameTime) {\r\n        var i;\r\n        for(i = 0; i < engine.EntityUpdateList.length; i++) {\r\n            engine.EntityUpdateList[i].Update(gameTime);\r\n            engine\r\n        }\r\n    }\r\n    \r\n    this.GameStart = (new Date()).getMilliseconds();\r\n    this.LastUpdateTime = this.GameStart;\r\n    \r\n    this.IntervalUpdateFunc = function() {\r\n        var currentTime = (new Date()).getMilliseconds();\r\n        \r\n        engine.Update(currentTime - engine.LastUpdateTime);\r\n        \r\n        engine.LastUpdateTime = currentTime;\r\n    }\r\n    \r\n    this.StartUpdating = function() {\r\n        engine.StopUpdating();\r\n        \r\n        engine.UpdateIntervalKey = setInterval(engine.IntervalUpdateFunc);\r\n    }\r\n    \r\n    this.StopUpdating = function() {\r\n        if (typeof engine.UpdateIntervalKey !== 'undefined') {\r\n            clearInterval(engine.UpdateIntervalKey);\r\n            delete engine.UpdateIntervalKey;\r\n        }\r\n    }\r\n}\r\n\r\nvar entitySystem = new JSEntitySystem();\r\n\r\nentitySystem.RegisterComponent('TestComponent',\r\n    new entitySystem.Component(function(entity, gameTime) {\r\n                        //assigned\r\n        \t\t\t\t},\r\n        \t\t\tfunction(entity, gameTime) {\r\n                        //removed\r\n        \t\t\t\t},\r\n        \t\t\tfunction(entity, gameTime) {\r\n                        //update\r\n        \t\t\t\t},\r\n        \t\t\tfunction(entity, gameTime) {\r\n                        //render\r\n        \t\t\t}),\r\n            \t[],\r\n                []);\r\n\r\nentitySystem.StartUpdating();\r\n\r\nvar ent = new entitySystem.Entity("],[0,");"]],"start1":3596,"start2":3596,"length1":81,"length2":2076}]],"length":5672,"saved":false}
{"ts":1344523643671,"patch":[[{"diffs":[[0,"  engine"],[1,"."],[0,"\r\n      "]],"start1":4306,"start2":4306,"length1":16,"length2":17}]],"length":5673,"saved":false}
{"ts":1344523655797,"patch":[[{"diffs":[[0,"        "],[-1,"engine."],[1,"a"],[0,"\r\n      "]],"start1":4300,"start2":4300,"length1":23,"length2":17}]],"length":5667,"saved":false}
{"ts":1344523656944,"patch":[[{"diffs":[[0,"        "],[-1,"a"],[1,"en"],[0,"\r\n      "]],"start1":4300,"start2":4300,"length1":17,"length2":18}]],"length":5668,"saved":false}
{"ts":1344523658953,"patch":[[{"diffs":[[0,"       e"],[-1,"n"],[0,"\r\n      "]],"start1":4301,"start2":4301,"length1":17,"length2":16}]],"length":5667,"saved":false}
{"ts":1344523660728,"patch":[[{"diffs":[[0,"       e"],[1,"ngine."],[0,"\r\n      "]],"start1":4301,"start2":4301,"length1":16,"length2":22}]],"length":5673,"saved":false}
{"ts":1344523661408,"patch":[[{"diffs":[[0,"     engine."],[1,"a"],[0,"\r\n        }\r"]],"start1":4303,"start2":4303,"length1":24,"length2":25}]],"length":5674,"saved":false}
{"ts":1344523662333,"patch":[[{"diffs":[[0,"engine.a"],[1,"dd"],[0,"\r\n      "]],"start1":4308,"start2":4308,"length1":16,"length2":18}]],"length":5676,"saved":false}
{"ts":1344523663734,"patch":[[{"diffs":[[0," engine."],[-1,"add"],[1,"A"],[0,"\r\n      "]],"start1":4307,"start2":4307,"length1":19,"length2":17}]],"length":5674,"saved":false}
{"ts":1344523664859,"patch":[[{"diffs":[[0,"engine.A"],[1,"dd"],[0,"\r\n      "]],"start1":4308,"start2":4308,"length1":16,"length2":18}]],"length":5676,"saved":false}
{"ts":1344523666096,"patch":[[{"diffs":[[0,"engine.A"],[-1,"dd"],[0,"\r\n      "]],"start1":4308,"start2":4308,"length1":18,"length2":16}]],"length":5674,"saved":false}
{"ts":1344523669623,"patch":[[{"diffs":[[0," engine."],[-1,"A"],[0,"\r\n      "]],"start1":4307,"start2":4307,"length1":17,"length2":16}]],"length":5673,"saved":false}
{"ts":1344523676608,"patch":[[{"diffs":[[0,"     engine."],[1,"add"],[0,"\r\n        }\r"]],"start1":4303,"start2":4303,"length1":24,"length2":27}]],"length":5676,"saved":false}
{"ts":1344523680820,"patch":[[{"diffs":[[0," engine."],[-1,"a"],[1,"A"],[0,"dd"],[1,"Component()"],[0,"\r\n      "]],"start1":4307,"start2":4307,"length1":19,"length2":30}]],"length":5687,"saved":false}
{"ts":1344523687990,"patch":[[{"diffs":[[0,"omponent"],[-1,"()"],[0,"\r\n      "]],"start1":4319,"start2":4319,"length1":18,"length2":16}]],"length":5685,"saved":false}
{"ts":1344523690034,"patch":[[{"diffs":[[0,");\r\n"],[-1,"            engine.AddComponent\r\n"],[0,"    "]],"start1":4292,"start2":4292,"length1":41,"length2":8}]],"length":5652,"saved":false}
{"contributors":[],"silentsave":true,"ts":1344607947314,"patch":[[{"diffs":[[-1,"\r\n"],[0,"function"]],"start1":0,"start2":0,"length1":10,"length2":8},{"diffs":[[0,"tem("],[-1,") {\r\n    this.NextFreeId = 0;\r\n    var engine = this;"],[1,"updateIntervalMilliseconds) {\r\n    /*\r\n      This is the next free Id ready to be assigned to an entity.\r\n    */\r\n    this.NextFreeId = 0;\r\n    \r\n    /*\r\n      The interval to use for the setInterval function.\r\n    */\r\n    this.UpdateIntervalMilliseconds = updateIntervalMilliseconds;\r\n    \r\n    /*\r\n      The variable used to hold the scope of the JSEntitySystem function.\r\n    */\r\n    var engine = this;\r\n    \r\n    this.MousePageX = 0;\r\n    this.MousePageY = 0;\r\n    \r\n    /*\r\n      The jQuery callback used for the mouse movement callback and grab the latest mouse coordinates.\r\n    */\r\n    $(document).ready(function() {\r\n       $(document).mousemove(function(e) {\r\n          engine.MousePageX = e.pageX;\r\n          engine.MousePageY = e.pageY;\r\n       })}); \r\n    "],[0,"\r\n  "]],"start1":20,"start2":20,"length1":61,"length2":777},{"diffs":[[0,"tas is a"],[-1,"n associative object"],[1," map"],[0," for hol"]],"start1":1225,"start2":1225,"length1":36,"length2":20},{"diffs":[[0,"is a"],[-1,"n associative object"],[1," map"],[0," for"]],"start1":1317,"start2":1317,"length1":28,"length2":12},{"diffs":[[0,"st = [];\r\n    \r\n"],[1,"    /*\r\n      The factory for the Component methods.\r\n    */\r\n"],[0,"    this.Compone"]],"start1":1512,"start2":1512,"length1":32,"length2":94},{"diffs":[[0,";\r\n    }\r\n    \r\n"],[1,"    /*\r\n      Registers a Component by name in the Components map.\r\n    */\r\n"],[0,"    this.Registe"]],"start1":1773,"start2":1773,"length1":32,"length2":108},{"diffs":[[0,";\r\n    }\r\n    \r\n"],[1,"    /*\r\n      Adds a component to the entity passed in.\r\n    */\r\n"],[0,"    this.AddComp"]],"start1":2164,"start2":2164,"length1":32,"length2":97},{"diffs":[[0,"his.AddComponent"],[1,"WithRequirements"],[0," = function(enti"]],"start1":2250,"start2":2250,"length1":32,"length2":48},{"diffs":[[0,"omponent"],[-1,""],[0,""],[1,"s"],[0,";\r\n    \t"]],"start1":2474,"start2":2474,"length1":16,"length2":17},{"diffs":[[0,"s) {\r\n    \t\tif ("],[1,"typeof key === 'String' && "],[0,"!(key in entity."]],"start1":2754,"start2":2754,"length1":32,"length2":59},{"diffs":[[0,"omponent"],[1,"WithRequirements"],[0,"(entity,"]],"start1":2847,"start2":2847,"length1":16,"length2":32},{"diffs":[[0,"  \t\tif ("],[-1,""],[0,""],[1,"typeof key === 'String' && "],[0,"!(key in"]],"start1":2961,"start2":2961,"length1":16,"length2":43},{"diffs":[[0,"in this."],[-1,"c"],[1,"C"],[0,"omponent"]],"start1":3915,"start2":3915,"length1":17,"length2":17},{"diffs":[[0,"omponent"],[-1,""],[0,""],[1,"WithRequirements"],[0,"(this, c"]],"start1":4071,"start2":4071,"length1":16,"length2":32},{"diffs":[[0,"mponents[i]."],[-1,""],[0,""],[1,"Methods."],[0,"Update(self,"]],"start1":4487,"start2":4487,"length1":24,"length2":32},{"diffs":[[0,";\r\n    }\r\n    \r\n"],[1,"    this.CreateEntity = function(idToUse) {\r\n        return new engine.Entity(idToUse);\r\n    }\r\n    \r\n"],[0,"    this.RemoveE"]],"start1":4638,"start2":4638,"length1":32,"length2":134},{"diffs":[[0,"tity !=="],[-1,"="],[0,""],[1,""],[0," -1) {\r\n"]],"start1":5060,"start2":5060,"length1":17,"length2":16},{"diffs":[[0,"dateFunc"],[-1,""],[0,""],[1,", engine.UpdateIntervalMilliseconds"],[0,");\r\n    "]],"start1":5908,"start2":5908,"length1":16,"length2":51},{"diffs":[[0,"ySystem("],[-1,""],[0,""],[1,"32"],[0,");\r\n\r\nen"]],"start1":6223,"start2":6223,"length1":16,"length2":18},{"diffs":[[0,"update\r\n"],[1,"                        if (typeof entity.counter === 'undefined') {\r\n                            entity.counter = 0;\r\n                        }\r\n                        entity.counter++;\r\n                        //$('#moveThisWithMouse').html(gameTime + \" \" + entity.counter);\r\n                        var px = 10 *  (gameTime/32);\r\n                        \r\n                        $('#moveThisWithMouse').animate( {\r\n                            'marginLeft' : \"+=\" + px + \"px\"\r\n                            });\r\n"],[0,"        "]],"start1":6560,"start2":6560,"length1":16,"length2":530},{"diffs":[[0,"ar ent ="],[-1," new"],[0," entityS"]],"start1":7265,"start2":7265,"length1":20,"length2":16},{"diffs":[[0,"ySystem."],[1,"Create"],[0,"Entity()"]],"start1":7279,"start2":7279,"length1":16,"length2":22},{"diffs":[[0,"ntity();"],[1,"\r\n\r\nent.AddComponent('TestComponent');"]],"start1":7294,"start2":7294,"length1":8,"length2":46}]],"length":7340,"saved":false}
{"ts":1344607948212,"patch":[[{"diffs":[[0," = 10 * "],[1,"ab"],[0," (gameTi"]],"start1":6877,"start2":6877,"length1":16,"length2":18}]],"length":7342,"saved":false}
{"ts":1344607949497,"patch":[[{"diffs":[[0," 10 * ab"],[1,"s"],[0," (gameTi"]],"start1":6879,"start2":6879,"length1":16,"length2":17}]],"length":7343,"saved":false}
{"ts":1344607951066,"patch":[[{"diffs":[[0," 10 * ab"],[-1,"s"],[0," (gameTi"]],"start1":6879,"start2":6879,"length1":17,"length2":16}]],"length":7342,"saved":false}
{"ts":1344607952435,"patch":[[{"diffs":[[0,"= 10 * a"],[-1,"b"],[0," (gameTi"]],"start1":6878,"start2":6878,"length1":17,"length2":16}]],"length":7341,"saved":false}
{"ts":1344607955061,"patch":[[{"diffs":[[0," = 10 * "],[1,"m"],[0,"a (gameT"]],"start1":6877,"start2":6877,"length1":16,"length2":17}]],"length":7342,"saved":false}
{"ts":1344607956162,"patch":[[{"diffs":[[0," 10 * ma"],[1,"th"],[0," (gameTi"]],"start1":6879,"start2":6879,"length1":16,"length2":18}]],"length":7344,"saved":false}
{"ts":1344607958710,"patch":[[{"diffs":[[0,"0 * "],[-1,"math"],[0," (ga"]],"start1":6881,"start2":6881,"length1":12,"length2":8}]],"length":7340,"saved":false}
{"ts":1344607976208,"patch":[[{"diffs":[[0,"= 10 *  "],[1,"Math.a "],[0,"(gameTim"]],"start1":6878,"start2":6878,"length1":16,"length2":23}]],"length":7347,"saved":false}
{"ts":1344607978834,"patch":[[{"diffs":[[0,"  Math.a"],[-1," "],[1,"bs"],[0,"(gameTim"]],"start1":6884,"start2":6884,"length1":17,"length2":18}]],"length":7348,"saved":false}
{"ts":1344607986353,"patch":[[{"diffs":[[0," = 10 * "],[1,"Ma"],[0," Math.ab"]],"start1":6877,"start2":6877,"length1":16,"length2":18}]],"length":7350,"saved":false}
{"ts":1344607987795,"patch":[[{"diffs":[[0,"x = 10 *"],[-1," Ma"],[0," Math.ab"]],"start1":6876,"start2":6876,"length1":19,"length2":16}]],"length":7347,"saved":false}
{"contributors":[],"silentsave":false,"ts":1344662612590,"patch":[[{"diffs":[[1,"function JSEntitySystem(updateIntervalMilliseconds) {\r\n    /*\r\n      This is the next free Id ready to be assigned to an entity.\r\n    */\r\n    this.NextFreeId = 0;\r\n    \r\n    /*\r\n      The interval to use for the setInterval function.\r\n    */\r\n    this.UpdateIntervalMilliseconds = updateIntervalMilliseconds;\r\n    \r\n    /*\r\n      The variable used to hold the scope of the JSEntitySystem function.\r\n    */\r\n    var engine = this;\r\n    \r\n    this.MousePos = new V2();\r\n    \r\n    /*\r\n      The jQuery callback used for the mouse movement callback and grab the latest mouse coordinates.\r\n    */\r\n    $(document).ready(function() {\r\n       $(document).mousemove(function(e) {\r\n          engine.MousePos.X = e.pageX;\r\n          engine.MousePos.Y = e.pageY;\r\n       })}); \r\n    \r\n    /*\r\n    The component metadata collection.\r\n    keyed on the componentName, toLowered\r\n    Component[\"name\"] =    {\r\n        ComponentName : \"name\",\r\n    \tMethods : {\r\n    \t\tAssigned : method,\r\n    \t\tRemoved : method,\r\n    \t\tUpdate : method,\r\n    \t\tRender : method\r\n    \t},\r\n    \tRequiredComponents : array of strings,\r\n    \tRequiredData : array of data names\r\n    }\r\n    */\r\n    this.Components = { };\r\n    \r\n    /*\r\n      Datas is a map for holding data.\r\n    */\r\n    this.Datas = { };\r\n    \r\n    /*\r\n      Entities is a map for holding entities.\r\n    */\r\n    this.Entities = { };\r\n    \r\n    /*\r\n      EntityUpdateList is an array used to update the entities for the engine.\r\n    */    \r\n    this.EntityUpdateList = [];\r\n    \r\n    /*\r\n      The factory for the Component methods.\r\n    */\r\n    this.Component = function(assigned, removed, update, render) {\r\n    \tthis.Assigned = assigned;\r\n    \tthis.Removed = removed;\r\n    \tthis.Update = update;\r\n    \tthis.Render = render;\r\n    }\r\n    \r\n    /*\r\n      Registers a Component by name in the Components map.\r\n    */\r\n    this.RegisterComponent = function(componentName, component, requiredComponents, requiredData) {\r\n    \tengine.Components[componentName] = {\r\n    \t\tComponentName : componentName,\r\n    \t\tMethods : component,\r\n    \t\tRequiredComponents : requiredComponents,\r\n    \t\tRequiredData : requiredData\r\n    \t};\r\n    }\r\n    \r\n    /*\r\n      Adds a component to the entity passed in.\r\n    */\r\n    this.AddComponentWithRequirements = function(entity, componentName) {\r\n    \tvar component = engine.Components[componentName];\r\n    \tvar requiredData = component.RequiredData;\r\n    \tvar requiredComponents = component.RequiredComponents;\r\n    \t\r\n    \tif (!(componentName in entity.Components)) {\r\n    \t\tentity.Components[componentName] = engine.Components[componentName];\r\n    \t\tentity.UpdateComponents.push(engine.Components[componentName]);\r\n    \t}\r\n    \t\r\n    \tfor (var key in component.RequiredComponents) {\r\n    \t\tif (typeof key === 'String' && !(key in entity.Components)) {\r\n    \t\t\tengine.AddComponentWithRequirements(entity, key);\r\n    \t\t}\r\n    \t}\r\n    \t\r\n    \tfor (var key in component.RequiredData) {\r\n    \t\tif (typeof key === 'String' && !(key in entity.Datas)) {\r\n    \t\t\tentity.Datas[key] = component.RequiredData[key];\r\n    \t\t}\r\n    \t}\r\n    }\r\n    \r\n    //May have to make a CreateEntity function.\r\n    this.Entity = function(idToUse) {\r\n        var self = this;\r\n        \r\n        if (typeof idToUse == 'number') {\r\n            if (engine.Entities.Any(function(ent) { ent.Id == idToUse })) {\r\n                throw new Error(\"Tried to create an entity with an explicity Id that already existed! Entity in question: \" + idToUse);\r\n                return;\r\n            }\r\n            \r\n            this.Id = idToUse;\r\n        } else {\r\n            engine.NextFreeId = engine.NextFreeId + 1;\r\n            this.Id = engine.NextFreeId;    \r\n        }\r\n        \r\n    \tthis.Datas = {\r\n    \t};\r\n    \tthis.Components = {\r\n    \t};\r\n        \r\n    \tthis.UpdateComponents = [];\r\n    \t\r\n        this.AddComponent = function(componentName) {\r\n    \t\tif (!(componentName in this.Components)) {\r\n    \t\t\t//recursively add components here.\r\n    \t\t\t//make sure to add each components required data here as well.\r\n    \t\t\tengine.AddComponentWithRequirements(this, componentName);\r\n    \t\t}\r\n    \t};\r\n        \r\n        this.RemoveComponent = function(componentName) {\r\n            if (componentName in this.Components) {\r\n                delete this.Components[componentName];\r\n            }\r\n        };\r\n    \t\r\n    \tthis.Update = function(gameTime) {\r\n    \t\tvar i = 0;\r\n    \t\tfor (i = 0; i < this.UpdateComponents.length; i++) {\r\n    \t\t\tthis.UpdateComponents[i].Methods.Update(self, gameTime);\r\n    \t\t}\r\n    \t};\r\n    \t\r\n    \tengine.Entities[this.Id] = this;\r\n        engine.EntityUpdateList.push(this);\r\n    }\r\n    \r\n    this.CreateEntity = function(idToUse) {\r\n        return new engine.Entity(idToUse);\r\n    }\r\n    \r\n    this.RemoveEntity = function(entityId) {\r\n        var entityToRemove = engine.Entities[entityId];\r\n        \r\n        if (entityToRemove === null) {\r\n            return;\r\n        }\r\n        \r\n        var indexOfEntity = engine.EntityUpdateList.indexOf(entityToRemove);\r\n        \r\n        if (indexOfEntity !== -1) {\r\n            engine.EntityUpdateList.splice(indexOfEntity, 1);\r\n        }\r\n        \r\n        delete engine.Entities[entityId];\r\n    }\r\n    \r\n    this.Update = function(gameTime) {\r\n        var i = 0;\r\n        for(i = 0; i < engine.EntityUpdateList.length; i++) {\r\n            engine.EntityUpdateList[i].Update(gameTime);\r\n        }\r\n    }\r\n    \r\n    this.GameStart = (new Date()).getMilliseconds();\r\n    this.LastUpdateTime = this.GameStart;\r\n    \r\n    this.IntervalUpdateFunc = function() {\r\n        var currentTime = (new Date()).getMilliseconds();\r\n        \r\n        engine.Update(currentTime - engine.LastUpdateTime);\r\n        \r\n        engine.LastUpdateTime = currentTime;\r\n    }\r\n    \r\n    this.StartUpdating = function() {\r\n        engine.StopUpdating();\r\n        \r\n        engine.UpdateIntervalKey = setInterval(engine.IntervalUpdateFunc, engine.UpdateIntervalMilliseconds);\r\n    }\r\n    \r\n    this.StopUpdating = function() {\r\n        if (typeof engine.UpdateIntervalKey !== 'undefined') {\r\n            clearInterval(engine.UpdateIntervalKey);\r\n            delete engine.UpdateIntervalKey;\r\n        }\r\n    }\r\n}\r\n\r\nvar entitySystem = new JSEntitySystem(32);\r\n\r\nentitySystem.RegisterComponent('TestComponent',\r\n    new entitySystem.Component(function(entity, gameTime) {\r\n                        //assigned\r\n    \t\t\t\t},\r\n        \t\t\tfunction(entity, gameTime) {\r\n                        //removed\r\n    \t\t\t\t},\r\n        \t\t\tfunction(entity, gameTime) {\r\n                        //update\r\n                        if (typeof entity.counter === 'undefined') {\r\n                            entity.counter = 0;\r\n                        }\r\n                        entity.counter++;\r\n                        //$('#moveThisWithMouse').html(gameTime + \" \" + entity.counter);\r\n                        \r\n                        \r\n                        var div = $('#jsDiv' + entity.Datas.div);\r\n                        var divPos = div.position();\r\n                        //A -> B :: B - A\r\n                        var currentPos = new V2(divPos.left, divPos.top);\r\n                        var toMouse = entitySystem.MousePos.Sub(currentPos).Normalize().Multiply(entity.Datas.distanceFromUpperLeft);\r\n                        \r\n                        toMouse = toMouse.Add(currentPos);\r\n                        \r\n                        div.css('marginLeft', toMouse.X);\r\n                        div.css('marginTop', toMouse.Y);\r\n                        \r\n    \t\t\t\t},\r\n        \t\t\tfunction(entity, gameTime) {\r\n                        //render\r\n        \t\t\t}),\r\n            \t[],\r\n                []);\r\n\r\n(function() {\r\n    var i = 0;\r\n    \r\n    for (i = 0; i < 500; i++) {\r\n        (function() {\r\n            var ent = entitySystem.CreateEntity();    \r\n            ent.Datas.distanceFromUpperLeft = i * 2;\r\n            \r\n            var newDiv = $('<div id=\"jsDiv' + i + '\">a</div>');\r\n            $('body').append(newDiv);\r\n            \r\n            ent.Datas.div = i;\r\n            \r\n            ent.AddComponent('TestComponent');\r\n        })();\r\n    }\r\n})();\r\n\r\nentitySystem.StartUpdating();"]],"start1":0,"start2":0,"length1":0,"length2":8137}]],"length":8137,"saved":false}
{"contributors":[],"silentsave":true,"ts":1344791716213,"patch":[[{"diffs":[[0,").append"],[1,"t"],[0,"(newDiv)"]],"start1":7950,"start2":7950,"length1":16,"length2":17},{"diffs":[[0,"t(newDiv);\r\n"],[-1,""],[0,"            "]],"start1":7958,"start2":7958,"length1":24,"length2":24},{"diffs":[[0,"}\r\n})();\r\n\r\n"],[1,""],[0,"entitySystem"]],"start1":8097,"start2":8097,"length1":24,"length2":24},{"diffs":[[0,"g();"],[-1,"function JSEntitySystem(updateIntervalMilliseconds) {\r\n    /*\r\n      This is the next free Id ready to be assigned to an entity.\r\n    */\r\n    this.NextFreeId = 0;\r\n    \r\n    /*\r\n      The interval to use for the setInterval function.\r\n    */\r\n    this.UpdateIntervalMilliseconds = updateIntervalMilliseconds;\r\n    \r\n    /*\r\n      The variable used to hold the scope of the JSEntitySystem function.\r\n    */\r\n    var engine = this;\r\n    \r\n    this.MousePageX = 0;\r\n    this.MousePageY = 0;\r\n    \r\n    /*\r\n      The jQuery callback used for the mouse movement callback and grab the latest mouse coordinates.\r\n    */\r\n    $(document).ready(function() {\r\n       $(document).mousemove(function(e) {\r\n          engine.MousePageX = e.pageX;\r\n          engine.MousePageY = e.pageY;\r\n       })}); \r\n    \r\n    /*\r\n    The component metadata collection.\r\n    keyed on the componentName, toLowered\r\n    Component[\"name\"] =    {\r\n        ComponentName : \"name\",\r\n    \tMethods : {\r\n    \t\tAssigned : method,\r\n    \t\tRemoved : method,\r\n    \t\tUpdate : method,\r\n    \t\tRender : method\r\n    \t},\r\n    \tRequiredComponents : array of strings,\r\n    \tRequiredData : array of data names\r\n    }\r\n    */\r\n    this.Components = { };\r\n    \r\n    /*\r\n      Datas is a map for holding data.\r\n    */\r\n    this.Datas = { };\r\n    \r\n    /*\r\n      Entities is a map for holding entities.\r\n    */\r\n    this.Entities = { };\r\n    \r\n    /*\r\n      EntityUpdateList is an array used to update the entities for the engine.\r\n    */    \r\n    this.EntityUpdateList = [];\r\n    \r\n    /*\r\n      The factory for the Component methods.\r\n    */\r\n    this.Component = function(assigned, removed, update, render) {\r\n    \tthis.Assigned = assigned;\r\n    \tthis.Removed = removed;\r\n    \tthis.Update = update;\r\n    \tthis.Render = render;\r\n    }\r\n    \r\n    /*\r\n      Registers a Component by name in the Components map.\r\n    */\r\n    this.RegisterComponent = function(componentName, component, requiredComponents, requiredData) {\r\n    \tengine.Components[componentName] = {\r\n    \t\tComponentName : componentName,\r\n    \t\tMethods : component,\r\n    \t\tRequiredComponents : requiredComponents,\r\n    \t\tRequiredData : requiredData\r\n    \t};\r\n    }\r\n    \r\n    /*\r\n      Adds a component to the entity passed in.\r\n    */\r\n    this.AddComponentWithRequirements = function(entity, componentName) {\r\n    \tvar component = engine.Components[componentName];\r\n    \tvar requiredData = component.RequiredData;\r\n    \tvar requiredComponents = component.RequiredComponents;\r\n    \t\r\n    \tif (!(componentName in entity.Components)) {\r\n    \t\tentity.Components[componentName] = engine.Components[componentName];\r\n    \t\tentity.UpdateComponents.push(engine.Components[componentName]);\r\n    \t}\r\n    \t\r\n    \tfor (var key in component.RequiredComponents) {\r\n    \t\tif (typeof key === 'String' && !(key in entity.Components)) {\r\n    \t\t\tengine.AddComponentWithRequirements(entity, key);\r\n    \t\t}\r\n    \t}\r\n    \t\r\n    \tfor (var key in component.RequiredData) {\r\n    \t\tif (typeof key === 'String' && !(key in entity.Datas)) {\r\n    \t\t\tentity.Datas[key] = component.RequiredData[key];\r\n    \t\t}\r\n    \t}\r\n    }\r\n    \r\n    //May have to make a CreateEntity function.\r\n    this.Entity = function(idToUse) {\r\n        var self = this;\r\n        \r\n        if (typeof idToUse == 'number') {\r\n            if (engine.Entities.Any(function(ent) { ent.Id == idToUse })) {\r\n                throw new Error(\"Tried to create an entity with an explicity Id that already existed! Entity in question: \" + idToUse);\r\n                return;\r\n            }\r\n            \r\n            this.Id = idToUse;\r\n        } else {\r\n            engine.NextFreeId = engine.NextFreeId + 1;\r\n            this.Id = engine.NextFreeId;    \r\n        }\r\n        \r\n    \tthis.Datas = {\r\n    \t};\r\n    \tthis.Components = {\r\n    \t};\r\n        \r\n    \tthis.UpdateComponents = [];\r\n    \t\r\n        this.AddComponent = function(componentName) {\r\n    \t\tif (!(componentName in this.Components)) {\r\n    \t\t\t//recursively add components here.\r\n    \t\t\t//make sure to add each components required data here as well.\r\n    \t\t\tengine.AddComponentWithRequirements(this, componentName);\r\n    \t\t}\r\n    \t};\r\n        \r\n        this.RemoveComponent = function(componentName) {\r\n            if (componentName in this.Components) {\r\n                delete this.Components[componentName];\r\n            }\r\n        };\r\n    \t\r\n    \tthis.Update = function(gameTime) {\r\n    \t\tvar i = 0;\r\n    \t\tfor (i = 0; i < this.UpdateComponents.length; i++) {\r\n    \t\t\tthis.UpdateComponents[i].Methods.Update(self, gameTime);\r\n    \t\t}\r\n    \t};\r\n    \t\r\n    \tengine.Entities[this.Id] = this;\r\n        engine.EntityUpdateList.push(this);\r\n    }\r\n    \r\n    this.CreateEntity = function(idToUse) {\r\n        return new engine.Entity(idToUse);\r\n    }\r\n    \r\n    this.RemoveEntity = function(entityId) {\r\n        var entityToRemove = engine.Entities[entityId];\r\n        \r\n        if (entityToRemove === null) {\r\n            return;\r\n        }\r\n        \r\n        var indexOfEntity = engine.EntityUpdateList.indexOf(entityToRemove);\r\n        \r\n        if (indexOfEntity !== -1) {\r\n            engine.EntityUpdateList.splice(indexOfEntity, 1);\r\n        }\r\n        \r\n        delete engine.Entities[entityId];\r\n    }\r\n    \r\n    this.Update = function(gameTime) {\r\n        var i;\r\n        for(i = 0; i < engine.EntityUpdateList.length; i++) {\r\n            engine.EntityUpdateList[i].Update(gameTime);\r\n        }\r\n    }\r\n    \r\n    this.GameStart = (new Date()).getMilliseconds();\r\n    this.LastUpdateTime = this.GameStart;\r\n    \r\n    this.IntervalUpdateFunc = function() {\r\n        var currentTime = (new Date()).getMilliseconds();\r\n        \r\n        engine.Update(currentTime - engine.LastUpdateTime);\r\n        \r\n        engine.LastUpdateTime = currentTime;\r\n    }\r\n    \r\n    this.StartUpdating = function() {\r\n        engine.StopUpdating();\r\n        \r\n        engine.UpdateIntervalKey = setInterval(engine.IntervalUpdateFunc, engine.UpdateIntervalMilliseconds);\r\n    }\r\n    \r\n    this.StopUpdating = function() {\r\n        if (typeof engine.UpdateIntervalKey !== 'undefined') {\r\n            clearInterval(engine.UpdateIntervalKey);\r\n            delete engine.UpdateIntervalKey;\r\n        }\r\n    }\r\n}\r\n\r\nvar entitySystem = new JSEntitySystem(32);\r\n\r\nentitySystem.RegisterComponent('TestComponent',\r\n    new entitySystem.Component(function(entity, gameTime) {\r\n                        //assigned\r\n        \t\t\t\t},\r\n        \t\t\tfunction(entity, gameTime) {\r\n                        //removed\r\n        \t\t\t\t},\r\n        \t\t\tfunction(entity, gameTime) {\r\n                        //update\r\n                        if (typeof entity.counter === 'undefined') {\r\n                            entity.counter = 0;\r\n                        }\r\n                        entity.counter++;\r\n                        //$('#moveThisWithMouse').html(gameTime + \" \" + entity.counter);\r\n                        var px = 10 * Math.abs(gameTime/32);\r\n                        \r\n                        $('#moveThisWithMouse').animate( {\r\n                            'marginLeft' : \"+=\" + px + \"px\"\r\n                            });\r\n        \t\t\t\t},\r\n        \t\t\tfunction(entity, gameTime) {\r\n                        //render\r\n        \t\t\t}),\r\n            \t[],\r\n                []);\r\n\r\nentitySystem.StartUpdating();\r\n\r\nvar ent = entitySystem.CreateEntity();\r\n\r\nent.AddComponent('TestComponent');"]],"start1":8134,"start2":8134,"length1":7351,"length2":4}]],"length":8138,"saved":false}
{"ts":1344791717476,"patch":[[{"diffs":[[0,").append"],[-1,"t"],[0,"(newDiv)"]],"start1":7950,"start2":7950,"length1":17,"length2":16}]],"length":8137,"saved":false}
{"ts":1344791720596,"patch":[[{"diffs":[[0,"y')."],[-1,"append"],[0,"(new"]],"start1":7948,"start2":7948,"length1":14,"length2":8}]],"length":8131,"saved":false}
{"ts":1344791722219,"patch":[[{"diffs":[[0,"'body')."],[1,"app"],[0,"(newDiv)"]],"start1":7944,"start2":7944,"length1":16,"length2":19}]],"length":8134,"saved":false}
{"ts":1344791723248,"patch":[[{"diffs":[[0,"dy').app"],[1,"end"],[0,"(newDiv)"]],"start1":7947,"start2":7947,"length1":16,"length2":19}]],"length":8137,"saved":false}
{"ts":1344791724294,"patch":[[{"diffs":[[0,"y')."],[-1,"append"],[0,"(new"]],"start1":7948,"start2":7948,"length1":14,"length2":8}]],"length":8131,"saved":false}
{"ts":1344791730830,"patch":[[{"diffs":[[0,"    "],[-1,"$('body').("],[0,"newDiv"],[-1,");"],[0,"\r\n  "]],"start1":7938,"start2":7938,"length1":27,"length2":14}]],"length":8118,"saved":false}
{"ts":1344791845333,"patch":[[{"diffs":[[0,"  newDiv"],[1,"."],[0,"\r\n      "]],"start1":7940,"start2":7940,"length1":16,"length2":17}]],"length":8119,"saved":false}
{"ts":1344791847174,"patch":[[{"diffs":[[0," newDiv."],[1,"app"],[0,"\r\n      "]],"start1":7941,"start2":7941,"length1":16,"length2":19}]],"length":8122,"saved":false}
{"ts":1344791849093,"patch":[[{"diffs":[[0,"wDiv.app"],[1,"endTo"],[0,"\r\n      "]],"start1":7944,"start2":7944,"length1":16,"length2":21}]],"length":8127,"saved":false}
{"ts":1344791852322,"patch":[[{"diffs":[[0,"appendTo"],[1,"($())"],[0,"\r\n      "]],"start1":7949,"start2":7949,"length1":16,"length2":21}]],"length":8132,"saved":false}
{"ts":1344791852915,"patch":[[{"diffs":[[0,"endTo($("],[1,"''"],[0,"))\r\n    "]],"start1":7952,"start2":7952,"length1":16,"length2":18}]],"length":8134,"saved":false}
{"ts":1344791856550,"patch":[[{"diffs":[[0,"ndTo($('"],[1,"body"],[0,"'))\r\n   "]],"start1":7953,"start2":7953,"length1":16,"length2":20}]],"length":8138,"saved":false}
{"ts":1344791859202,"patch":[[{"diffs":[[0,"'body'))"],[1,";"],[0,"\r\n      "]],"start1":7960,"start2":7960,"length1":16,"length2":17}]],"length":8139,"saved":false}
{"ts":1344791909683,"patch":[[{"diffs":[[0,"('body'));\r\n"],[1,"            thr\r\n"],[0,"            "]],"start1":7959,"start2":7959,"length1":24,"length2":41}]],"length":8156,"saved":false}
{"ts":1344791910713,"patch":[[{"diffs":[[0,"     thr"],[1,"ow"],[0,"\r\n      "]],"start1":7978,"start2":7978,"length1":16,"length2":18}]],"length":8158,"saved":false}
{"ts":1344791912694,"patch":[[{"diffs":[[0,"   throw"],[1," new Error"],[0,"\r\n      "]],"start1":7980,"start2":7980,"length1":16,"length2":26}]],"length":8168,"saved":false}
{"ts":1344791914192,"patch":[[{"diffs":[[0,"ew Error"],[1,"(\"\")"],[0,"\r\n      "]],"start1":7990,"start2":7990,"length1":16,"length2":20}]],"length":8172,"saved":false}
{"ts":1344791914847,"patch":[[{"diffs":[[0,"ror("],[-1,"\"\""],[0,")\r\n "]],"start1":7995,"start2":7995,"length1":10,"length2":8}]],"length":8170,"saved":false}
{"ts":1344791915580,"patch":[[{"diffs":[[0,"w Error("],[1,"''"],[0,")\r\n     "]],"start1":7991,"start2":7991,"length1":16,"length2":18}]],"length":8172,"saved":false}
{"ts":1344791918435,"patch":[[{"diffs":[[0," Error('"],[-1,"'"],[0,")\r\n     "]],"start1":7992,"start2":7992,"length1":17,"length2":16}]],"length":8171,"saved":false}
{"ts":1344791919387,"patch":[[{"diffs":[[0,"w Error("],[1,"i"],[0,"')\r\n    "]],"start1":7991,"start2":7991,"length1":16,"length2":17}]],"length":8172,"saved":false}
{"ts":1344791920385,"patch":[[{"diffs":[[0," Error(i"],[-1,"'"],[0,")\r\n     "]],"start1":7992,"start2":7992,"length1":17,"length2":16}]],"length":8171,"saved":false}
{"ts":1344791921539,"patch":[[{"diffs":[[0," Error(i"],[1," "],[0,")\r\n     "]],"start1":7992,"start2":7992,"length1":16,"length2":17}]],"length":8172,"saved":false}
{"ts":1344791922834,"patch":[[{"diffs":[[0,"or(i"],[-1," "],[0,")"],[1,";"],[0,"\r\n  "]],"start1":7996,"start2":7996,"length1":10,"length2":10}]],"length":8172,"saved":false}
{"ts":1344791943069,"patch":[[{"diffs":[[0,"on() {\r\n    var "],[-1,"i"],[0," = 0;\r\n    \r\n   "]],"start1":7655,"start2":7655,"length1":33,"length2":32}]],"length":8171,"saved":false}
{"ts":1344791944754,"patch":[[{"diffs":[[0,"    var "],[1,"uniqe"],[0," = 0;\r\n "]],"start1":7663,"start2":7663,"length1":16,"length2":21}]],"length":8176,"saved":false}
{"ts":1344791947343,"patch":[[{"diffs":[[0,"var uniq"],[1,"u"],[0,"e = 0;\r\n"]],"start1":7667,"start2":7667,"length1":16,"length2":17}]],"length":8177,"saved":false}
{"ts":1344791948482,"patch":[[{"diffs":[[0,"r unique"],[1,"Prop"],[0," = 0;\r\n "]],"start1":7669,"start2":7669,"length1":16,"length2":20}]],"length":8181,"saved":false}
{"ts":1344791949403,"patch":[[{"diffs":[[0,"iqueProp"],[1,"s"],[0," = 0;\r\n "]],"start1":7673,"start2":7673,"length1":16,"length2":17}]],"length":8182,"saved":false}
{"ts":1344791952647,"patch":[[{"diffs":[[0," \r\n    for ("],[-1,"i"],[1,"uniqueProps"],[0," = 0; i < 50"]],"start1":7692,"start2":7692,"length1":25,"length2":35}]],"length":8192,"saved":false}
{"ts":1344791955690,"patch":[[{"diffs":[[0,"ps = 0; "],[-1,"i"],[1,"uniqueProps"],[0," < 500; "]],"start1":7713,"start2":7713,"length1":17,"length2":27}]],"length":8202,"saved":false}
{"ts":1344791956516,"patch":[[{"diffs":[[0," < 500; "],[-1,"i"],[1,"uniqueProps"],[0,"++) {\r\n "]],"start1":7732,"start2":7732,"length1":17,"length2":27}]],"length":8212,"saved":false}
{"ts":1344791959558,"patch":[[{"diffs":[[0,"rLeft = "],[-1,"i"],[1,"uniqueProps"],[0," * 2;\r\n "]],"start1":7875,"start2":7875,"length1":17,"length2":27}]],"length":8222,"saved":false}
{"ts":1344791963614,"patch":[[{"diffs":[[0,"sDiv' + "],[-1,"i"],[1,"uniqueProps"],[0," + '\">a<"]],"start1":7953,"start2":7953,"length1":17,"length2":27}]],"length":8232,"saved":false}
{"ts":1344791965596,"patch":[[{"diffs":[[0,"w Error("],[-1,"i"],[1,"uniqueProps"],[0,");\r\n    "]],"start1":8051,"start2":8051,"length1":17,"length2":27}]],"length":8242,"saved":false}
{"ts":1344791968887,"patch":[[{"diffs":[[0,"s.div = "],[-1,"i"],[1,"uniqueProps"],[0,";\r\n     "]],"start1":8108,"start2":8108,"length1":17,"length2":27}]],"length":8252,"saved":false}
{"ts":1344792023805,"patch":[[{"diffs":[[0," < 5"],[-1,"00"],[0,"; un"]],"start1":7732,"start2":7732,"length1":10,"length2":8}]],"length":8207,"saved":false}
{"ts":1344792100037,"patch":[[{"diffs":[[0,"= $("],[-1,"'<div id=\"jsDiv' + uniqueProps + '\">a</div>');"],[0,"\r\n  "]],"start1":7936,"start2":7936,"length1":54,"length2":8}]],"length":8161,"saved":false}
{"ts":1344792102065,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"            var newDiv = $(\r\n"],[0,"    "]],"start1":7909,"start2":7909,"length1":37,"length2":8}]],"length":8132,"saved":false}
{"ts":1344792103407,"patch":[[{"diffs":[[0,"    "],[-1,"newDiv"],[0,".app"]],"start1":7921,"start2":7921,"length1":14,"length2":8}]],"length":8126,"saved":false}
{"ts":1344792104031,"patch":[[{"diffs":[[0,"        "],[1,"$()"],[0,".appendT"]],"start1":7917,"start2":7917,"length1":16,"length2":19}]],"length":8129,"saved":false}
{"ts":1344792105763,"patch":[[{"diffs":[[0,"      $("],[1,"'body'"],[0,").append"]],"start1":7919,"start2":7919,"length1":16,"length2":22}]],"length":8135,"saved":false}
{"ts":1344792107806,"patch":[[{"diffs":[[0,").append"],[-1,"To"],[0,"($('body"]],"start1":7933,"start2":7933,"length1":18,"length2":16}]],"length":8133,"saved":false}
{"ts":1344792112892,"patch":[[{"diffs":[[0,".append("],[-1,"$('body')"],[1,"'<div id=\"jsDiv' + uniqueProps + '\">a</div>'"],[0,");\r\n    "]],"start1":7934,"start2":7934,"length1":25,"length2":60}]],"length":8168,"saved":false}
{"contributors":[],"silentsave":true,"ts":1344812004648,"patch":[[{"diffs":[[0,"}\r\n}\r\n\r\n"],[1,"$(function() {\r\n    "],[0,"var enti"]],"start1":6168,"start2":6168,"length1":16,"length2":36},{"diffs":[[0,"ystem(32);\r\n"],[-1,"\r\n"],[1,"    \r\n    "],[0,"entitySystem"]],"start1":6228,"start2":6228,"length1":26,"length2":34},{"diffs":[[0,"nent',\r\n"],[1,"    "],[0,"    new "]],"start1":6291,"start2":6291,"length1":16,"length2":20},{"diffs":[[0,"        "],[1,"    "],[0,"//assign"]],"start1":6380,"start2":6380,"length1":16,"length2":20},{"diffs":[[0,"signed\r\n    "],[1,"   "],[1," "],[0,"\t\t\t\t},\r\n"],[1,"    "],[0,"        \t\t\tf"]],"start1":6396,"start2":6396,"length1":32,"length2":40},{"diffs":[[0,"            "],[1,"    "],[0,"//removed\r\n "]],"start1":6477,"start2":6477,"length1":24,"length2":28},{"diffs":[[0,"emoved\r\n    "],[1,"   "],[1," "],[0,"\t\t\t\t},\r\n"],[1,"    "],[0,"        \t\t\tf"]],"start1":6496,"start2":6496,"length1":32,"length2":40},{"diffs":[[0,"        "],[1,"    "],[0,"//update"]],"start1":6581,"start2":6581,"length1":16,"length2":20},{"diffs":[[0,"update\r\n"],[1,"    "],[0,"        "]],"start1":6595,"start2":6595,"length1":16,"length2":20},{"diffs":[[0,"                "],[1,"    "],[0,"entity.counter ="]],"start1":6689,"start2":6689,"length1":32,"length2":36},{"diffs":[[0,"                "],[-1,"}\r\n"],[1,"    }\r\n    "],[0,"                "]],"start1":6738,"start2":6738,"length1":35,"length2":43},{"diffs":[[0,"        "],[1,"    "],[0,"//$('#mo"]],"start1":6824,"start2":6824,"length1":16,"length2":20},{"diffs":[[0,"                "],[-1,"\r\n"],[1,"    \r\n    "],[0,"                "]],"start1":6910,"start2":6910,"length1":34,"length2":42},{"diffs":[[0,"            "],[1," "],[1,"   "],[0,"var div = $("]],"start1":6974,"start2":6974,"length1":24,"length2":28},{"diffs":[[0,"atas.div);\r\n"],[1,"    "],[0,"            "]],"start1":7021,"start2":7021,"length1":24,"length2":28},{"diffs":[[0,"        "],[1,"    "],[0,"//A -> B"]],"start1":7107,"start2":7107,"length1":16,"length2":20},{"diffs":[[0,"                "],[1," "],[1,"   "],[0,"var currentPos ="]],"start1":7146,"start2":7146,"length1":32,"length2":36},{"diffs":[[0,"vPos.top);\r\n"],[1,"    "],[0,"            "]],"start1":7205,"start2":7205,"length1":24,"length2":28},{"diffs":[[0,"                "],[-1,"\r\n"],[1,"    \r\n  "],[0,"                "]],"start1":7364,"start2":7364,"length1":34,"length2":40},{"diffs":[[0,"        "],[1,"  "],[0,"toMouse "]],"start1":7404,"start2":7404,"length1":16,"length2":18},{"diffs":[[0,"                "],[1,"    div.css('position', 'absolute');"],[0,"\r\n              "]],"start1":7458,"start2":7458,"length1":32,"length2":68},{"diffs":[[0,"                "],[1,"    "],[0,"div.css('marginL"]],"start1":7520,"start2":7520,"length1":32,"length2":36},{"diffs":[[0,"ss('"],[-1,"marginLef"],[1,"righ"],[0,"t', "]],"start1":7545,"start2":7545,"length1":17,"length2":12},{"diffs":[[0,"                "],[1,"    "],[0,"div.css('marginT"]],"start1":7578,"start2":7578,"length1":32,"length2":36},{"diffs":[[0,"ss('"],[-1,"marginT"],[1,"t"],[0,"op',"]],"start1":7603,"start2":7603,"length1":15,"length2":9},{"diffs":[[0,"    "],[-1,"\r\n"],[1,"    \r\n  "],[0,"    "],[1,"  "],[0,"\t\t\t\t},\r\n"],[1,"    "],[0,"    "]],"start1":7646,"start2":7646,"length1":22,"length2":34},{"diffs":[[0,"            "],[1," "],[1,"   "],[0,"//render\r\n  "]],"start1":7729,"start2":7729,"length1":24,"length2":28},{"diffs":[[0,"render\r\n"],[1,"    "],[0,"        "]],"start1":7747,"start2":7747,"length1":16,"length2":20},{"diffs":[[0,"        "],[1,"    "],[0,"\t[],\r\n  "]],"start1":7779,"start2":7779,"length1":16,"length2":20},{"diffs":[[0,"    "],[1," "],[1,"   "],[0,"[]);\r\n"],[-1,"\r\n"],[1,"    \r\n    "],[0,"(fun"]],"start1":7809,"start2":7809,"length1":16,"length2":28},{"diffs":[[0,"    "],[1,"  "],[1,"  "],[0,"var "],[-1,"uniqueProps"],[1,"i"],[0," = 0"]],"start1":7848,"start2":7848,"length1":23,"length2":17},{"diffs":[[0,"    "],[1," "],[-1,"\r\n    for (uniqueProps = 0; uniqueProps < 5; uniqueProps"],[1,"   \r\n        for (i = 0; i < 10; i"],[0,"++) {\r\n"],[1,"    "],[0,"    "]],"start1":7868,"start2":7868,"length1":71,"length2":54},{"diffs":[[0," (function() {\r\n"],[1,"    "],[0,"            var "]],"start1":7925,"start2":7925,"length1":32,"length2":36},{"diffs":[[0,"  \r\n            "],[1,"  "],[1,"  "],[0,"ent.Datas.distan"]],"start1":7997,"start2":7997,"length1":32,"length2":36},{"diffs":[[0,"t = "],[-1,"uniqueProps * 2"],[1,"(i + 1) * 2 / 10"],[0,";\r\n "]],"start1":8047,"start2":8047,"length1":23,"length2":24},{"diffs":[[0,"0;\r\n            "],[1,"  "],[-1,"\r\n"],[1,"  \r\n    "],[0,"            $('b"]],"start1":8066,"start2":8066,"length1":34,"length2":42},{"diffs":[[0,".append("],[1,"$("],[0,"'<div id"]],"start1":8113,"start2":8113,"length1":16,"length2":18},{"diffs":[[0,"sDiv' + "],[-1,"uniqueProps"],[1,"i"],[0," + '\">a<"]],"start1":8134,"start2":8134,"length1":27,"length2":17},{"diffs":[[0,"</div>')"],[1,")"],[0,";\r\n     "]],"start1":8150,"start2":8150,"length1":16,"length2":17},{"diffs":[[0,"    "],[1," "],[-1,"throw new Error(uniqueProps);"],[1,"   "],[0,"\r\n  "]],"start1":8170,"start2":8170,"length1":37,"length2":12},{"diffs":[[0,"            "],[-1,"\r\n        "],[0,"    ent.Data"]],"start1":8180,"start2":8180,"length1":34,"length2":24},{"diffs":[[0,"v = "],[-1,"uniqueProps"],[1,"i"],[0,";\r\n "]],"start1":8208,"start2":8208,"length1":19,"length2":9},{"diffs":[[0,"i;\r\n            "],[-1,"\r\n"],[1,"    \r\n    "],[0,"            ent."]],"start1":8212,"start2":8212,"length1":34,"length2":42},{"diffs":[[0,"        "],[1,"    "],[0,"})();\r\n "]],"start1":8286,"start2":8286,"length1":16,"length2":20},{"diffs":[[0,"    "],[1,"   "],[1," "],[0,"}\r\n"],[1,"    "],[0,"})();\r\n"],[-1,"\r\n"],[1,"    \r\n    "],[0,"enti"]],"start1":8305,"start2":8305,"length1":20,"length2":36},{"diffs":[[0,"StartUpdating();"],[1,"\r\n});"]],"start1":8350,"start2":8350,"length1":16,"length2":21}]],"length":8371,"saved":false}
{"ts":1344812031314,"patch":[[{"diffs":[[0,"tem("],[-1,"3"],[1,"6"],[0,"2);\r"]],"start1":6230,"start2":6230,"length1":9,"length2":9}]],"length":8371,"saved":false}
{"ts":1344812032189,"patch":[[{"diffs":[[0,"System(6"],[-1,"2"],[1,"4"],[0,");\r\n    "]],"start1":6227,"start2":6227,"length1":17,"length2":17}]],"length":8371,"saved":false}
{"ts":1344812072000,"patch":[[{"diffs":[[0,"tem("],[-1,"64"],[0,");\r\n"]],"start1":6230,"start2":6230,"length1":10,"length2":8}]],"length":8369,"saved":false}
{"ts":1344812073289,"patch":[[{"diffs":[[0,"ySystem("],[1,"1000"],[0,");\r\n    "]],"start1":6226,"start2":6226,"length1":16,"length2":20}]],"length":8373,"saved":false}
{"ts":1344812089723,"patch":[[{"diffs":[[0,"pperLeft"],[1," "],[0,");\r\n    "]],"start1":7346,"start2":7346,"length1":16,"length2":17}]],"length":8374,"saved":false}
{"ts":1344812091332,"patch":[[{"diffs":[[0,"pperLeft"],[1," *"],[0," );\r\n   "]],"start1":7346,"start2":7346,"length1":16,"length2":18}]],"length":8376,"saved":false}
{"ts":1344812093814,"patch":[[{"diffs":[[0,"rLeft * "],[1,"gameTime"],[0,");\r\n    "]],"start1":7349,"start2":7349,"length1":16,"length2":24}]],"length":8384,"saved":false}
{"ts":1344812096969,"patch":[[{"diffs":[[0,"rLeft * "],[1,"1000"],[0,"gameTime"]],"start1":7349,"start2":7349,"length1":16,"length2":20}]],"length":8388,"saved":false}
{"ts":1344812098320,"patch":[[{"diffs":[[0,"t * 1000"],[1," / "],[0,"gameTime"]],"start1":7353,"start2":7353,"length1":16,"length2":19}]],"length":8391,"saved":false}
{"ts":1344812101440,"patch":[[{"diffs":[[0," 1000 / "],[-1,"gameTime"],[0,");\r\n    "]],"start1":7356,"start2":7356,"length1":24,"length2":16}]],"length":8383,"saved":false}
{"ts":1344812104707,"patch":[[{"diffs":[[0,"t * "],[1,"gameTime"],[0,"1000"],[-1," / "],[0,");\r\n"]],"start1":7353,"start2":7353,"length1":15,"length2":20}]],"length":8388,"saved":false}
{"ts":1344812105333,"patch":[[{"diffs":[[0,"gameTime"],[1," "],[0,"1000);\r\n"]],"start1":7357,"start2":7357,"length1":16,"length2":17}]],"length":8389,"saved":false}
{"ts":1344812108228,"patch":[[{"diffs":[[0,"ameTime "],[1,"&"],[0,"1000);\r\n"]],"start1":7358,"start2":7358,"length1":16,"length2":17}]],"length":8390,"saved":false}
{"ts":1344812108881,"patch":[[{"diffs":[[0,"meTime &"],[1," "],[0,"1000);\r\n"]],"start1":7359,"start2":7359,"length1":16,"length2":17}]],"length":8391,"saved":false}
{"ts":1344812110089,"patch":[[{"diffs":[[0,"ameTime "],[-1,"&"],[1,"*"],[0," 1000);\r"]],"start1":7358,"start2":7358,"length1":17,"length2":17}]],"length":8391,"saved":false}
{"ts":1344812130969,"patch":[[{"diffs":[[0,"System(1"],[-1,"000"],[1,"6"],[0,");\r\n    "]],"start1":6227,"start2":6227,"length1":19,"length2":17}]],"length":8389,"saved":false}
{"ts":1344812168148,"patch":[[{"diffs":[[0,"        "],[1,"//"],[0,"toMouse "]],"start1":7424,"start2":7424,"length1":16,"length2":18}]],"length":8391,"saved":false}
{"ts":1344812177623,"patch":[[{"diffs":[[0,"tem("],[-1,"16"],[1,"32"],[0,");\r\n"]],"start1":6230,"start2":6230,"length1":10,"length2":10}]],"length":8391,"saved":false}
{"ts":1344812350748,"patch":[[{"diffs":[[0,"ameTime "],[-1,"*"],[1,"/"],[0," 1000);\r"]],"start1":7356,"start2":7356,"length1":17,"length2":17}]],"length":8391,"saved":false}
{"ts":1344812352676,"patch":[[{"diffs":[[0,"rLeft * "],[1,"()"],[0,"gameTime"]],"start1":7347,"start2":7347,"length1":16,"length2":18}]],"length":8393,"saved":false}
{"ts":1344812356041,"patch":[[{"diffs":[[0," / 1000)"],[1,")"],[0,";\r\n     "]],"start1":7365,"start2":7365,"length1":16,"length2":17}]],"length":8394,"saved":false}
{"ts":1344812356977,"patch":[[{"diffs":[[0,"Left * ("],[-1,")"],[0,"gameTime"]],"start1":7348,"start2":7348,"length1":17,"length2":16}]],"length":8393,"saved":false}
{"ts":1344812473036,"patch":[[{"diffs":[[0,"vPos.top);\r\n"],[1,"                            \r\n"],[0,"            "]],"start1":7205,"start2":7205,"length1":24,"length2":54}]],"length":8423,"saved":false}
{"contributors":[],"silentsave":true,"ts":1344831067555,"patch":[[{"diffs":[[1,"/*\r\n  A simple entity system with an entity centric component / data model.\r\n  \r\n  TODO: \r\n    -Need to find a dependency injection system for components.\r\n    -Need to think through data factories, probably should something like:\r\n        JSEntitySystem.Datas holds a collection of primitive values, object values or functions.\r\n        When a Component gets added, the system should look at the Datas collection for the value it should provide.\r\n        If the system sees the Datas[\"requestedData\"] in question is a primitive or object, it simply copies that in.\r\n        If the system sees the Datas[\"requestedData\"] in question is a function however, it should call that function.\r\n        This adds the edge case of having to get around the need to put a function into Datas[\"requestedData\"],\r\n        this however can be surpassed by wrapping the function you would like in the Datas collection in another function:\r\n            Datas[\"requestedData\"] = function() { return function() { return \"ouch, syntax heavy :(\"; }};\r\n        I could make a factory function to act as a wrapper:\r\n            Datas[\"requestedData\"] = engine.DataFunction(function() { return \"slightly better? I don't know really.\" });\r\n            This could then be checked against \r\n*/\r\nfunction JSEntitySystem(updateIntervalMilliseconds) {\r\n    /*\r\n      This is the next free Id ready to be assigned to an entity.\r\n    */\r\n    this.NextFreeId = 0;\r\n    \r\n    /*\r\n      The interval to use for the setInterval function.\r\n    */\r\n    this.UpdateIntervalMilliseconds = updateIntervalMilliseconds;\r\n    \r\n    /*\r\n      The variable used to hold the scope of the JSEntitySystem function.\r\n    */\r\n    var engine = this;\r\n    \r\n    this.MousePos = new V2();\r\n    \r\n    /*\r\n      The jQuery callback used for the mouse movement callback and grab the latest mouse coordinates.\r\n    */\r\n    $(document).ready(function() {\r\n       $(document).mousemove(function(e) {\r\n          engine.MousePos.X = e.pageX;\r\n          engine.MousePos.Y = e.pageY;\r\n       })}); \r\n    \r\n    /*\r\n    The component metadata collection.\r\n    keyed on the componentName, toLowered\r\n    Component[\"name\"] =    {\r\n        ComponentName : \"name\",\r\n    \tMethods : {\r\n    \t\tAssigned : method,\r\n    \t\tRemoved : method,\r\n    \t\tUpdate : method,\r\n    \t\tRender : method\r\n    \t},\r\n    \tRequiredComponents : array of strings,\r\n    \tRequiredData : array of data names\r\n    }\r\n    */\r\n    this.Components = { };\r\n    \r\n    /*\r\n      Datas is a map for holding data.\r\n    */\r\n    this.Datas = { };\r\n    \r\n    /*\r\n      Entities is a map for holding entities.\r\n    */\r\n    this.Entities = { };\r\n    \r\n    /*\r\n      EntityUpdateList is an array used to update the entities for the engine.\r\n    */    \r\n    this.EntityUpdateList = [];\r\n    \r\n    /*\r\n      The factory for the Component methods.\r\n    */\r\n    this.Component = function(assigned, removed, update, render) {\r\n    \tthis.Assigned = assigned;\r\n    \tthis.Removed = removed;\r\n    \tthis.Update = update;\r\n    \tthis.Render = render;\r\n    }\r\n    \r\n    /*\r\n      Registers a Component by name in the Components map.\r\n    */\r\n    this.RegisterComponent = function(componentName, component, requiredComponents, requiredData) {\r\n    \tengine.Components[componentName] = {\r\n    \t\tComponentName : componentName,\r\n    \t\tMethods : component,\r\n    \t\tRequiredComponents : requiredComponents,\r\n    \t\tRequiredData : requiredData\r\n    \t};\r\n    }\r\n    \r\n    /*\r\n      Adds a component to the entity passed in.\r\n    */\r\n    this.AddComponentWithRequirements = function(entity, componentName) {\r\n    \tvar component = engine.Components[componentName];\r\n    \tvar requiredData = component.RequiredData;\r\n    \tvar requiredComponents = component.RequiredComponents;\r\n    \t\r\n    \tif (!(componentName in entity.Components)) {\r\n    \t\tentity.Components[componentName] = engine.Components[componentName];\r\n    \t\tentity.UpdateComponents.push(engine.Components[componentName]);\r\n    \t}\r\n    \t\r\n    \tfor (var key in component.RequiredComponents) {\r\n    \t\tif (typeof key === 'String' && !(key in entity.Components)) {\r\n    \t\t\tengine.AddComponentWithRequirements(entity, key);\r\n    \t\t}\r\n    \t}\r\n    \t\r\n    \tfor (var key in component.RequiredData) {\r\n    \t\tif (typeof key === 'String' && !(key in entity.Datas)) {\r\n    \t\t\tentity.Datas[key] = component.RequiredData[key];\r\n    \t\t}\r\n    \t}\r\n    }\r\n    \r\n    /*\r\n      The Entity factory method used by the engine to make new entities.\r\n    */\r\n    this.Entity = function(idToUse) {\r\n        var self = this;\r\n        \r\n        if (typeof idToUse == 'number') {\r\n            if (engine.Entities.Any(function(ent) { ent.Id == idToUse })) {\r\n                throw new Error(\"Tried to create an entity with an explicity Id that already existed! Entity in question: \" + idToUse);\r\n                return;\r\n            }\r\n            \r\n            this.Id = idToUse;\r\n        } else {\r\n            engine.NextFreeId = engine.NextFreeId + 1;\r\n            this.Id = engine.NextFreeId;    \r\n        }\r\n        \r\n    \tthis.Datas = {\r\n    \t};\r\n    \tthis.Components = {\r\n    \t};\r\n        \r\n    \tthis.UpdateComponents = [];\r\n    \t\r\n        //Adds a component and any dependencies.\r\n        this.AddComponent = function(componentName) {\r\n    \t\tif (!(componentName in self.Components)) {\r\n    \t\t\t//recursively add components here.\r\n    \t\t\t//make sure to add each components required data here as well.\r\n    \t\t\tengine.AddComponentWithRequirements(self, componentName);\r\n    \t\t}\r\n    \t};\r\n        \r\n        this.RemoveComponent = function(componentName) {\r\n            if (componentName in self.Components) {\r\n                self.Components[componentName].Methods.RemoveComponent(self, engine.LastUpdateTime);\r\n                delete self.Components[componentName];\r\n            }\r\n        };\r\n    \t\r\n    \tthis.Update = function(gameTime) {\r\n    \t\tvar i = 0;\r\n    \t\tfor (i = 0; i < self.UpdateComponents.length; i++) {\r\n    \t\t\tself.UpdateComponents[i].Methods.Update(self, gameTime);\r\n    \t\t}\r\n    \t};\r\n    \t\r\n    \tengine.Entities[this.Id] = this;\r\n        engine.EntityUpdateList.push(this);\r\n    }\r\n    \r\n    this.CreateEntity = function(idToUse) {\r\n        return new engine.Entity(idToUse);\r\n    }\r\n    \r\n    this.RemoveEntity = function(entityId) {\r\n        var entityToRemove = engine.Entities[entityId];\r\n        \r\n        if (entityToRemove === null) {\r\n            return;\r\n        }\r\n        \r\n        var indexOfEntity = engine.EntityUpdateList.indexOf(entityToRemove);\r\n        \r\n        if (indexOfEntity !== -1) {\r\n            engine.EntityUpdateList.splice(indexOfEntity, 1);\r\n        }\r\n        \r\n        delete engine.Entities[entityId];\r\n    }\r\n    \r\n    this.Update = function(gameTime) {\r\n        var i = 0;\r\n        for(i = 0; i < engine.EntityUpdateList.length; i++) {\r\n            engine.EntityUpdateList[i].Update(gameTime);\r\n        }\r\n    }\r\n    \r\n    this.GameStart = (new Date()).getMilliseconds();\r\n    this.LastUpdateTime = this.GameStart;\r\n    \r\n    this.IntervalUpdateFunc = function() {\r\n        var currentTime = (new Date()).getMilliseconds();\r\n        \r\n        engine.Update(currentTime - engine.LastUpdateTime);\r\n        \r\n        engine.LastUpdateTime = currentTime;\r\n    }\r\n    \r\n    this.StartUpdating = function() {\r\n        engine.StopUpdating();\r\n        \r\n        engine.UpdateIntervalKey = setInterval(engine.IntervalUpdateFunc, engine.UpdateIntervalMilliseconds);\r\n    }\r\n    \r\n    this.StopUpdating = function() {\r\n        if (typeof engine.UpdateIntervalKey !== 'undefined') {\r\n            clearInterval(engine.UpdateIntervalKey);\r\n            delete engine.UpdateIntervalKey;\r\n        }\r\n    }\r\n}\r\n\r\n$(function() {\r\n    var entitySystem = new JSEntitySystem(32);\r\n    \r\n    //TODO: This 'TestComponent' should be reworked into a 'FollowMouse' component that takes an element reference in its Datas.\r\n    entitySystem.RegisterComponent('TestComponent',\r\n        new entitySystem.Component(function(entity, gameTime) {\r\n                            //assigned\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //removed\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //update\r\n                            if (typeof entity.counter === 'undefined') {\r\n                                entity.counter = 0;\r\n                            }\r\n                            \r\n                            entity.counter++;\r\n                            \r\n                            var div = $('#jsDiv' + entity.Datas.div);\r\n                            var divPos = div.position();\r\n                            \r\n                            //A -> B :: B - A\r\n                            var currentPos = new V2(divPos.left, divPos.top);\r\n                            \r\n                            var toMouse = entitySystem.MousePos\r\n                                                      .Sub(currentPos)\r\n                                                      .Normalize()\r\n                                                      .Multiply(entity.Datas.distanceFromUpperLeft);\r\n                            \r\n                            toMouse = toMouse.Add(currentPos);\r\n                            div.css('left', toMouse.X);\r\n                            div.css('top', toMouse.Y);\r\n                            \r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //render\r\n            \t\t\t}),\r\n                \t[],\r\n                    []);\r\n    \r\n    (function() {\r\n        var i = 0;\r\n        \r\n        for (i = 0; i < 100; i++) {\r\n            (function() {\r\n                var ent = entitySystem.CreateEntity();    \r\n                ent.Datas.distanceFromUpperLeft = (i + 1) / 10;\r\n                \r\n                $('body').append($('<div id=\"jsDiv' + i + '\">a</div>'));\r\n                \r\n                $('#jsDiv' + i).css('position', 'absolute');\r\n                ent.Datas.div = i;\r\n                \r\n                ent.AddComponent('TestComponent');\r\n            })();\r\n        }\r\n    })();\r\n    \r\n    entitySystem.StartUpdating();\r\n});"]],"start1":0,"start2":0,"length1":0,"length2":10092}]],"length":10092,"saved":false}
{"contributors":[],"silentsave":true,"ts":1344831072639,"patch":[[{"diffs":[[0,"against "],[1,"by looking at the "],[0,"\r\n*/\r\nfu"]],"start1":1254,"start2":1254,"length1":16,"length2":34},{"diffs":[[0,"\n});"],[-1,"function JSEntitySystem(updateIntervalMilliseconds) {\r\n    /*\r\n      This is the next free Id ready to be assigned to an entity.\r\n    */\r\n    this.NextFreeId = 0;\r\n    \r\n    /*\r\n      The interval to use for the setInterval function.\r\n    */\r\n    this.UpdateIntervalMilliseconds = updateIntervalMilliseconds;\r\n    \r\n    /*\r\n      The variable used to hold the scope of the JSEntitySystem function.\r\n    */\r\n    var engine = this;\r\n    \r\n    this.MousePos = new V2();\r\n    \r\n    /*\r\n      The jQuery callback used for the mouse movement callback and grab the latest mouse coordinates.\r\n    */\r\n    $(document).ready(function() {\r\n       $(document).mousemove(function(e) {\r\n          engine.MousePos.X = e.pageX;\r\n          engine.MousePos.Y = e.pageY;\r\n       })}); \r\n    \r\n    /*\r\n    The component metadata collection.\r\n    keyed on the componentName, toLowered\r\n    Component[\"name\"] =    {\r\n        ComponentName : \"name\",\r\n    \tMethods : {\r\n    \t\tAssigned : method,\r\n    \t\tRemoved : method,\r\n    \t\tUpdate : method,\r\n    \t\tRender : method\r\n    \t},\r\n    \tRequiredComponents : array of strings,\r\n    \tRequiredData : array of data names\r\n    }\r\n    */\r\n    this.Components = { };\r\n    \r\n    /*\r\n      Datas is a map for holding data.\r\n    */\r\n    this.Datas = { };\r\n    \r\n    /*\r\n      Entities is a map for holding entities.\r\n    */\r\n    this.Entities = { };\r\n    \r\n    /*\r\n      EntityUpdateList is an array used to update the entities for the engine.\r\n    */    \r\n    this.EntityUpdateList = [];\r\n    \r\n    /*\r\n      The factory for the Component methods.\r\n    */\r\n    this.Component = function(assigned, removed, update, render) {\r\n    \tthis.Assigned = assigned;\r\n    \tthis.Removed = removed;\r\n    \tthis.Update = update;\r\n    \tthis.Render = render;\r\n    }\r\n    \r\n    /*\r\n      Registers a Component by name in the Components map.\r\n    */\r\n    this.RegisterComponent = function(componentName, component, requiredComponents, requiredData) {\r\n    \tengine.Components[componentName] = {\r\n    \t\tComponentName : componentName,\r\n    \t\tMethods : component,\r\n    \t\tRequiredComponents : requiredComponents,\r\n    \t\tRequiredData : requiredData\r\n    \t};\r\n    }\r\n    \r\n    /*\r\n      Adds a component to the entity passed in.\r\n    */\r\n    this.AddComponentWithRequirements = function(entity, componentName) {\r\n    \tvar component = engine.Components[componentName];\r\n    \tvar requiredData = component.RequiredData;\r\n    \tvar requiredComponents = component.RequiredComponents;\r\n    \t\r\n    \tif (!(componentName in entity.Components)) {\r\n    \t\tentity.Components[componentName] = engine.Components[componentName];\r\n    \t\tentity.UpdateComponents.push(engine.Components[componentName]);\r\n    \t}\r\n    \t\r\n    \tfor (var key in component.RequiredComponents) {\r\n    \t\tif (typeof key === 'String' && !(key in entity.Components)) {\r\n    \t\t\tengine.AddComponentWithRequirements(entity, key);\r\n    \t\t}\r\n    \t}\r\n    \t\r\n    \tfor (var key in component.RequiredData) {\r\n    \t\tif (typeof key === 'String' && !(key in entity.Datas)) {\r\n    \t\t\tentity.Datas[key] = component.RequiredData[key];\r\n    \t\t}\r\n    \t}\r\n    }\r\n    \r\n    //May have to make a CreateEntity function.\r\n    this.Entity = function(idToUse) {\r\n        var self = this;\r\n        \r\n        if (typeof idToUse == 'number') {\r\n            if (engine.Entities.Any(function(ent) { ent.Id == idToUse })) {\r\n                throw new Error(\"Tried to create an entity with an explicity Id that already existed! Entity in question: \" + idToUse);\r\n                return;\r\n            }\r\n            \r\n            this.Id = idToUse;\r\n        } else {\r\n            engine.NextFreeId = engine.NextFreeId + 1;\r\n            this.Id = engine.NextFreeId;    \r\n        }\r\n        \r\n    \tthis.Datas = {\r\n    \t};\r\n    \tthis.Components = {\r\n    \t};\r\n        \r\n    \tthis.UpdateComponents = [];\r\n    \t\r\n        this.AddComponent = function(componentName) {\r\n    \t\tif (!(componentName in this.Components)) {\r\n    \t\t\t//recursively add components here.\r\n    \t\t\t//make sure to add each components required data here as well.\r\n    \t\t\tengine.AddComponentWithRequirements(this, componentName);\r\n    \t\t}\r\n    \t};\r\n        \r\n        this.RemoveComponent = function(componentName) {\r\n            if (componentName in this.Components) {\r\n                delete this.Components[componentName];\r\n            }\r\n        };\r\n    \t\r\n    \tthis.Update = function(gameTime) {\r\n    \t\tvar i = 0;\r\n    \t\tfor (i = 0; i < this.UpdateComponents.length; i++) {\r\n    \t\t\tthis.UpdateComponents[i].Methods.Update(self, gameTime);\r\n    \t\t}\r\n    \t};\r\n    \t\r\n    \tengine.Entities[this.Id] = this;\r\n        engine.EntityUpdateList.push(this);\r\n    }\r\n    \r\n    this.CreateEntity = function(idToUse) {\r\n        return new engine.Entity(idToUse);\r\n    }\r\n    \r\n    this.RemoveEntity = function(entityId) {\r\n        var entityToRemove = engine.Entities[entityId];\r\n        \r\n        if (entityToRemove === null) {\r\n            return;\r\n        }\r\n        \r\n        var indexOfEntity = engine.EntityUpdateList.indexOf(entityToRemove);\r\n        \r\n        if (indexOfEntity !== -1) {\r\n            engine.EntityUpdateList.splice(indexOfEntity, 1);\r\n        }\r\n        \r\n        delete engine.Entities[entityId];\r\n    }\r\n    \r\n    this.Update = function(gameTime) {\r\n        var i = 0;\r\n        for(i = 0; i < engine.EntityUpdateList.length; i++) {\r\n            engine.EntityUpdateList[i].Update(gameTime);\r\n        }\r\n    }\r\n    \r\n    this.GameStart = (new Date()).getMilliseconds();\r\n    this.LastUpdateTime = this.GameStart;\r\n    \r\n    this.IntervalUpdateFunc = function() {\r\n        var currentTime = (new Date()).getMilliseconds();\r\n        \r\n        engine.Update(currentTime - engine.LastUpdateTime);\r\n        \r\n        engine.LastUpdateTime = currentTime;\r\n    }\r\n    \r\n    this.StartUpdating = function() {\r\n        engine.StopUpdating();\r\n        \r\n        engine.UpdateIntervalKey = setInterval(engine.IntervalUpdateFunc, engine.UpdateIntervalMilliseconds);\r\n    }\r\n    \r\n    this.StopUpdating = function() {\r\n        if (typeof engine.UpdateIntervalKey !== 'undefined') {\r\n            clearInterval(engine.UpdateIntervalKey);\r\n            delete engine.UpdateIntervalKey;\r\n        }\r\n    }\r\n}\r\n\r\n$(function() {\r\n    var entitySystem = new JSEntitySystem(32);\r\n    \r\n    entitySystem.RegisterComponent('TestComponent',\r\n        new entitySystem.Component(function(entity, gameTime) {\r\n                            //assigned\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //removed\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //update\r\n                            if (typeof entity.counter === 'undefined') {\r\n                                entity.counter = 0;\r\n                            }\r\n                            entity.counter++;\r\n                            //$('#moveThisWithMouse').html(gameTime + \" \" + entity.counter);\r\n                            \r\n                            \r\n                            var div = $('#jsDiv' + entity.Datas.div);\r\n                            var divPos = div.position();\r\n                            //A -> B :: B - A\r\n                            var currentPos = new V2(divPos.left, divPos.top);\r\n                            \r\n                            var toMouse = entitySystem.MousePos.Sub(currentPos).Normalize().Multiply(entity.Datas.distanceFromUpperLeft * (gameTime / 1000));\r\n                            \r\n                            //toMouse = toMouse.Add(currentPos);\r\n                            div.css('position', 'absolute');\r\n                            div.css('right', toMouse.X);\r\n                            div.css('top', toMouse.Y);\r\n                            \r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //render\r\n            \t\t\t}),\r\n                \t[],\r\n                    []);\r\n    \r\n    (function() {\r\n        var i = 0;\r\n        \r\n        for (i = 0; i < 10; i++) {\r\n            (function() {\r\n                var ent = entitySystem.CreateEntity();    \r\n                ent.Datas.distanceFromUpperLeft = (i + 1) * 2 / 10;\r\n                \r\n                $('body').append($('<div id=\"jsDiv' + i + '\">a</div>'));\r\n                \r\n                ent.Datas.div = i;\r\n                \r\n                ent.AddComponent('TestComponent');\r\n            })();\r\n        }\r\n    })();\r\n    \r\n    entitySystem.StartUpdating();\r\n});"]],"start1":10106,"start2":10106,"length1":8427,"length2":4}]],"length":10110,"saved":false}
{"contributors":[],"silentsave":true,"ts":1344869613400,"patch":[[{"diffs":[[0,");\r\n        "],[-1,"    "],[0,"This could t"]],"start1":1211,"start2":1211,"length1":28,"length2":24},{"diffs":[[0,"t by"],[-1," looking at the "],[1,":\r\n            var isDataFunction = (Datas[\"requestedData\"].constructor === JSEntitySystem.DataFunction);\r\n        Then retrieved:\r\n            return Datas[\"requestedData\"].wrappedFunction;"],[0,"\r\n*/"]],"start1":1256,"start2":1256,"length1":24,"length2":198},{"diffs":[[0," 0; i < "],[-1,"10"],[1,"25"],[0,"0; i++) "]],"start1":9744,"start2":9744,"length1":18,"length2":18},{"diffs":[[0,"+ 1)"],[-1," / 10"],[0,";\r\n "]],"start1":9905,"start2":9905,"length1":13,"length2":8}]],"length":10275,"saved":false}
{"ts":1344869641863,"patch":[[{"diffs":[[0," (i + 1)"],[1," "],[0,";\r\n     "]],"start1":9901,"start2":9901,"length1":16,"length2":17}]],"length":10276,"saved":false}
{"ts":1344869642920,"patch":[[{"diffs":[[0,"(i + 1) "],[1,"/ 5"],[0,";\r\n     "]],"start1":9902,"start2":9902,"length1":16,"length2":19}]],"length":10279,"saved":false}
{"ts":1344869647113,"patch":[[{"diffs":[[0,"tem("],[-1,"3"],[1,"6"],[0,"2);\r"]],"start1":7879,"start2":7879,"length1":9,"length2":9}]],"length":10279,"saved":false}
{"ts":1344869661825,"patch":[[{"diffs":[[0,"i < "],[-1,"25"],[1,"10"],[0,"0; i"]],"start1":9748,"start2":9748,"length1":10,"length2":10}]],"length":10279,"saved":false}
{"ts":1344869666298,"patch":[[{"diffs":[[0," i + '\">"],[-1,"a"],[0,"</div>')"]],"start1":9987,"start2":9987,"length1":17,"length2":16}]],"length":10278,"saved":false}
{"ts":1344869668363,"patch":[[{"diffs":[[0," i + '\">"],[1,"hey guy"],[0,"</div>')"]],"start1":9987,"start2":9987,"length1":16,"length2":23}]],"length":10285,"saved":false}
{"contributors":[],"silentsave":true,"ts":1344903194795,"patch":[[{"diffs":[[1,"/*\r\n  A simple entity system with an entity centric component / data model.\r\n  \r\n  TODO: \r\n    -Need to find a dependency injection system for components.\r\n    -Need to think through data factories, probably should something like:\r\n        JSEntitySystem.Datas holds a collection of primitive values, object values or functions.\r\n        When a Component gets added, the system should look at the Datas collection for the value it should provide.\r\n        If the system sees the Datas[\"requestedData\"] in question is a primitive or object, it simply copies that in.\r\n        If the system sees the Datas[\"requestedData\"] in question is a function however, it should call that function.\r\n        This adds the edge case of having to get around the need to put a function into Datas[\"requestedData\"],\r\n        this however can be surpassed by wrapping the function you would like in the Datas collection in another function:\r\n            Datas[\"requestedData\"] = function() { return function() { return \"ouch, syntax heavy :(\"; }};\r\n        I could make a factory function to act as a wrapper:\r\n            Datas[\"requestedData\"] = engine.DataFunction(function() { return \"slightly better? I don't know really.\" });\r\n        This could then be checked against by:\r\n            var isDataFunction = (Datas[\"requestedData\"].constructor === JSEntitySystem.DataFunction);\r\n        Then retrieved:\r\n            return Datas[\"requestedData\"].wrappedFunction;\r\n*/\r\nfunction JSEntitySystem(updateIntervalMilliseconds) {\r\n    /*\r\n      This is the next free Id ready to be assigned to an entity.\r\n    */\r\n    this.NextFreeId = 0;\r\n    \r\n    /*\r\n      The interval to use for the setInterval function.\r\n    */\r\n    this.UpdateIntervalMilliseconds = updateIntervalMilliseconds;\r\n    \r\n    /*\r\n      The variable used to hold the scope of the JSEntitySystem function.\r\n    */\r\n    var engine = this;\r\n    \r\n    this.MousePos = new V2();\r\n    \r\n    /*\r\n      The jQuery callback used for the mouse movement callback and grab the latest mouse coordinates.\r\n    */\r\n    $(document).ready(function() {\r\n       $(document).mousemove(function(e) {\r\n          engine.MousePos.X = e.pageX;\r\n          engine.MousePos.Y = e.pageY;\r\n       })}); \r\n    \r\n    /*\r\n    The component metadata collection.\r\n    keyed on the componentName, toLowered\r\n    Component[\"name\"] =    {\r\n        ComponentName : \"name\",\r\n    \tMethods : {\r\n    \t\tAssigned : method,\r\n    \t\tRemoved : method,\r\n    \t\tUpdate : method,\r\n    \t\tRender : method\r\n    \t},\r\n    \tRequiredComponents : array of strings,\r\n    \tRequiredData : array of data names\r\n    }\r\n    */\r\n    this.Components = { };\r\n    \r\n    /*\r\n      Datas is a map for holding data.\r\n    */\r\n    this.Datas = { };\r\n    \r\n    /*\r\n      Entities is a map for holding entities.\r\n    */\r\n    this.Entities = { };\r\n    \r\n    /*\r\n      EntityUpdateList is an array used to update the entities for the engine.\r\n    */    \r\n    this.EntityUpdateList = [];\r\n    \r\n    /*\r\n      The factory for the Component methods.\r\n    */\r\n    this.Component = function(assigned, removed, update, render) {\r\n    \tthis.Assigned = assigned;\r\n    \tthis.Removed = removed;\r\n    \tthis.Update = update;\r\n    \tthis.Render = render;\r\n    }\r\n    \r\n    /*\r\n      Registers a Component by name in the Components map.\r\n    */\r\n    this.RegisterComponent = function(componentName, component, requiredComponents, requiredData) {\r\n    \tengine.Components[componentName] = {\r\n    \t\tComponentName : componentName,\r\n    \t\tMethods : component,\r\n    \t\tRequiredComponents : requiredComponents,\r\n    \t\tRequiredData : requiredData\r\n    \t};\r\n    }\r\n    \r\n    /*\r\n      Adds a component to the entity passed in.\r\n    */\r\n    this.AddComponentWithRequirements = function(entity, componentName) {\r\n    \tvar component = engine.Components[componentName];\r\n    \t\r\n    \tif (!(componentName in entity.Components)) {\r\n    \t\tentity.Components[componentName] = engine.Components[componentName];\r\n    \t\tentity.UpdateComponents.push(engine.Components[componentName]);\r\n    \t}\r\n    \t\r\n    \tfor (var key in component.RequiredComponents) {\r\n    \t\tif (typeof key === 'String' && !(key in entity.Components)) {\r\n    \t\t\tengine.AddComponentWithRequirements(entity, key);\r\n    \t\t}\r\n    \t}\r\n    \t\r\n    \tfor (var key in component.RequiredData) {\r\n    \t\tif (typeof key === 'String' && !(key in entity.Datas)) {\r\n                //TODO: Implement required data factory. See TODO at top of class.\r\n        \t\t  throw new Error(\"Entity does not have data: \" + key + \", required by component: \" + componentName);\r\n    \t\t}\r\n    \t}\r\n        \r\n        engine.Components[componentName].Methods.Assigned(entity, engine.LastUpdateTime);\r\n    }\r\n    \r\n    /*\r\n      The Entity factory method used by the engine to make new entities.\r\n    */\r\n    this.Entity = function(idToUse) {\r\n        var self = this;\r\n        \r\n        if (typeof idToUse == 'number') {\r\n            if (engine.Entities.Any(function(ent) { ent.Id == idToUse })) {\r\n                throw new Error(\"Tried to create an entity with an explicity Id that already existed! Entity in question: \" + idToUse);\r\n                return;\r\n            }\r\n            \r\n            this.Id = idToUse;\r\n        } else {\r\n            engine.NextFreeId = engine.NextFreeId + 1;\r\n            this.Id = engine.NextFreeId;    \r\n        }\r\n        \r\n    \tthis.Datas = {\r\n    \t};\r\n    \tthis.Components = {\r\n    \t};\r\n        \r\n    \tthis.UpdateComponents = [];\r\n    \t\r\n        //Adds a component and any dependencies.\r\n        this.AddComponent = function(componentName) {\r\n    \t\tif (!(componentName in self.Components)) {\r\n    \t\t\t//recursively add components here.\r\n    \t\t\t//make sure to add each components required data here as well.\r\n    \t\t\tengine.AddComponentWithRequirements(self, componentName);\r\n    \t\t}\r\n    \t};\r\n        \r\n        this.RemoveComponent = function(componentName) {\r\n            if (componentName in self.Components) {\r\n                self.Components[componentName].Methods.RemoveComponent(self, engine.LastUpdateTime);\r\n                delete self.Components[componentName];\r\n            }\r\n        };\r\n    \t\r\n    \tthis.Update = function(gameTime) {\r\n    \t\tvar i = 0;\r\n    \t\tfor (i = 0; i < self.UpdateComponents.length; i++) {\r\n    \t\t\tself.UpdateComponents[i].Methods.Update(self, gameTime);\r\n    \t\t}\r\n    \t};\r\n    \t\r\n    \tengine.Entities[this.Id] = this;\r\n        engine.EntityUpdateList.push(this);\r\n    }\r\n    \r\n    this.CreateEntity = function(idToUse) {\r\n        return new engine.Entity(idToUse);\r\n    }\r\n    \r\n    this.RemoveEntity = function(entityId) {\r\n        var entityToRemove = engine.Entities[entityId];\r\n        \r\n        if (entityToRemove === null) {\r\n            return;\r\n        }\r\n        \r\n        var indexOfEntity = engine.EntityUpdateList.indexOf(entityToRemove);\r\n        \r\n        if (indexOfEntity !== -1) {\r\n            engine.EntityUpdateList.splice(indexOfEntity, 1);\r\n        }\r\n        \r\n        delete engine.Entities[entityId];\r\n    }\r\n    \r\n    this.Update = function(gameTime) {\r\n        var i = 0;\r\n        for(i = 0; i < engine.EntityUpdateList.length; i++) {\r\n            engine.EntityUpdateList[i].Update(gameTime);\r\n        }\r\n    }\r\n    \r\n    this.GameStart = (new Date()).getMilliseconds();\r\n    this.LastUpdateTime = this.GameStart;\r\n    \r\n    this.FrameCountThisSecond = 0;\r\n    this.LastSecondTime = 0;\r\n    \r\n    this.IntervalUpdateFunc = function() {\r\n        var currentTime = (new Date()).getMilliseconds();\r\n        var updateDelta = currentTime - engine.LastUpdateTime;\r\n\r\n        \r\n        //TODO: HACK: This sometimes comes out as a value ~-361 which... is wrong.\r\n        //As far as I know, javascript isn't capable of time travel...\r\n        if (updateDelta < 0) {\r\n            updateDelta = engine.UpdateIntervalMilliseconds;\r\n        }\r\n        \r\n        engine.LastSecondTime += updateDelta;\r\n        \r\n        if (engine.LastSecondTime > 1000) {\r\n            engine.LastSecondTime -= 1000;\r\n            $('#diagDiv').text(\"FPS: \" + engine.FrameCountThisSecond);\r\n            engine.FrameCountThisSecond = 0;\r\n        }\r\n        \r\n        engine.FrameCountThisSecond++;\r\n        \r\n        engine.Update(updateDelta);\r\n        \r\n        engine.LastUpdateTime = currentTime;\r\n    }\r\n    \r\n    this.StartUpdating = function() {\r\n        engine.StopUpdating();\r\n        \r\n        engine.UpdateIntervalKey = setInterval(engine.IntervalUpdateFunc, engine.UpdateIntervalMilliseconds);\r\n    }\r\n    \r\n    this.StopUpdating = function() {\r\n        if (typeof engine.UpdateIntervalKey !== 'undefined') {\r\n            clearInterval(engine.UpdateIntervalKey);\r\n            delete engine.UpdateIntervalKey;\r\n        }\r\n    }\r\n}\r\n\r\n$(function() {\r\n    var entitySystem = new JSEntitySystem(16);\r\n    \r\n    //TODO: This 'TestComponent' should be reworked into a 'FollowMouse' component that takes an element reference in its Datas.\r\n    entitySystem.RegisterComponent('FollowMouse',\r\n        new entitySystem.Component(function(entity, gameTime) {\r\n                            //assigned\r\n                            entity.Datas.ElementToMove.css('position', 'absolute');\r\n                            entity.Datas.ElementToMove.css('width','2em');\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //removed\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //update\r\n                            \r\n                            if (typeof entity.Datas.CurrentPos === 'undefined') {\r\n                                entity.Datas.CurrentPos = new V2();\r\n                                entity.Datas.ToMouse = new V2();\r\n                            }\r\n                            \r\n                            var div = entity.Datas.ElementToMove;\r\n                            var divPos = div.position();\r\n                            \r\n                            //A -> B :: B - A\r\n                            var currentPos = entity.Datas.CurrentPos.Init(divPos.left, divPos.top);\r\n                            var toMouse = entity.Datas.ToMouse.InitFromV2(entitySystem.MousePos)\r\n                                                              .Sub(currentPos);\r\n                            \r\n                            if (toMouse.Length() < 50) {\r\n                                return;\r\n                            }\r\n                            \r\n                            toMouse.Normalize()\r\n                                   .Multiply(entity.Datas.MovementSpeed * (gameTime / 1000) * 10);\r\n                            \r\n                            var rotation = Math.atan2(toMouse.Y, toMouse.X);\r\n                            \r\n                            toMouse.Add(currentPos);\r\n                            \r\n                            //div.css({ WebkitTransform: 'rotate(' + 0 + 'rad)'});\r\n                            div.css('left', toMouse.X);\r\n                            div.css('top', toMouse.Y);\r\n                            //div.text(toMouse.X + \" \" + toMouse.Y);\r\n                            entity.Datas.Rotation += 4;\r\n                            div.css({ WebkitTransform: 'rotate(' + rotation + 'rad)'});\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //render\r\n            \t\t\t}),\r\n                \t[],\r\n                    ['MovementSpeed', 'ElementToMove']);\r\n    \r\n    (function() {\r\n        var i = 0;\r\n        \r\n        for (i = 0; i < 25; i++) {\r\n            (function() {\r\n                var newDiv = $('<div>hey guy</div>');\r\n                var ent = entitySystem.CreateEntity();    \r\n                ent.Datas.MovementSpeed = i + 50;\r\n                \r\n                ent.Datas.ElementToMove = newDiv.appendTo($('body'));\r\n                \r\n                ent.AddComponent('FollowMouse');\r\n                \r\n                ent.Datas.Rotation = 0;\r\n            })();\r\n        }\r\n    })();\r\n    \r\n    entitySystem.StartUpdating();\r\n});"]],"start1":0,"start2":0,"length1":0,"length2":11941}]],"length":11941,"saved":false}
{"contributors":[],"silentsave":true,"ts":1344908493177,"patch":[[{"diffs":[[1,"/*\r\n  A simple entity system with an entity centric component / data model.\r\n  \r\n  TODO: \r\n    -Need to find a dependency injection system for components.\r\n    -Need to think through data factories, probably should something like:\r\n        JSEntitySystem.Datas holds a collection of primitive values, object values or functions.\r\n        When a Component gets added, the system should look at the Datas collection for the value it should provide.\r\n        If the system sees the Datas[\"requestedData\"] in question is a primitive or object, it simply copies that in.\r\n        If the system sees the Datas[\"requestedData\"] in question is a function however, it should call that function.\r\n        This adds the edge case of having to get around the need to put a function into Datas[\"requestedData\"],\r\n        this however can be surpassed by wrapping the function you would like in the Datas collection in another function:\r\n            Datas[\"requestedData\"] = function() { return function() { return \"ouch, syntax heavy :(\"; }};\r\n        I could make a factory function to act as a wrapper:\r\n            Datas[\"requestedData\"] = engine.DataFunction(function() { return \"slightly better? I don't know really.\" });\r\n        This could then be checked against by:\r\n            var isDataFunction = (Datas[\"requestedData\"].constructor === JSEntitySystem.DataFunction);\r\n        Then retrieved:\r\n            return Datas[\"requestedData\"].wrappedFunction;\r\n*/\r\nfunction JSEntitySystem(updateIntervalMilliseconds) {\r\n    /*\r\n      This is the next free Id ready to be assigned to an entity.\r\n    */\r\n    this.NextFreeId = 0;\r\n    \r\n    /*\r\n      The interval to use for the setInterval function.\r\n    */\r\n    this.UpdateIntervalMilliseconds = updateIntervalMilliseconds;\r\n    \r\n    /*\r\n      The variable used to hold the scope of the JSEntitySystem function.\r\n    */\r\n    var engine = this;\r\n    \r\n    this.MousePos = new V2();\r\n    \r\n    /*\r\n      The jQuery callback used for the mouse movement callback and grab the latest mouse coordinates.\r\n    */\r\n    $(document).ready(function() {\r\n       $(document).mousemove(function(e) {\r\n          engine.MousePos.X = e.pageX;\r\n          engine.MousePos.Y = e.pageY;\r\n       })}); \r\n    \r\n    /*\r\n    The component metadata collection.\r\n    keyed on the componentName, toLowered\r\n    Component[\"name\"] =    {\r\n        ComponentName : \"name\",\r\n    \tMethods : {\r\n    \t\tAssigned : method,\r\n    \t\tRemoved : method,\r\n    \t\tUpdate : method,\r\n    \t\tRender : method\r\n    \t},\r\n    \tRequiredComponents : array of strings,\r\n    \tRequiredData : array of data names\r\n    }\r\n    */\r\n    this.Components = { };\r\n    \r\n    /*\r\n      Datas is a map for holding data.\r\n    */\r\n    this.Datas = { };\r\n    \r\n    /*\r\n      Entities is a map for holding entities.\r\n    */\r\n    this.Entities = { };\r\n    \r\n    /*\r\n      EntityUpdateList is an array used to update the entities for the engine.\r\n    */    \r\n    this.EntityUpdateList = [];\r\n    \r\n    /*\r\n      The factory for the Component methods.\r\n    */\r\n    this.Component = function(assigned, removed, update, render) {\r\n    \tthis.Assigned = assigned;\r\n    \tthis.Removed = removed;\r\n    \tthis.Update = update;\r\n    \tthis.Render = render;\r\n    }\r\n    \r\n    /*\r\n      Registers a Component by name in the Components map.\r\n    */\r\n    this.RegisterComponent = function(componentName, component, requiredComponents, requiredData) {\r\n    \tengine.Components[componentName] = {\r\n    \t\tComponentName : componentName,\r\n    \t\tMethods : component,\r\n    \t\tRequiredComponents : requiredComponents,\r\n    \t\tRequiredData : requiredData\r\n    \t};\r\n    }\r\n    \r\n    /*\r\n      Adds a component to the entity passed in.\r\n    */\r\n    this.AddComponentWithRequirements = function(entity, componentName) {\r\n    \tvar component = engine.Components[componentName];\r\n    \t\r\n    \tif (!(componentName in entity.Components)) {\r\n    \t\tentity.Components[componentName] = engine.Components[componentName];\r\n    \t\tentity.UpdateComponents.push(engine.Components[componentName]);\r\n    \t}\r\n    \t\r\n    \tfor (var key in component.RequiredComponents) {\r\n    \t\tif (typeof key === 'String' && !(key in entity.Components)) {\r\n    \t\t\tengine.AddComponentWithRequirements(entity, key);\r\n    \t\t}\r\n    \t}\r\n    \t\r\n    \tfor (var key in component.RequiredData) {\r\n    \t\tif (typeof key === 'String' && !(key in entity.Datas)) {\r\n                //TODO: Implement required data factory. See TODO at top of class.\r\n        \t\t  throw new Error(\"Entity does not have data: \" + key + \", required by component: \" + componentName);\r\n    \t\t}\r\n    \t}\r\n        \r\n        engine.Components[componentName].Methods.Assigned(entity, engine.LastUpdateTime);\r\n    }\r\n    \r\n    /*\r\n      The Entity factory method used by the engine to make new entities.\r\n    */\r\n    this.Entity = function(idToUse) {\r\n        var self = this;\r\n        \r\n        if (typeof idToUse == 'number') {\r\n            if (engine.Entities.Any(function(ent) { ent.Id == idToUse })) {\r\n                throw new Error(\"Tried to create an entity with an explicity Id that already existed! Entity in question: \" + idToUse);\r\n                return;\r\n            }\r\n            \r\n            this.Id = idToUse;\r\n        } else {\r\n            engine.NextFreeId = engine.NextFreeId + 1;\r\n            this.Id = engine.NextFreeId;    \r\n        }\r\n        \r\n    \tthis.Datas = {\r\n    \t};\r\n    \tthis.Components = {\r\n    \t};\r\n        \r\n    \tthis.UpdateComponents = [];\r\n    \t\r\n        //Adds a component and any dependencies.\r\n        this.AddComponent = function(componentName) {\r\n    \t\tif (!(componentName in self.Components)) {\r\n    \t\t\t//recursively add components here.\r\n    \t\t\t//make sure to add each components required data here as well.\r\n    \t\t\tengine.AddComponentWithRequirements(self, componentName);\r\n    \t\t}\r\n    \t};\r\n        \r\n        this.RemoveComponent = function(componentName) {\r\n            if (componentName in self.Components) {\r\n                self.Components[componentName].Methods.RemoveComponent(self, engine.LastUpdateTime);\r\n                delete self.Components[componentName];\r\n            }\r\n        };\r\n    \t\r\n    \tthis.Update = function(gameTime) {\r\n    \t\tvar i = 0;\r\n    \t\tfor (i = 0; i < self.UpdateComponents.length; i++) {\r\n    \t\t\tself.UpdateComponents[i].Methods.Update(self, gameTime);\r\n    \t\t}\r\n    \t};\r\n    \t\r\n    \tengine.Entities[this.Id] = this;\r\n        engine.EntityUpdateList.push(this);\r\n    }\r\n    \r\n    this.CreateEntity = function(idToUse) {\r\n        return new engine.Entity(idToUse);\r\n    }\r\n    \r\n    this.RemoveEntity = function(entityId) {\r\n        var entityToRemove = engine.Entities[entityId];\r\n        \r\n        if (entityToRemove === null) {\r\n            return;\r\n        }\r\n        \r\n        var indexOfEntity = engine.EntityUpdateList.indexOf(entityToRemove);\r\n        \r\n        if (indexOfEntity !== -1) {\r\n            engine.EntityUpdateList.splice(indexOfEntity, 1);\r\n        }\r\n        \r\n        delete engine.Entities[entityId];\r\n    }\r\n    \r\n    this.Update = function(gameTime) {\r\n        var i = 0;\r\n        for(i = 0; i < engine.EntityUpdateList.length; i++) {\r\n            engine.EntityUpdateList[i].Update(gameTime);\r\n        }\r\n    }\r\n    \r\n    this.GameStart = (new Date()).getMilliseconds();\r\n    this.LastUpdateTime = this.GameStart;\r\n    \r\n    this.FrameCountThisSecond = 0;\r\n    this.LastSecondTime = 0;\r\n    \r\n    this.IntervalUpdateFunc = function() {\r\n        var currentTime = (new Date()).getMilliseconds();\r\n        var updateDelta = currentTime - engine.LastUpdateTime;\r\n\r\n        \r\n        //TODO: HACK: This sometimes comes out as a value ~-361 which... is wrong.\r\n        //As far as I know, javascript isn't capable of time travel...\r\n        if (updateDelta < 0) {\r\n            updateDelta = engine.UpdateIntervalMilliseconds;\r\n        }\r\n        \r\n        engine.LastSecondTime += updateDelta;\r\n        \r\n        if (engine.LastSecondTime > 1000) {\r\n            engine.LastSecondTime -= 1000;\r\n            $('#diagDiv').text(\"FPS: \" + engine.FrameCountThisSecond);\r\n            engine.FrameCountThisSecond = 0;\r\n        }\r\n        \r\n        engine.FrameCountThisSecond++;\r\n        \r\n        engine.Update(updateDelta);\r\n        \r\n        engine.LastUpdateTime = currentTime;\r\n    }\r\n    \r\n    this.StartUpdating = function() {\r\n        engine.StopUpdating();\r\n        \r\n        engine.UpdateIntervalKey = setInterval(engine.IntervalUpdateFunc, engine.UpdateIntervalMilliseconds);\r\n    }\r\n    \r\n    this.StopUpdating = function() {\r\n        if (typeof engine.UpdateIntervalKey !== 'undefined') {\r\n            clearInterval(engine.UpdateIntervalKey);\r\n            delete engine.UpdateIntervalKey;\r\n        }\r\n    }\r\n}\r\n\r\n$(function() {\r\n    var entitySystem = new JSEntitySystem(16);\r\n    \r\n    //TODO: This 'TestComponent' should be reworked into a 'FollowMouse' component that takes an element reference in its Datas.\r\n    entitySystem.RegisterComponent('FollowMouse',\r\n        new entitySystem.Component(function(entity, gameTime) {\r\n                            //assigned\r\n                            entity.Datas.ElementToMove.css('position', 'absolute');\r\n                            entity.Datas.ElementToMove.css('width','2em');\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //removed\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //update\r\n                            \r\n                            if (typeof entity.Datas.CurrentPos === 'undefined') {\r\n                                entity.Datas.CurrentPos = new V2();\r\n                                entity.Datas.ToMouse = new V2();\r\n                                \r\n                                entity.Datas.Counter = 0;\r\n                            }\r\n                            \r\n                            entity.Datas.Counter++;\r\n                            \r\n                            if (entity.Datas.Counter > 1000) {\r\n                                entity.Datas\r\n                            }\r\n                            \r\n                            var div = entity.Datas.ElementToMove;\r\n                            var divPos = div.position();\r\n                            \r\n                            //A -> B :: B - A\r\n                            var currentPos = entity.Datas.CurrentPos.Init(divPos.left, divPos.top);\r\n                            var toMouse = entity.Datas.ToMouse.InitFromV2(entitySystem.MousePos)\r\n                                                              .Sub(currentPos);\r\n                            \r\n                            if (toMouse.Length() < 50) {\r\n                                return;\r\n                            }\r\n                            \r\n                            toMouse.Normalize()\r\n                                   .Multiply(entity.Datas.MovementSpeed * (gameTime / 1000) * 0.5 * Math.sin(entity.Datas.Counter));\r\n                                   \r\n                            \r\n                            var rotation = Math.atan2(toMouse.Y, toMouse.X);\r\n                            \r\n                            toMouse.Add(currentPos);\r\n                            \r\n                            div.css('left', toMouse.X);\r\n                            div.css('top', toMouse.Y);\r\n                            entity.Datas.Rotation += 4;\r\n                            //div.css({ WebkitTransform: 'rotate(' + rotation + 'rad)'});\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //render\r\n            \t\t\t}),\r\n                \t[],\r\n                    ['MovementSpeed', 'ElementToMove']);\r\n    \r\n    (function() {\r\n        var i = 0;\r\n        \r\n        for (i = 0; i < 25; i++) {\r\n            (function() {\r\n                var ent = entitySystem.CreateEntity();\r\n                \r\n                var newDiv = $('<div id=\"twitter_update_list\">hey guy</div>');\r\n                \r\n                ent.Datas.ElementToMove = newDiv.appendTo($('body'));\r\n                \r\n                ent.Datas.MovementSpeed = i + 50;\r\n                \r\n                ent.AddComponent('FollowMouse');\r\n                \r\n                ent.Datas.Rotation = 0;\r\n            })();\r\n        }\r\n    })();\r\n    \r\n    entitySystem.StartUpdating();\r\n});"]],"start1":0,"start2":0,"length1":0,"length2":12264}]],"length":12264,"saved":false}
{"contributors":[],"silentsave":true,"ts":1344908495768,"patch":[[{"diffs":[[0,"ty.Datas"],[1,".Counter = "],[0,"\r\n      "]],"start1":9977,"start2":9977,"length1":16,"length2":27}]],"length":12275,"saved":false}
{"ts":1344908497261,"patch":[[{"diffs":[[0,"unter = "],[1,"100"],[0,"\r\n      "]],"start1":9988,"start2":9988,"length1":16,"length2":19}]],"length":12278,"saved":false}
{"contributors":[],"silentsave":true,"ts":1345167408762,"patch":[[{"diffs":[[0,"atas.Counter"],[-1,"++"],[1," += 0.1"],[0,";\r\n         "]],"start1":9830,"start2":9830,"length1":26,"length2":31},{"diffs":[[0,"unter = "],[-1,"10"],[0,"0"],[1,";"],[0,"\r\n      "]],"start1":9993,"start2":9993,"length1":19,"length2":18},{"diffs":[[0,"                "],[1,"var speedModifier = 1;"],[0,"\r\n              "]],"start1":10560,"start2":10560,"length1":32,"length2":54},{"diffs":[[0,"ouse.Length() < "],[-1,"5"],[1,"2"],[0,"0) {\r\n          "]],"start1":10635,"start2":10635,"length1":33,"length2":33},{"diffs":[[0,"                "],[-1,"return"],[1,"speedModifier = 0.1"],[0,";\r\n             "]],"start1":10674,"start2":10674,"length1":38,"length2":51},{"diffs":[[0,") * "],[-1,"0.5 * "],[1,"5);// * (5 * ("],[0,"Math"]],"start1":10912,"start2":10912,"length1":14,"length2":22},{"diffs":[[0,"ter)"],[-1,");\r\n                                   "],[1," + 0.7)) * speedModifier);"],[0,"\r\n  "]],"start1":10956,"start2":10956,"length1":47,"length2":34},{"diffs":[[0,"    "],[-1,"\r\n"],[0,"    "],[-1,"(function() {\r\n        var i = 0;\r\n        \r\n        for (i = 0; i < 25; i++) {\r\n            (function() {\r\n                var ent = entitySystem.CreateEntity();\r\n                \r\n                var newDiv = $('<div id=\"twitter_update_list\">hey guy</div>');\r\n                \r\n                ent.Datas.ElementToMove = newDiv.appendTo($('body'));\r\n                \r\n                ent.Datas.MovementSpeed = i + 50;\r\n                \r\n                ent.AddComponent('FollowMouse');\r\n                \r\n                ent.Datas.Rotation = 0;\r\n            })();\r\n        }\r\n    })();\r\n    \r\n    entitySystem.StartUpdating();\r\n});/*\r\n  A simple entity system with an entity centric component / data model.\r\n  \r\n  TODO: \r\n    -Need to find a dependency injection system for components.\r\n    -Need to think through data factories, probably should something like:\r\n        JSEntitySystem.Datas holds a collection of primitive values, object values or functions.\r\n        When a Component gets added, the system should look at the Datas collection for the value it should provide.\r\n        If the system sees the Datas[\"requestedData\"] in question is a primitive or object, it simply copies that in.\r\n        If the system sees the Datas[\"requestedData\"] in question is a function however, it should call that function.\r\n        This adds the edge case of having to get around the need to put a function into Datas[\"requestedData\"],\r\n        this however can be surpassed by wrapping the function you would like in the Datas collection in another function:\r\n            Datas[\"requestedData\"] = function() { return function() { return \"ouch, syntax heavy :(\"; }};\r\n        I could make a factory function to act as a wrapper:\r\n            Datas[\"requestedData\"] = engine.DataFunction(function() { return \"slightly better? I don't know really.\" });\r\n        This could then be checked against by:\r\n            var isDataFunction = (Datas[\"requestedData\"].constructor === JSEntitySystem.DataFunction);\r\n        Then retrieved:\r\n            return Datas[\"requestedData\"].wrappedFunction;\r\n*/\r\n"],[1,"            \r\n    entitySystem.RegisterComponent('RotateClockwise',\r\n        new entitySystem.Component(function(entity, gameTime) {\r\n                            //assigned\r\n                            ///entity.Datas.ElementToMove.css('width','2em');\r\n                            entity.Datas.ElementToMove.css(\"-webkit-transform-origin\", \"50% 50%\" );\r\n            \t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //removed\r\n        \t\t\t\t},\r\n            \t\t\t"],[0,"function"],[-1," JSE"],[1,"(e"],[0,"ntity"],[-1,"System(updateIntervalMilliseconds"],[1,", gameTime"],[0,") {\r"]],"start1":11670,"start2":11670,"length1":2152,"length2":525},{"diffs":[[0,"    "],[-1,"/*\r\n"],[0,"      "],[-1,"This is the next free Id ready to be assigned to an entity.\r\n    */\r\n    this.NextFreeId = 0;\r\n    \r\n    /*\r\n      The interval to use for the setInterval function.\r\n    */\r\n    this.UpdateIntervalMilliseconds = updateIntervalMilliseconds;"],[1,"                  //update"],[0,"\r\n    "],[-1,"\r\n"],[0,"    "],[-1,"/*\r\n"],[0,"      "],[-1,"The variable used to hold the scope of the JSEntitySystem function.\r\n"],[1,"          "],[0,"    "],[-1,"*/"],[0,"\r\n    "],[-1,"var engine = this;\r\n"],[1,"   "],[0,"    "],[-1,"\r\n"],[0,"    "],[-1,"this.MousePos = new V2();\r\n"],[1,"   "],[0,"    "],[-1,"\r\n"],[0,"    "],[-1,"/*\r\n      The jQuery callback used for the mouse movement callback and grab the latest mouse coordinates.\r\n    */\r\n    $(document).ready(function() {\r\n       $(document).mousemove(function(e"],[1,"  if (typeof entity.Datas.Rotation === 'undefined'"],[0,") {"],[-1,"\r\n"],[0,"    "]],"start1":12196,"start2":12196,"length1":622,"length2":151},{"diffs":[[0,"    "],[-1,"engine.MousePos.X = e.pageX;\r\n          engine.MousePos.Y = e.pageY;\r\n"],[1,"              "],[0,"       "],[-1,"})});"],[0," \r\n    "],[-1,"\r\n"],[0,"    "],[-1,"/*\r\n    The component metadata collection.\r\n    keyed on the componentName, toLowered\r\n    Component[\"name\"] =    {\r\n        ComponentName : \"name\",\r\n    \tMethods : {\r\n    \t\tAssigned : method,\r\n    \t\tRemoved : method,\r\n    \t\tUpdate : method,\r\n    \t\tRender : method\r\n    \t},\r\n    \tRequiredComponents : array of strings,\r\n    \tRequiredData : array of data names\r\n    }\r\n    */\r\n    this.Components = { };\r\n    \r\n    /*\r\n      Datas is a map for holding data.\r\n    */\r\n    this.Datas = { }"],[1,"                        entity.Datas.Rotation = 0"],[0,";\r\n    "],[-1,"\r\n"],[0,"    "],[-1,"/*\r\n"],[0,"      "],[-1,"Entities is a map for holding entities.\r\n    */\r\n    this.Entities = { };"],[1,"              }"],[0,"\r\n    "],[-1,"\r\n"],[0,"    "],[-1,"/*\r\n"],[0,"      "],[-1,"EntityUpdateList is an array used to update the entities for the engine.\r\n    */    \r\n    this.EntityUpdateList = [];\r\n"],[1,"              \r\n      "],[0,"    "],[-1,"\r\n"],[0,"    "],[-1,"/*\r\n"],[0,"      "],[-1,"The factory for the Component methods.\r\n    */\r\n    this.Component = function(assigned, removed, update, render) {\r\n    \tthis.Assigned = assigned;\r\n    \tthis.Removed = removed;\r\n    \tthis.Update = update;\r\n    \tthis.Render = render;\r\n    }\r\n    \r\n    /*\r\n      Registers a Component by name in the Components map.\r\n    */\r\n    this.RegisterComponent = function(componentName, component, requiredComponents, requiredData) {\r\n    \tengine.Components[componentName] = {\r\n    \t\tComponentName : componentName,\r\n    \t\tMethods : component,\r\n    \t\tRequiredComponents : requiredComponents,\r\n    \t\tRequiredData : requiredData"],[1,"        entity.Datas.Rotation += 10 * (gameTime / 1000);\r\n                            "],[0,"\r\n    "],[-1,"\t};\r\n"],[0,"    "],[-1,"}\r\n"],[0,"    "],[-1,"\r\n"],[0,"    "],[-1,"/*\r\n"],[0,"      "],[-1,"Adds a component to the entity passed in.\r\n    */\r\n    this.AddComponentWithRequirements = function(entity, componentName) {\r\n    \tvar component = engine.Components[componentName];\r\n    \t\r\n    \tif (!(componentName in entity.Components)) {\r\n    \t\tentity.Components[componentName] = engine.Components[componentName];\r\n    \t\tentity.UpdateComponents.push(engine.Components[componentName]"],[1,"      entity.Datas.ElementToMove.rotate(entity.Datas.Rotation"],[0,");\r\n    "],[-1,"\t}\r\n"],[0,"    \t"],[-1,"\r\n    \tfor (var key in component.RequiredComponents) {\r\n    \t\tif (typeof key === 'String' && !(key in entity.Components)) {\r\n    \t\t\tengine.AddComponentWithRequirements(entity, key);\r\n    \t\t}\r\n    \t}\r\n    \t\r\n    \tfor (var key in component.RequiredData) {\r\n    \t\tif (typeof key === 'String' && !(key in entity.Datas)) {\r\n                //TODO: Implement required data factory. See TODO at top of class.\r\n        \t\t  throw new Error(\"Entity does not have data: \" + key + \", required by component: \" + componentName);\r\n    \t\t}\r\n    \t}"],[1,"\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //render\r\n            \t\t\t}),"],[0,"\r\n  "]],"start1":12349,"start2":12349,"length1":2429,"length2":465},{"diffs":[[0,"    "],[-1,"\r\n"],[0,"        "],[-1,"engine.Components[componentName].Methods.Assigned(entity, engine.LastUpdateTime);"],[1,"\t[],"],[0,"\r\n    "],[-1,"}\r\n"],[0,"    "],[-1,"\r\n"],[0,"    "],[-1,"/*\r\n"],[0,"      "],[-1,"The Entity factory method used by the engine to make new entities.\r\n    */\r\n    this.Entity = function(idToUse) {\r\n        var self = this"],[1,"  ['ElementToMove'])"],[0,";\r\n "]],"start1":12816,"start2":12816,"length1":266,"length2":60},{"diffs":[[0,"    "],[-1,"\r\n"],[0,"        "],[-1,"if (typeof idToUse == 'number') {\r\n            if (engine.Entities.Any(function(ent) { ent.Id == idToUse })) {\r\n                throw new Error(\"Tried to create an entity with an explicity Id that already existed! Entity in question: \" + idToUse);\r\n                return;\r\n            }\r\n            \r\n            this.Id = idToUse;\r\n        } else {\r\n            engine.NextFreeId = engine.NextFreeId + 1;\r\n            this.Id = engine.NextFreeId;    \r\n        }\r\n        \r\n    \tthis.Datas = {\r\n    \t};\r\n    \tthis.Components = {\r\n    \t};\r\n        \r\n    \tthis.UpdateComponents = [];\r\n    \t\r\n        //Adds a component and any dependencies.\r\n        this.Add"],[1,"    \r\n    entitySystem.RegisterComponent('MovementUpdater',\r\n        new entitySystem."],[0,"Comp"]],"start1":12879,"start2":12879,"length1":676,"length2":102},{"diffs":[[0,"System.Component"],[-1," = "],[1,"("],[0,"function(compone"]],"start1":12970,"start2":12970,"length1":35,"length2":33},{"diffs":[[0,"ion("],[-1,"componentName) {\r\n    \t\tif (!(componentName in self.Components)) {\r\n    \t\t\t//recursively add components here.\r\n    \t\t\t//make sure to add each components required data here as well.\r\n    \t\t\tengine.AddComponentWithRequirements(self, componentName);"],[1,"entity, gameTime) {\r\n            //assigned"],[0,"\r\n    "],[-1,"\t\t}\r\n"],[0,"    "],[-1,"\t};"],[1,"},"],[0,"\r\n  "]],"start1":12992,"start2":12992,"length1":272,"length2":63},{"diffs":[[0,"    "],[-1,"\r\n        this.RemoveComponent = function(componentName) {\r\n            if (componentName in self.Components"],[1,"function(entity, gameTime"],[0,") {\r"]],"start1":13057,"start2":13057,"length1":116,"length2":33},{"diffs":[[0,"    "],[-1,"    "],[-1,"self.Components[componentName].Methods.RemoveComponent(self, engine.LastUpdateTime);\r\n                delete self.Components[componentName];\r\n    "],[1,"//removed\r\n"],[0,"    "]],"start1":13099,"start2":13099,"length1":158,"length2":19},{"diffs":[[0,"moved\r\n        }"],[1,","],[0,"\r\n        };\r\n  "]],"start1":13107,"start2":13107,"length1":32,"length2":33},{"diffs":[[0,"    "],[-1,"};\r\n    \t\r\n    \tthis.Update = function(gameTime) {\r\n    \t\tvar i = 0;\r\n    \t\tfor (i = 0; i < self.UpdateComponents.length; i++) {\r\n    \t\t\tself.UpdateComponents[i].Methods.Update(self"],[1,"function(entity"],[0,", ga"]],"start1":13130,"start2":13130,"length1":189,"length2":23},{"diffs":[[0,"ime)"],[-1,";\r\n    \t\t}"],[1," {"],[0,"\r\n    "],[-1,"\t};\r\n"],[0,"    "],[-1,"\t\r\n"],[0,"    "],[-1,"\tengine.Entities[this.Id] = this;\r\n        engine.EntityUpdateList.push(this);\r\n    }\r\n    \r\n    this.CreateEntity = function(idToUse) {\r\n        return new engine.Entity(idToUse);\r\n"],[1,"//update\r\n    "],[0,"    }"],[1,","],[0,"\r\n    "],[-1,"\r\n"],[0,"    "],[-1,"this.RemoveEntity = function(entityId) {\r\n        var entityToRemove = engine.Entities[entityId];\r\n        \r\n        if (entityToRemove === null"],[1,"function(entity, gameTime"],[0,") {\r"]],"start1":13156,"start2":13156,"length1":383,"length2":79},{"diffs":[[0," {\r\n            "],[-1,"return;"],[1,"//render"],[0,"\r\n        }\r\n   "]],"start1":13232,"start2":13232,"length1":39,"length2":40},{"diffs":[[0,"ender\r\n        }"],[1,","],[0,"\r\n        \r\n    "]],"start1":13251,"start2":13251,"length1":32,"length2":33},{"diffs":[[0,"    },\r\n        "],[1,"[],"],[0,"\r\n        var in"]],"start1":13262,"start2":13262,"length1":32,"length2":35},{"diffs":[[0,"    "],[-1,"var indexOfEntity = engine.EntityUpdateList.indexOf(entityToRemove);\r\n        \r\n        if (indexOfEntity !== -1) {\r\n            engine.EntityUpdateList.splice(indexOfEntity, 1);\r\n        }\r\n        \r\n        delete engine.Entities[entityId]"],[1,"['CurrentPos', 'Speed', 'Heading']))"],[0,";\r\n    "],[-1,"}"],[0,"\r\n    "],[-1,"\r\n    this.Update = "],[1,"("],[0,"func"]],"start1":13287,"start2":13287,"length1":283,"length2":58},{"diffs":[[0,"  (function("],[-1,"gameTime"],[0,") {\r\n       "]],"start1":13338,"start2":13338,"length1":32,"length2":24},{"diffs":[[0,"var "],[-1,"i = 0;\r\n        for(i = 0; i < engine.EntityUpdateList.length; i++) {\r\n            engine.EntityUpdateList[i].Update(gameTime);\r\n        }\r\n    }\r\n    \r\n    this.GameStart = (new Date()).getMilliseconds();\r\n    this.LastUpdateTime = this.GameStart;\r\n    \r\n    this.FrameCountThisSecond = 0;\r\n    this.LastSecondTime = 0;\r\n    \r\n    this.IntervalUpdateFunc = "],[1,"typedYet = false;\r\n        $(document).ready("],[0,"function"],[1," "],[0,"() {"]],"start1":13363,"start2":13363,"length1":374,"length2":62},{"diffs":[[0,"    "],[-1,"var currentTime = (new Date()).getMilliseconds();\r\n        var updateDelta = currentTime - engine.LastUpdateTime;\r\n\r\n        \r\n        //TODO: HACK: This sometimes comes out as a value ~-361 which... is wrong.\r\n        //As far as I know, javascript isn't capable of time travel...\r\n        if (updateDelta < 0) {\r\n            updateDelta = engine.UpdateIntervalMilliseconds;\r\n        }\r\n        \r\n        engine.LastSecondTime += updateDelta;"],[1,"    $(window).keydown(function(args) {"],[0,"\r\n  "]],"start1":13431,"start2":13431,"length1":451,"length2":46},{"diffs":[[0,"rgs) {\r\n        "],[-1,"\r\n"],[0,"        if (engi"]],"start1":13467,"start2":13467,"length1":34,"length2":32},{"diffs":[[0,"if ("],[-1,"engine.LastSecondTime > 1000) {\r\n            engine.LastSecondTime -= 1000;\r\n"],[1,"typedYet) {\r\n            "],[0,"        "],[-1,"    "],[0,"$('"],[-1,"#"],[0,"di"],[-1,"agDiv').text(\"FPS: \" + engine.FrameCountThisSecond);\r\n            engine.FrameCountThisSecond = 0;\r\n        }\r\n        \r\n        engine.FrameCountThisSecond++;\r\n        \r\n        engine.Update(updateDelta);\r\n        \r\n        engine.LastUpdateTime = currentTime;\r\n    }\r\n    \r\n    this.StartUpdating = function() {\r\n        engine.StopUpdating();\r\n        \r\n        engine.UpdateIntervalKey = setInterval(engine.IntervalUpdateFunc, engine.UpdateIntervalMilliseconds);\r\n    }\r\n    \r\n    this.StopUpdating = function() {\r\n        if (typeof engine.UpdateIntervalKey !== 'undefined') {\r\n            clearInterval(engine.UpdateIntervalKey);\r\n            delete engine.UpdateIntervalKey;\r\n        }\r\n    }\r\n}\r\n\r\n$(function() {\r\n    var entitySystem = new JSEntitySystem(16);\r\n    \r\n    //TODO: This 'TestComponent' should be reworked into a 'FollowMouse' component that takes an element reference in its Datas.\r\n    entitySystem.RegisterComponent('FollowMouse',\r\n        new entitySystem.Component(function(entity, gameTime) {\r\n                            //assigned\r\n                            entity.Datas.ElementToMove.css('position', 'absolute');\r\n                            entity.Datas.ElementToMove.css('width','2em');\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //removed\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //update\r\n                            \r\n                            if (typeof entity.Datas.CurrentPos === 'undefined') {\r\n                                entity.Datas.CurrentPos = new V2();\r\n                                entity.Datas.ToMouse = new V2();\r\n                            }\r\n                            \r\n                            var div = entity.Datas.ElementToMove;\r\n                            var divPos = div.position();\r\n                            \r\n                            //A -> B :: B - A\r\n                            var currentPos = entity.Datas.CurrentPos.Init(divPos.left, divPos.top);\r\n                            var toMouse = entity.Datas.ToMouse.InitFromV2(entitySystem.MousePos)\r\n                                                              .Sub(currentPos);\r\n                            \r\n                            if (toMouse.Length() < 50) {\r\n                                return;\r\n                            }\r\n                            \r\n                            toMouse.Normalize()\r\n                                   .Multiply(entity.Datas.MovementSpeed * (gameTime / 1000) * 10);\r\n                            \r\n                            var rotation = Math.atan2(toMouse.Y, toMouse.X);\r\n                            \r\n                            toMouse.Add(currentPos);\r\n                            \r\n                            //div.css({ WebkitTransform: 'rotate(' + 0 + 'rad)'});\r\n                            div.css('left', toMouse.X);\r\n                            div.css('top', toMouse.Y);\r\n                            //div.text(toMouse.X + \" \" + toMouse.Y);\r\n                            entity.Datas.Rotation += 4;\r\n                            div.css({ WebkitTransform: 'rotate(' + rotation + 'rad)'});\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n           "],[1,"v[id=getsMoved]').text(function(index, text) {\r\n                        return text + String.fromCharCode(args.which);  \r\n                    });\r\n                } else {\r\n                    $('div[id=getsMoved]').text(function(index, text) {\r\n                        return String.fromCharCode(args.which);  \r\n                    });\r\n                    typedYet = true;\r\n                }\r\n"],[0,"    "]],"start1":13491,"start2":13491,"length1":3363,"length2":441},{"diffs":[[0,"            "],[-1," //render"],[0,"\r\n          "]],"start1":13932,"start2":13932,"length1":33,"length2":24},{"diffs":[[0,"    "],[-1,"\t\t\t}),\r\n                \t[],\r\n                    ['MovementSpeed', 'ElementToMove']);"],[1,"});\r\n        })"],[0,"\r\n    "],[-1,"\r\n"],[0,"    "],[-1,"(function() {"],[0,"\r\n  "]],"start1":13954,"start2":13954,"length1":119,"length2":33},{"diffs":[[0,"i < "],[-1,"25"],[1,"100"],[0,"; i+"]],"start1":14035,"start2":14035,"length1":10,"length2":11},{"diffs":[[0," {\r\n"],[-1,"                var newDiv = $('<div>hey guy</div>');\r\n"],[0,"    "]],"start1":14075,"start2":14075,"length1":63,"length2":8},{"diffs":[[0,".CreateEntity();"],[1,"\r\n            "],[0,"    \r\n          "]],"start1":14117,"start2":14117,"length1":32,"length2":46},{"diffs":[[0,"    "],[-1,"ent.Datas.MovementSpeed = i + 50"],[1,"var newDiv = $('<div id=\"getsMoved\"><img width=\"3\" height=\"3\" src=\"star.png\"></img></div>')"],[0,";\r\n "]],"start1":14165,"start2":14165,"length1":40,"length2":99},{"diffs":[[0,"              \r\n"],[1,"                ent.Datas.MovementSpeed = i + 100;\r\n                \r\n"],[0,"                "]],"start1":14354,"start2":14354,"length1":32,"length2":102},{"diffs":[[0,"\n        }\r\n    "],[-1,"})();\r\n"],[0,"    \r\n    entity"]],"start1":14567,"start2":14567,"length1":39,"length2":32},{"diffs":[[0,"    "],[-1,"entitySystem.StartUpdating();\r\n});/*\r\n  A simple entity system with an entity centric component / data model.\r\n  \r\n  TODO: \r\n    -Need to find a dependency injection system for components.\r\n    -Need to think through data factories, probably should something like:\r\n        JSEntitySystem.Datas holds a collection of primitive values, object values or functions.\r\n        When a Component gets added, the system should look at the Datas collection for the value it should provide.\r\n        If the system sees the Datas[\"requestedData\"] in question is a primitive or object, it simply copies that in.\r\n        If the system sees the Datas[\"requestedData\"] in question is a function however, it should call that function.\r\n        This adds the edge case of having to get around the need to put a function into Datas[\"requestedData\"],\r\n        this however can be surpassed by wrapping the function you would like in the Datas collection in another function:\r\n            Datas[\"requestedData\"] = function() { return function() { return \"ouch, syntax heavy :(\"; }};\r\n        I could make a factory function to act as a wrapper:\r\n            Datas[\"requestedData\"] = engine.DataFunction(function() { return \"slightly better? I don't know really.\" });\r\n        This could then be checked against by:\r\n            var isDataFunction = (Datas[\"requestedData\"].constructor === JSEntitySystem.DataFunction);\r\n        Then retrieved:\r\n            return Datas[\"requestedData\"].wrappedFunction;\r\n*/\r\nfunction JSEntitySystem(updateIntervalMilliseconds) {\r\n    /*\r\n      This is the next free Id ready to be assigned to an entity.\r\n    */\r\n    this.NextFreeId = 0;\r\n    \r\n    /*\r\n      The interval to use for the setInterval function.\r\n    */\r\n    this.UpdateIntervalMilliseconds = updateIntervalMilliseconds;\r\n    \r\n    /*\r\n      The variable used to hold the scope of the JSEntitySystem function.\r\n    */\r\n    var engine = this;\r\n    \r\n    this.MousePos = new V2();\r\n    \r\n    /*\r\n      The jQuery callback used for the mouse movement callback and grab the latest mouse coordinates.\r\n    */\r\n    $(document).ready(function() {\r\n       $(document).mousemove(function(e) {\r\n          engine.MousePos.X = e.pageX;\r\n          engine.MousePos.Y = e.pageY;\r\n       })}); \r\n    \r\n    /*\r\n    The component metadata collection.\r\n    keyed on the componentName, toLowered\r\n    Component[\"name\"] =    {\r\n        ComponentName : \"name\",\r\n    \tMethods : {\r\n    \t\tAssigned : method,\r\n    \t\tRemoved : method,\r\n    \t\tUpdate : method,\r\n    \t\tRender : method\r\n    \t},\r\n    \tRequiredComponents : array of strings,\r\n    \tRequiredData : array of data names\r\n    }\r\n    */\r\n    this.Components = { };\r\n    \r\n    /*\r\n      Datas is a map for holding data.\r\n    */\r\n    this.Datas = { };\r\n    \r\n    /*\r\n      Entities is a map for holding entities.\r\n    */\r\n    this.Entities = { };\r\n    \r\n    /*\r\n      EntityUpdateList is an array used to update the entities for the engine.\r\n    */    \r\n    this.EntityUpdateList = [];\r\n    \r\n    /*\r\n      The factory for the Component methods.\r\n    */\r\n    this.Component = function(assigned, removed, update, render) {\r\n    \tthis.Assigned = assigned;\r\n    \tthis.Removed = removed;\r\n    \tthis.Update = update;\r\n    \tthis.Render = render;\r\n    }\r\n    \r\n    /*\r\n      Registers a Component by name in the Components map.\r\n    */\r\n    this.RegisterComponent = function(componentName, component, requiredComponents, requiredData) {\r\n    \tengine.Components[componentName] = {\r\n    \t\tComponentName : componentName,\r\n    \t\tMethods : component,\r\n    \t\tRequiredComponents : requiredComponents,\r\n    \t\tRequiredData : requiredData\r\n    \t};\r\n    }\r\n    \r\n    /*\r\n      Adds a component to the entity passed in.\r\n    */\r\n    this.AddComponentWithRequirements = function(entity, componentName) {\r\n    \tvar component = engine.Components[componentName];\r\n    \tvar requiredData = component.RequiredData;\r\n    \tvar requiredComponents = component.RequiredComponents;\r\n    \t\r\n    \tif (!(componentName in entity.Components)) {\r\n    \t\tentity.Components[componentName] = engine.Components[componentName];\r\n    \t\tentity.UpdateComponents.push(engine.Components[componentName]);\r\n    \t}\r\n    \t\r\n    \tfor (var key in component.RequiredComponents) {\r\n    \t\tif (typeof key === 'String' && !(key in entity.Components)) {\r\n    \t\t\tengine.AddComponentWithRequirements(entity, key);\r\n    \t\t}\r\n    \t}\r\n    \t\r\n    \tfor (var key in component.RequiredData) {\r\n    \t\tif (typeof key === 'String' && !(key in entity.Datas)) {\r\n    \t\t\tentity.Datas[key] = component.RequiredData[key];\r\n    \t\t}\r\n    \t}\r\n    }\r\n    \r\n    /*\r\n      The Entity factory method used by the engine to make new entities.\r\n    */\r\n    this.Entity = function(idToUse) {\r\n        var self = this;\r\n        \r\n        if (typeof idToUse == 'number') {\r\n            if (engine.Entities.Any(function(ent) { ent.Id == idToUse })) {\r\n                throw new Error(\"Tried to create an entity with an explicity Id that already existed! Entity in question: \" + idToUse);\r\n                return;\r\n            }\r\n            \r\n            this.Id = idToUse;\r\n        } else {\r\n            engine.NextFreeId = engine.NextFreeId + 1;\r\n            this.Id = engine.NextFreeId;    \r\n        }\r\n        \r\n    \tthis.Datas = {\r\n    \t};\r\n    \tthis.Components = {\r\n    \t};\r\n        \r\n    \tthis.UpdateComponents = [];\r\n    \t\r\n        //Adds a component and any dependencies.\r\n        this.AddComponent = function(componentName) {\r\n    \t\tif (!(componentName in self.Components)) {\r\n    \t\t\t//recursively add components here.\r\n    \t\t\t//make sure to add each components required data here as well.\r\n    \t\t\tengine.AddComponentWithRequirements(self, componentName);\r\n    \t\t}\r\n    \t};\r\n        \r\n        this.RemoveComponent = function(componentName) {\r\n            if (componentName in self.Components) {\r\n                self.Components[componentName].Methods.RemoveComponent(self, engine.LastUpdateTime);\r\n                delete self.Components[componentName];\r\n            }\r\n        };\r\n    \t\r\n    \tthis.Update = function(gameTime) {\r\n    \t\tvar i = 0;\r\n    \t\tfor (i = 0; i < self.UpdateComponents.length; i++) {\r\n    \t\t\tself.UpdateComponents[i].Methods.Update(self, gameTime);\r\n    \t\t}\r\n    \t};\r\n    \t\r\n    \tengine.Entities[this.Id] = this;\r\n        engine.EntityUpdateList.push(this);\r\n    }\r\n    \r\n    this.CreateEntity = function(idToUse) {\r\n        return new engine.Entity(idToUse);\r\n    }\r\n    \r\n    this.RemoveEntity = function(entityId) {\r\n        var entityToRemove = engine.Entities[entityId];\r\n        \r\n        if (entityToRemove === null) {\r\n            return;\r\n        }\r\n        \r\n        var indexOfEntity = engine.EntityUpdateList.indexOf(entityToRemove);\r\n        \r\n        if (indexOfEntity !== -1) {\r\n            engine.EntityUpdateList.splice(indexOfEntity, 1);\r\n        }\r\n        \r\n        delete engine.Entities[entityId];\r\n    }\r\n    \r\n    this.Update = function(gameTime) {\r\n        var i = 0;\r\n        for(i = 0; i < engine.EntityUpdateList.length; i++) {\r\n            engine.EntityUpdateList[i].Update(gameTime);\r\n        }\r\n    }\r\n    \r\n    this.GameStart = (new Date()).getMilliseconds();\r\n    this.LastUpdateTime = this.GameStart;\r\n    \r\n    this.IntervalUpdateFunc = function() {\r\n        var currentTime = (new Date()).getMilliseconds();\r\n        \r\n        engine.Update(currentTime - engine.LastUpdateTime);\r\n        \r\n        engine.LastUpdateTime = currentTime;\r\n    }\r\n    \r\n    this.StartUpdating = function() {\r\n        engine.StopUpdating();\r\n        \r\n        engine.UpdateIntervalKey = setInterval(engine.IntervalUpdateFunc, engine.UpdateIntervalMilliseconds);\r\n    }\r\n    \r\n    this.StopUpdating = function() {\r\n        if (typeof engine.UpdateIntervalKey !== 'undefined') {\r\n            clearInterval(engine.UpdateIntervalKey);\r\n            delete engine.UpdateIntervalKey;\r\n        }\r\n    }\r\n}\r\n\r\n$(function() {\r\n    var entitySystem = new JSEntitySystem(62);\r\n    \r\n    //TODO: This 'TestComponent' should be reworked into a 'FollowMouse' component that takes an element reference in its Datas.\r\n    entitySystem.RegisterComponent('TestComponent',\r\n        new entitySystem.Component(function(entity, gameTime) {\r\n                            //assigned\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //removed\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //update\r\n                            if (typeof entity.counter === 'undefined') {\r\n                                entity.counter = 0;\r\n                            }\r\n                            \r\n                            entity.counter++;\r\n                            \r\n                            var div = $('#jsDiv' + entity.Datas.div);\r\n                            var divPos = div.position();\r\n                            \r\n                            //A -> B :: B - A\r\n                            var currentPos = new V2(divPos.left, divPos.top);\r\n                            \r\n                            var toMouse = entitySystem.MousePos\r\n                                                      .Sub(currentPos)\r\n                                                      .Normalize()\r\n                                                      .Multiply(entity.Datas.distanceFromUpperLeft);\r\n                            \r\n                            toMouse = toMouse.Add(currentPos);\r\n                            div.css('left', toMouse.X);\r\n                            div.css('top', toMouse.Y);\r\n                            \r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //render\r\n            \t\t\t}),\r\n                \t[],\r\n                    []);\r\n    \r\n    (function() {\r\n        var i = 0;\r\n        \r\n        for (i = 0; i < 100; i++) {\r\n            (function() {\r\n                var ent = entitySystem.CreateEntity();    \r\n                ent.Datas.distanceFromUpperLeft = (i + 1) / 5;\r\n                \r\n                $('body').append($('<div id=\"jsDiv' + i + '\">hey guy</div>'));\r\n                \r\n                $('#jsDiv' + i).css('position', 'absolute');\r\n                ent.Datas.div = i;\r\n                \r\n                ent.AddComponent('TestComponent');\r\n            })();\r\n        }"],[1,"    var earth = entitySystem.CreateEntity();\r\n\r\n        var newDiv = $('<div id=\"getsMoved\"><img width=\"400\" height=\"400\" src=\"http://upload.wikimedia.org/wikipedia/commons/2/2c/Rotating_earth_%28large%29.gif\"></img></div>');\r\n        earth.Datas.ElementToMove = newDiv.appendTo($('body'));\r\n        earth.AddComponent('RotateClockwise');"],[0,"\r\n  "]],"start1":14589,"start2":14589,"length1":10270,"length2":346}]],"length":14988,"saved":false}
{"ts":1345167408763,"patch":[[{"diffs":[[0,"      //"],[-1,"/"],[0,"entity.D"]],"start1":11874,"start2":11874,"length1":17,"length2":16}]],"length":14987,"saved":false}
{"ts":1345167440395,"patch":[[{"diffs":[[0,"0; i < 1"],[1,"3"],[0,"00; i++)"]],"start1":14031,"start2":14031,"length1":16,"length2":17}]],"length":14988,"saved":false}
{"ts":1345167441693,"patch":[[{"diffs":[[0," 0; i < "],[-1,"1"],[0,"300; i++"]],"start1":14030,"start2":14030,"length1":17,"length2":16}]],"length":14987,"saved":false}
{"ts":1345167459213,"patch":[[{"diffs":[[0," 0; i < "],[-1,"3"],[1,"2"],[0,"00; i++)"]],"start1":14030,"start2":14030,"length1":17,"length2":17}]],"length":14987,"saved":false}
{"ts":1345167473732,"patch":[[{"diffs":[[0," = i + 1"],[-1,"00"],[0,";\r\n     "]],"start1":14408,"start2":14408,"length1":18,"length2":16}]],"length":14985,"saved":false}
{"ts":1345167534381,"patch":[[{"diffs":[[0,"                "],[1,"//"],[0,"entity.Datas.Ele"]],"start1":11942,"start2":11942,"length1":32,"length2":34}]],"length":14987,"saved":false}
{"contributors":[],"silentsave":true,"ts":1345515017657,"patch":[[{"diffs":[[0,"    "],[-1,"this.MousePos = new V2()"],[1,"/*\r\n      The MousePos is the current V2 of the mouse.\r\n    */\r\n    this.MousePos = new V2();\r\n    \r\n    /*\r\n      Currently, the engine uses HTML elements to render, so we don't really need this call to be made.\r\n      When we switch over to canvas rendering, this should be switched to true, \r\n      and really\r\n      TODO: Elements should have individual ShouldRender bools.\r\n    */\r\n    this.ShouldRender = false"],[0,";\r\n "]],"start1":1893,"start2":1893,"length1":32,"length2":424},{"diffs":[[0," \t\r\n    "],[-1,"\tfor (var key in"],[1,"    var i = 0;\r\n    \tfor (; i <"],[0," compone"]],"start1":4419,"start2":4419,"length1":32,"length2":47},{"diffs":[[0,"quiredComponents"],[1,".length; i++"],[0,") {\r\n    \t\tif (t"]],"start1":4471,"start2":4471,"length1":32,"length2":44},{"diffs":[[0,"if ("],[-1,"typeof key === 'String' && !(key"],[1,"!(component.RequiredComponents[i]"],[0," in "]],"start1":4510,"start2":4510,"length1":40,"length2":41},{"diffs":[[0,"entity, "],[-1,"key"],[1,"component.RequiredComponents[i]"],[0,");\r\n    "]],"start1":4617,"start2":4617,"length1":19,"length2":47},{"diffs":[[0,"    "],[-1,"\tfor (var key in"],[1,"    i = 0;\r\n        for (; i <"],[0," com"]],"start1":4684,"start2":4684,"length1":24,"length2":38},{"diffs":[[0,"ent.RequiredData"],[1,".length; i++"],[0,") {\r\n    \t\tif (t"]],"start1":4725,"start2":4725,"length1":32,"length2":44},{"diffs":[[0,"if ("],[-1,"typeof key === 'String' && !(key"],[1,"!(component.RequiredData[i]"],[0," in "]],"start1":4764,"start2":4764,"length1":40,"length2":35},{"diffs":[[0,"ta: \" + "],[-1,"key"],[1,"component.RequiredData[i]"],[0," + \", re"]],"start1":4953,"start2":4953,"length1":19,"length2":41},{"diffs":[[0,"}\r\n    \t};\r\n"],[1,"        \r\n        this.Render = function(gameTime) {\r\n            var i = 0;\r\n            for (i = 0; i < self.UpdateComponents.length; i++) {\r\n                self.UpdateComponents[i].Methods.Render(self, gameTime);\r\n            }\r\n        }\r\n"],[0,"    \t\r\n    \t"]],"start1":6788,"start2":6788,"length1":24,"length2":268},{"diffs":[[0,"\n        }\r\n"],[1,"        \r\n        if (!engine.ShouldRender) {\r\n            return;\r\n        }\r\n        \r\n        for (i = 0; i < engine.EntityUpdateList.length; i++) {\r\n            engine.EntityUpdateList[i].Render(gameTime);\r\n        }\r\n"],[0,"    }\r\n    \r"]],"start1":7890,"start2":7890,"length1":24,"length2":246},{"diffs":[[0,"\n    }\r\n"],[1,"    \r\n    /*\r\n      Data should be passed in as json objects.\r\n    */\r\n    this.AddData = function(dataName, data) {\r\n        engine.Datas[dataName] = data;\r\n    }\r\n"],[0,"}\r\n\r\n$(f"]],"start1":9620,"start2":9620,"length1":16,"length2":181},{"diffs":[[0,"tem("],[-1,"16"],[1,"32"],[0,");\r\n"]],"start1":9852,"start2":9852,"length1":10,"length2":10},{"diffs":[[0,");\r\n        "],[-1,"\t\t\t\t},\r\n"],[0,"            "]],"start1":10311,"start2":10311,"length1":32,"length2":24},{"diffs":[[0,"    "],[-1,"\t\t\tfunction(entity, gameTime) {"],[1,"        "],[0,"\r\n  "]],"start1":10331,"start2":10331,"length1":39,"length2":16},{"diffs":[[0,"              //"],[-1,"remov"],[1,"if the current position is defin"],[0,"ed\r\n        \t\t\t\t"]],"start1":10359,"start2":10359,"length1":37,"length2":64},{"diffs":[[0,"ed\r\n        "],[-1,"\t\t\t\t},\r\n"],[1,"        "],[0,"            "]],"start1":10407,"start2":10407,"length1":32,"length2":32},{"diffs":[[0,"    "],[-1,"\t\t\tfunction(entity, gameTime) {\r\n                            //update\r\n                        "],[1,"if (typeof entity.Datas.Position !== 'undefined') {\r\n                                //and if the original position is undefined, then we can copy over this current position\r\n"],[0,"    "],[-1,"\r\n"],[0,"    "]],"start1":10435,"start2":10435,"length1":109,"length2":187},{"diffs":[[0,"ntity.Datas."],[-1,"Current"],[1,"Original"],[0,"Pos === 'und"]],"start1":10658,"start2":10658,"length1":31,"length2":32},{"diffs":[[0,"'undefined') {\r\n"],[1,"    "],[0,"                "]],"start1":10686,"start2":10686,"length1":32,"length2":36},{"diffs":[[0,"tas."],[-1,"CurrentPos = new V2"],[1,"OriginalPos = entity.Datas.Position.Copy"],[0,"();\r\n"],[1,"    "],[0,"    "]],"start1":10747,"start2":10747,"length1":32,"length2":57},{"diffs":[[0,"tas."],[-1,"ToMouse = new V2()"],[1,"OriginalSpeed = entity.Datas.Speed"],[0,";\r\n "]],"start1":10841,"start2":10841,"length1":26,"length2":42},{"diffs":[[0,"                "],[1,"}"],[0,"\r\n     "],[1,"    "],[1,"                   }\r\n"],[0,"                "]],"start1":10898,"start2":10898,"length1":39,"length2":66},{"diffs":[[0,"    "],[-1,"entity.Datas.Counter = 0"],[1," \r\n                            if (typeof entity.Datas.Position === 'undefined') {\r\n                                entity.Datas.Position = new V2()"],[0,";\r\n "]],"start1":10971,"start2":10971,"length1":32,"length2":156},{"diffs":[[0,"                "],[1,"if (typeof "],[0,"entity.Datas.Cou"]],"start1":11199,"start2":11199,"length1":32,"length2":43},{"diffs":[[0,"tas."],[-1,"Counter += 0.1;"],[1,"ToMouse === 'undefined') {"],[0,"\r\n  "]],"start1":11235,"start2":11235,"length1":23,"length2":34},{"diffs":[[0,"    "],[-1,"\r\n                            if (entity.Datas.Counter > 1000) {\r\n                                entity.Datas.Counter = 0;"],[1,"    entity.Datas.ToMouse = new V2();\r\n                            }\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //removed\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {"],[0,"\r\n  "]],"start1":11291,"start2":11291,"length1":131,"length2":236},{"diffs":[[0,"                "],[-1,"}"],[1,"//update"],[0,"\r\n              "]],"start1":11537,"start2":11537,"length1":33,"length2":40},{"diffs":[[0,"y.Datas."],[-1,"CurrentPos"],[1,"Position"],[0,".Init(di"]],"start1":11845,"start2":11845,"length1":26,"length2":24},{"diffs":[[0,"        "],[-1,"if ("],[1,"var lengthToMouse = "],[0,"toMouse."]],"start1":12145,"start2":12145,"length1":20,"length2":36},{"diffs":[[0,"th()"],[-1," < 20) {\r\n"],[1,";\r\n       "],[0,"    "]],"start1":12185,"start2":12185,"length1":18,"length2":18},{"diffs":[[0,"                "],[1,"\r\n          "],[0,"           speed"]],"start1":12204,"start2":12204,"length1":32,"length2":44},{"diffs":[[0,"    "],[-1,"speedModifier = 0.1"],[1,"       var sensingDistance = 400"],[0,";\r\n "]],"start1":12239,"start2":12239,"length1":27,"length2":40},{"diffs":[[0,"                "],[-1,"}"],[0,"\r\n              "]],"start1":12290,"start2":12290,"length1":33,"length2":32},{"diffs":[[0,"                "],[1,"if (lengthToMouse < 20) {"],[0,"\r\n              "]],"start1":12320,"start2":12320,"length1":32,"length2":57},{"diffs":[[0,"    "],[-1,"toMouse.Normalize()\r\n                                   .Multiply(entity.Datas.MovementSpeed * (gameTime / 1000) * 5);// * (5 * (Math.sin(entity.Datas.Counter) + 0.7)) * speedModifier);\r\n                            \r\n                            var rotation = Math.atan2(toMouse.Y, toMouse.X);\r\n                            \r\n                            toMouse.Add(current"],[1,"    entity.Datas.Speed = 0.1;\r\n                            } else if (lengthToMouse < sensingDistance) {\r\n                                entity.Datas.Speed = entity.Datas.OriginalSpeed * (lengthToMouse / sensingDistance) & ;\r\n                            } else {\r\n                                if (typeof entity.Datas.OriginalPos !== 'undefined') {\r\n                                    entity.Datas.Speed = entity.Datas.OriginalSpeed;\r\n                                    toMouse = entity.Datas.ToMouse.InitFromV2(entity.Datas.OriginalPos)\r\n                                                                  .Sub(currentPos);\r\n                                                                  \r\n                                    if (toMouse.Length() < 40) {\r\n                                        entity.Datas.Speed = 0;\r\n                                        entity.Datas.Position.InitFromV2(entity.Datas.Original"],[0,"Pos)"]],"start1":12387,"start2":12387,"length1":380,"length2":930},{"diffs":[[0,"                "],[1,"            return;"],[0,"\r\n              "]],"start1":13332,"start2":13332,"length1":32,"length2":51},{"diffs":[[0,"    "],[-1,"div.css('left', toMouse.X);\r\n                            div.css('top', toMouse.Y"],[1,"        }\r\n                                } else {\r\n                                    entity.Datas.Speed = 0;\r\n                                }\r\n                            }\r\n                            \r\n                            //toMouse.Normalize()\r\n                            //       .Multiply(entity.Datas.Speed * (gameTime / 1000) * 5 * speedModifier);// * (5 * (Math.sin(entity.Datas.Counter) + 0.7))"],[0,");\r\n"]],"start1":13393,"start2":13393,"length1":89,"length2":425},{"diffs":[[0,"ion "],[-1,"+"],[0,"= "],[-1,"4;"],[1,"Math.atan2(toMouse.Y, toMouse.X);\r\n                            //var rotation = Math.atan2(toMouse.Y, toMouse.X);\r\n                            \r\n                            //toMouse.Add(currentPos);\r\n                            \r\n                            "],[0,"\r\n  "]],"start1":13864,"start2":13864,"length1":13,"length2":269},{"diffs":[[0,"              \t["],[1,"'MovementUpdater'"],[0,"],\r\n            "]],"start1":14343,"start2":14343,"length1":32,"length2":49},{"diffs":[[0,"      ['"],[-1,"Movement"],[0,"Speed', "]],"start1":14394,"start2":14394,"length1":24,"length2":16},{"diffs":[[0,"ve.css('width','"],[-1,"2"],[1,"0"],[0,"em');\r\n         "]],"start1":14666,"start2":14666,"length1":33,"length2":33},{"diffs":[[0,"on += 10"],[-1,""],[0,""],[1,"0"],[0," * (game"]],"start1":15306,"start2":15306,"length1":16,"length2":17},{"diffs":[[0,"      //update\r\n"],[1,"            \r\n            var rot = entity.Datas.Rotation;\r\n\r\n            entity.Datas.Heading.Init(Math.cos(rot), Math.sin(rot)).Normalize();\r\n\r\n            entity.Datas.Position.Add(entity.Datas.Heading.Multiply(entity.Datas.Speed).Multiply(gameTime / 1000));\r\n            \r\n            var div = entity.Datas.ElementToMove;\r\n            div.css('left', entity.Datas.Position.X);\r\n            div.css('top', entity.Datas.Position.Y);\r\n"],[0,"        },\r\n    "]],"start1":15932,"start2":15932,"length1":32,"length2":469},{"diffs":[[0,"ender\r\n        }"],[1,")"],[0,",\r\n        [],\r\n"]],"start1":16450,"start2":16450,"length1":32,"length2":33},{"diffs":[[0,"  ['"],[-1,"CurrentPos"],[1,"Position"],[0,"', '"]],"start1":16489,"start2":16489,"length1":18,"length2":16},{"diffs":[[0,"Heading'"],[1,", 'ElementToMove'"],[0,"]"],[-1,")"],[0,");\r\n    "]],"start1":16514,"start2":16514,"length1":18,"length2":34},{"diffs":[[0,"var "],[-1,"i = 0;\r\n        \r\n        for (i = 0; i < 200; i++) {"],[1,"docHeight = $(document).height();\r\n        var docWidth = $(document).width();\r\n        var bodyElem = $('body');"],[0,"\r\n  "]],"start1":17207,"start2":17207,"length1":61,"length2":121},{"diffs":[[0,"        "],[-1," "],[-1,"  "],[1,"var createNewElement ="],[0," (functi"]],"start1":17326,"start2":17326,"length1":19,"length2":38},{"diffs":[[0,"ent = (function("],[1,"x, y"],[0,") {\r\n           "]],"start1":17351,"start2":17351,"length1":32,"length2":36},{"diffs":[[0,"iv.appendTo("],[-1,"$('"],[0,"body"],[-1,"')"],[1,"Elem"],[0,");\r\n        "]],"start1":17624,"start2":17624,"length1":33,"length2":32},{"diffs":[[0,"tas."],[-1,"MovementSpeed = i + 1"],[1,"Speed = 1000;//i + 1;\r\n                ent.Datas.Position = new V2(x, y);\r\n                \r\n                newDiv.css('left', ent.Datas.Position.X);\r\n                newDiv.css('top', ent.Datas.Position.Y);\r\n                \r\n                ent.Datas.Heading = new V2()"],[0,";\r\n "]],"start1":17688,"start2":17688,"length1":29,"length2":280},{"diffs":[[0,"          })"],[-1,"()"],[0,";\r\n        }"]],"start1":18096,"start2":18096,"length1":26,"length2":24},{"diffs":[[0,"    "],[-1,"}\r\n        \r\n        var earth = entitySystem.CreateEntity();\r\n\r\n        var newDiv = $('<div id=\"getsMoved\"><img width=\"400\" height=\"400\" src=\"http://upload.wikimedia.org/wikipedia/commons/2/2c/Rotating_earth_%28large%29.gif\"></img></div>');\r\n        earth.Datas.E"],[1,"var i = 0;\r\n        for (i = 0; i < 0; i++) {\r\n            createNewElement(RandomFromTo(0, docWidth), RandomFromTo(0, docHeight));\r\n        }\r\n        \r\n        var elementsToMake = 100;\r\n        for (i = 0; i < elementsToMake; i++) {\r\n            createNewElement(docWidth / 2, docHeight * (i / elementsToMake));\r\n        }\r\n        \r\n        for (i = 0; i < e"],[0,"lement"],[1,"s"],[0,"ToM"],[-1,"ove = newDiv.appendTo($('body'));\r\n        earth.AddComponent('RotateClockwise');"],[1,"ake; i++) {\r\n            createNewElement(docWidth * (i / elementsToMake), docHeight / 2);\r\n        }"],[0,"\r\n  "]],"start1":18115,"start2":18115,"length1":363,"length2":481}]],"length":18649,"saved":false}
{"ts":1345515018526,"patch":[[{"diffs":[[0,"ce) "],[-1,"& "],[1,"-"],[0,";\r\n "]],"start1":12609,"start2":12609,"length1":10,"length2":9}]],"length":18648,"saved":false}
{"ts":1345515019478,"patch":[[{"diffs":[[0,"tance) -"],[1," "],[0,";\r\n     "]],"start1":12606,"start2":12606,"length1":16,"length2":17}]],"length":18649,"saved":false}
{"ts":1345515021413,"patch":[[{"diffs":[[0,"ance) - "],[1,"0.5"],[0,";\r\n     "]],"start1":12607,"start2":12607,"length1":16,"length2":19}]],"length":18652,"saved":false}
{"ts":1345515022493,"patch":[[{"diffs":[[0,"e) - 0.5"],[1,")"],[0,";\r\n     "]],"start1":12610,"start2":12610,"length1":16,"length2":17}]],"length":18653,"saved":false}
{"ts":1345515025785,"patch":[[{"diffs":[[0,"Speed * "],[1,"()"],[0,"(lengthT"]],"start1":12571,"start2":12571,"length1":16,"length2":18}]],"length":18655,"saved":false}
{"ts":1345515027774,"patch":[[{"diffs":[[0,"peed * ("],[-1,")"],[0,"(lengthT"]],"start1":12572,"start2":12572,"length1":17,"length2":16}]],"length":18654,"saved":false}
{"ts":1345515091336,"patch":[[{"diffs":[[0," 0; i < "],[1,"10"],[0,"0; i++) "]],"start1":18152,"start2":18152,"length1":16,"length2":18}]],"length":18656,"saved":false}
{"ts":1345515116667,"patch":[[{"diffs":[[0,"oMake = "],[-1,"10"],[0,"0;\r\n    "]],"start1":18301,"start2":18301,"length1":18,"length2":16}]],"length":18654,"saved":false}
{"ts":1345515118546,"patch":[[{"diffs":[[0," 0; i < "],[-1,"1"],[1,"3"],[0,"00; i++)"]],"start1":18152,"start2":18152,"length1":17,"length2":17}]],"length":18654,"saved":false}
{"ts":1345515254845,"patch":[[{"diffs":[[0,"ntsToMake = "],[1,"5"],[0,"0;\r\n        "]],"start1":18297,"start2":18297,"length1":24,"length2":25}]],"length":18655,"saved":false}
{"ts":1345515276672,"patch":[[{"diffs":[[0,"i < "],[-1,"30"],[0,"0; i"]],"start1":18156,"start2":18156,"length1":10,"length2":8}]],"length":18653,"saved":false}
{"ts":1345515279511,"patch":[[{"diffs":[[0,"= 0; i <"],[1,"1"],[0," 0; i++)"]],"start1":18151,"start2":18151,"length1":16,"length2":17}]],"length":18654,"saved":false}
{"ts":1345515280673,"patch":[[{"diffs":[[0,"= 0; i <"],[-1,"1"],[0," 0; i++)"]],"start1":18151,"start2":18151,"length1":17,"length2":16}]],"length":18653,"saved":false}
{"ts":1345515281533,"patch":[[{"diffs":[[0," 0; i < "],[1,"1"],[0,"0; i++) "]],"start1":18152,"start2":18152,"length1":16,"length2":17}]],"length":18654,"saved":false}
{"ts":1345515284543,"patch":[[{"diffs":[[0,"ake = 50"],[1,"0"],[0,";\r\n     "]],"start1":18302,"start2":18302,"length1":16,"length2":17}]],"length":18655,"saved":false}
{"ts":1345515303961,"patch":[[{"diffs":[[0,"oMake = "],[-1,"5"],[1,"2"],[0,"00;\r\n   "]],"start1":18300,"start2":18300,"length1":17,"length2":17}]],"length":18655,"saved":false}
{"ts":1345515321132,"patch":[[{"diffs":[[0,"tem("],[-1,"32"],[1,"16"],[0,");\r\n"]],"start1":9852,"start2":9852,"length1":10,"length2":10}]],"length":18655,"saved":false}
{"ts":1345515370704,"patch":[[{"diffs":[[0,"oMake = "],[-1,"2"],[1,"1"],[0,"00;\r\n   "]],"start1":18300,"start2":18300,"length1":17,"length2":17}]],"length":18655,"saved":false}
{"ts":1345515899357,"patch":[[{"diffs":[[0,"ake = 100;\r\n"],[1,"        \r\n        \r\n"],[0,"        for "]],"start1":18302,"start2":18302,"length1":24,"length2":44}]],"length":18675,"saved":false}
{"ts":1345515900285,"patch":[[{"diffs":[[0,"      \r\n        "],[1,"//"],[0,"\r\n        for (i"]],"start1":18316,"start2":18316,"length1":32,"length2":34}]],"length":18677,"saved":false}
{"ts":1345515902784,"patch":[[{"diffs":[[0,"= 100;\r\n"],[-1,"        \r\n        //"],[0,"\r\n      "]],"start1":18306,"start2":18306,"length1":36,"length2":16}]],"length":18657,"saved":false}
{"ts":1345515903949,"patch":[[{"diffs":[[0,"= 100;\r\n"],[-1,"\r\n"],[0,"        "]],"start1":18306,"start2":18306,"length1":18,"length2":16}]],"length":18655,"saved":false}
{"ts":1345515905859,"patch":[[{"diffs":[[0,"    var i = 0;\r\n"],[1,"        \r\n        /\r\n"],[0,"        for (i ="]],"start1":18120,"start2":18120,"length1":32,"length2":53}]],"length":18676,"saved":false}
{"ts":1345515910753,"patch":[[{"diffs":[[0,"       /"],[1,"/random elements to make."],[0,"\r\n      "]],"start1":18147,"start2":18147,"length1":16,"length2":41}]],"length":18701,"saved":false}
{"contributors":[],"silentsave":true,"ts":1345558646054,"patch":[[{"diffs":[[0,"iseconds"],[-1,""],[0,""],[1,", canvasContext, fillColor"],[0,") {\r\n   "]],"start1":1498,"start2":1498,"length1":16,"length2":42},{"diffs":[[0,"ender = "],[-1,"fals"],[1,"tru"],[0,"e;\r\n    "]],"start1":2326,"start2":2326,"length1":20,"length2":19},{"diffs":[[0,"  */\r\n    $("],[-1,"document"],[1,"\"#myCanvas\""],[0,").ready(func"]],"start1":2460,"start2":2460,"length1":32,"length2":35},{"diffs":[[0,"      $("],[-1,"document"],[1,"\"#myCanvas\""],[0,").mousem"]],"start1":2506,"start2":2506,"length1":24,"length2":27},{"diffs":[[0,"   }\r\n        \r\n"],[1,"        var docHeight = $(document).height();\r\n        var docWidth = $(document).width();\r\n        canvasContext.fillStyle = fillColor;\r\n        canvasContext.fillRect(0,0,docWidth,docHeight);\r\n        \r\n"],[0,"        for (i ="]],"start1":8006,"start2":8006,"length1":32,"length2":237},{"diffs":[[0,"nction() {\r\n"],[1,"    var canvasElement = $(\"#myCanvas\");\r\n    var canvasContext = canvasElement[0].getContext(\"2d\");\r\n"],[0,"    var enti"]],"start1":10038,"start2":10038,"length1":24,"length2":125},{"diffs":[[0,"ystem(16"],[1,", canvasContext, \"#000000\""],[0,");\r\n    "]],"start1":10187,"start2":10187,"length1":16,"length2":42},{"diffs":[[0,"                "],[1,"\r\n                            if (typeof entity.Datas.ElementToMove !== 'undefined') {\r\n                                "],[0,"entity.Datas.Ele"]],"start1":10529,"start2":10529,"length1":32,"length2":152},{"diffs":[[0,"bsolute');\r\n"],[1,"    "],[0,"            "]],"start1":10710,"start2":10710,"length1":24,"length2":28},{"diffs":[[0,"h','2em');\r\n"],[1,"                            }\r\n"],[0,"            "]],"start1":10790,"start2":10790,"length1":24,"length2":55},{"diffs":[[0,"                "],[1,"//"],[0,"var div = entity"]],"start1":12123,"start2":12123,"length1":32,"length2":34},{"diffs":[[0,"            "],[1,"//"],[0,"var divPos ="]],"start1":12196,"start2":12196,"length1":24,"length2":26},{"diffs":[[0,"tas.Position"],[1,";//"],[0,".Init(divPos"]],"start1":12371,"start2":12371,"length1":24,"length2":27},{"diffs":[[0,"['Speed'"],[-1,", 'ElementToMove'"],[0,""],[1,""],[0,"]);\r\n   "]],"start1":14930,"start2":14930,"length1":33,"length2":16},{"diffs":[[0,"              \r\n"],[1,"                            if (typeof entity.Datas.ElementToMove !== 'undefined') {\r\n    "],[0,"                "]],"start1":15865,"start2":15865,"length1":32,"length2":122},{"diffs":[[0,"tas.Rotation);\r\n"],[1,"                            }\r\n"],[0,"        \t\t\t\t},\r\n"]],"start1":16042,"start2":16042,"length1":32,"length2":63},{"diffs":[[0,"       ["],[-1,"'ElementToMove'"],[0,""],[1,""],[0,"]);\r\n   "]],"start1":16243,"start2":16243,"length1":31,"length2":16},{"diffs":[[0,"\r\n            \r\n"],[1,"            if (typeof entity.Datas.ElementToMove !== 'undefined') {\r\n    "],[0,"            var "]],"start1":16828,"start2":16828,"length1":32,"length2":106},{"diffs":[[0,"e;\r\n            "],[1,"  "],[1,"  "],[0,"div.css('left', "]],"start1":16965,"start2":16965,"length1":32,"length2":36},{"diffs":[[0,");\r\n            "],[1,"    "],[0,"div.css('top', e"]],"start1":17024,"start2":17024,"length1":32,"length2":36},{"diffs":[[0,"s.Position.Y);\r\n"],[1,"            }\r\n"],[0,"        },\r\n    "]],"start1":17070,"start2":17070,"length1":32,"length2":47},{"diffs":[[0,"ing'"],[-1,", 'ElementToMove"],[1,"]);\r\n        \r\n    var toRadians = Math.PI/180;\r\n    entitySystem.RegisterComponent('ImageCanvasRenderer', \r\n        new entitySystem.Component(function(entity, gameTime) {\r\n            //assigned\r\n        },\r\n        function(entity, gameTime) {\r\n            //removed\r\n        },\r\n        function(entity, gameTime) {\r\n            //update\r\n        },\r\n        function(entity, gameTime) {\r\n            //render\r\n            \r\n            var context = entity.Datas.ContextToRenderOn;\r\n            \r\n            context.save();\r\n \r\n        \tcontext.translate(entity.Datas.Position.X, entity.Datas.Position.Y);\r\n         \r\n        \tcontext.rotate(entity.Datas.Position.Rotation);\r\n         \r\n        \tcontext.drawImage(entity.Datas.ImageToRender, -(entity.Datas.ImageToRender.width/2), -(entity.Datas.ImageToRender.height/2));\r\n            \r\n            context.restore();\r\n        }),\r\n        [],\r\n        ['Position', 'Rotation', 'ImageToRender', 'ContextToRenderOn"],[0,"']);"]],"start1":17234,"start2":17234,"length1":24,"length2":977},{"diffs":[[0,"      })"],[-1,""],[0,""],[1,";\r\n        "],[0,"\r\n      "]],"start1":18848,"start2":18848,"length1":16,"length2":27},{"diffs":[[0,"    "],[-1,"var bodyElem = $('body');"],[1,"\r\n        canvasElement[0].width = $(window).width();\r\n        canvasElement[0].height = $(window).height();\r\n        \r\n        var bodyElem = $('body');\r\n        var image = new Image();\r\n        image.src = \"star.png\";\r\n        "],[0,"\r\n  "]],"start1":18975,"start2":18975,"length1":33,"length2":238},{"diffs":[[0,"            "],[1,"//"],[0,"var newDiv ="]],"start1":19339,"start2":19339,"length1":24,"length2":26},{"diffs":[[0,"                "],[1,"//"],[0,"ent.Datas.Elemen"]],"start1":19465,"start2":19465,"length1":32,"length2":34},{"diffs":[[0,"                "],[1,"//"],[0,"newDiv.css('left"]],"start1":19674,"start2":19674,"length1":32,"length2":34},{"diffs":[[0,"        "],[1,"//"],[0,"newDiv.c"]],"start1":19743,"start2":19743,"length1":16,"length2":18},{"diffs":[[0,"ent."],[-1,"AddComponent('FollowMouse"],[1,"Datas.Rotation = 0;\r\n                \r\n                ent.Datas.ContextToRenderOn = canvasContext;\r\n                ent.Datas.ImageToRender = image;\r\n                \r\n                ent.AddComponent('FollowMouse');\r\n                ent.AddComponent('ImageCanvasRenderer"],[0,"');\r"]],"start1":19894,"start2":19894,"length1":33,"length2":280},{"diffs":[[0,"; i < 10"],[-1,""],[0,""],[1,"00"],[0,"; i++) {"]],"start1":20335,"start2":20335,"length1":16,"length2":18},{"diffs":[[0,"oMake = "],[-1,"10"],[0,""],[1,""],[0,"0;\r\n    "]],"start1":20483,"start2":20483,"length1":18,"length2":16}]],"length":20836,"saved":false}
{"ts":1345558648664,"patch":[[{"diffs":[[0," 0; i < "],[-1,"1"],[1,"2"],[0,"000; i++"]],"start1":20333,"start2":20333,"length1":17,"length2":17}]],"length":20836,"saved":false}
{"ts":1345559272139,"patch":[[{"diffs":[[0," 0; i < "],[-1,"2"],[1,"10"],[0,"000; i++"]],"start1":20333,"start2":20333,"length1":17,"length2":18}]],"length":20837,"saved":false}
{"ts":1345559329210,"patch":[[{"diffs":[[0," 0; i < "],[-1,"10"],[1,"5"],[0,"000; i++"]],"start1":20333,"start2":20333,"length1":18,"length2":17}]],"length":20836,"saved":false}
{"ts":1345559756127,"patch":[[{"diffs":[[0,"tance = "],[-1,"4"],[1,"1"],[0,"00;\r\n   "]],"start1":12789,"start2":12789,"length1":17,"length2":17}]],"length":20836,"saved":false}
{"contributors":[],"silentsave":false,"ts":1345568445271,"patch":[[{"diffs":[[1,"/*\r\n  A simple entity system with an entity centric component / data model.\r\n  \r\n  TODO: \r\n    -Need to find a dependency injection system for components.\r\n    -Need to think through data factories, probably should something like:\r\n        JSEntitySystem.Datas holds a collection of primitive values, object values or functions.\r\n        When a Component gets added, the system should look at the Datas collection for the value it should provide.\r\n        If the system sees the Datas[\"requestedData\"] in question is a primitive or object, it simply copies that in.\r\n        If the system sees the Datas[\"requestedData\"] in question is a function however, it should call that function.\r\n        This adds the edge case of having to get around the need to put a function into Datas[\"requestedData\"],\r\n        this however can be surpassed by wrapping the function you would like in the Datas collection in another function:\r\n            Datas[\"requestedData\"] = function() { return function() { return \"ouch, syntax heavy :(\"; }};\r\n        I could make a factory function to act as a wrapper:\r\n            Datas[\"requestedData\"] = engine.DataFunction(function() { return \"slightly better? I don't know really.\" });\r\n        This could then be checked against by:\r\n            var isDataFunction = (Datas[\"requestedData\"].constructor === JSEntitySystem.DataFunction);\r\n        Then retrieved:\r\n            return Datas[\"requestedData\"].wrappedFunction;\r\n*/\r\nfunction JSEntitySystem(updateIntervalMilliseconds, canvasContext, fillColor) {\r\n    /*\r\n      This is the next free Id ready to be assigned to an entity.\r\n    */\r\n    this.NextFreeId = 0;\r\n    \r\n    /*\r\n      The interval to use for the setInterval function.\r\n    */\r\n    this.UpdateIntervalMilliseconds = updateIntervalMilliseconds;\r\n    \r\n    /*\r\n      The variable used to hold the scope of the JSEntitySystem function.\r\n    */\r\n    var engine = this;\r\n    \r\n    /*\r\n      The MousePos is the current V2 of the mouse.\r\n    */\r\n    this.MousePos = new V2();\r\n    \r\n    /*\r\n      Currently, the engine uses HTML elements to render, so we don't really need this call to be made.\r\n      When we switch over to canvas rendering, this should be switched to true, \r\n      and really\r\n      TODO: Elements should have individual ShouldRender bools.\r\n    */\r\n    this.ShouldRender = true;\r\n    \r\n    /*\r\n      The jQuery callback used for the mouse movement callback and grab the latest mouse coordinates.\r\n    */\r\n    $(\"#myCanvas\").ready(function() {\r\n       $(\"#myCanvas\").mousemove(function(e) {\r\n          engine.MousePos.X = e.pageX;\r\n          engine.MousePos.Y = e.pageY;\r\n       })}); \r\n    \r\n    /*\r\n    The component metadata collection.\r\n    keyed on the componentName, toLowered\r\n    Component[\"name\"] =    {\r\n        ComponentName : \"name\",\r\n    \tMethods : {\r\n    \t\tAssigned : method,\r\n    \t\tRemoved : method,\r\n    \t\tUpdate : method,\r\n    \t\tRender : method\r\n    \t},\r\n    \tRequiredComponents : array of strings,\r\n    \tRequiredData : array of data names\r\n    }\r\n    */\r\n    this.Components = { };\r\n    \r\n    /*\r\n      Datas is a map for holding data.\r\n    */\r\n    this.Datas = { };\r\n    \r\n    /*\r\n      Entities is a map for holding entities.\r\n    */\r\n    this.Entities = { };\r\n    \r\n    /*\r\n      EntityUpdateList is an array used to update the entities for the engine.\r\n    */    \r\n    this.EntityUpdateList = [];\r\n    \r\n    /*\r\n      The factory for the Component methods.\r\n    */\r\n    this.Component = function(assigned, removed, update, render) {\r\n    \tthis.Assigned = assigned;\r\n    \tthis.Removed = removed;\r\n    \tthis.Update = update;\r\n    \tthis.Render = render;\r\n    }\r\n    \r\n    /*\r\n      Registers a Component by name in the Components map.\r\n    */\r\n    this.RegisterComponent = function(componentName, component, requiredComponents, requiredData) {\r\n    \tengine.Components[componentName] = {\r\n    \t\tComponentName : componentName,\r\n    \t\tMethods : component,\r\n    \t\tRequiredComponents : requiredComponents,\r\n    \t\tRequiredData : requiredData\r\n    \t};\r\n    }\r\n    \r\n    /*\r\n      Adds a component to the entity passed in.\r\n    */\r\n    this.AddComponentWithRequirements = function(entity, componentName) {\r\n    \tvar component = engine.Components[componentName];\r\n    \t\r\n    \tif (!(componentName in entity.Components)) {\r\n    \t\tentity.Components[componentName] = engine.Components[componentName];\r\n    \t\tentity.UpdateComponents.push(engine.Components[componentName]);\r\n    \t}\r\n    \t\r\n        var i = 0;\r\n    \tfor (; i < component.RequiredComponents.length; i++) {\r\n    \t\tif (!(component.RequiredComponents[i] in entity.Components)) {\r\n    \t\t\tengine.AddComponentWithRequirements(entity, component.RequiredComponents[i]);\r\n    \t\t}\r\n    \t}\r\n    \t\r\n        i = 0;\r\n        for (; i < component.RequiredData.length; i++) {\r\n    \t\tif (!(component.RequiredData[i] in entity.Datas)) {\r\n                //TODO: Implement required data factory. See TODO at top of class.\r\n        \t\t  throw new Error(\"Entity does not have data: \" + component.RequiredData[i] + \", required by component: \" + componentName);\r\n    \t\t}\r\n    \t}\r\n        \r\n        engine.Components[componentName].Methods.Assigned(entity, engine.LastUpdateTime);\r\n    }\r\n    \r\n    /*\r\n      The Entity factory method used by the engine to make new entities.\r\n    */\r\n    this.Entity = function(idToUse) {\r\n        var self = this;\r\n        \r\n        if (typeof idToUse == 'number') {\r\n            if (engine.Entities.Any(function(ent) { ent.Id == idToUse })) {\r\n                throw new Error(\"Tried to create an entity with an explicity Id that already existed! Entity in question: \" + idToUse);\r\n                return;\r\n            }\r\n            \r\n            this.Id = idToUse;\r\n        } else {\r\n            engine.NextFreeId = engine.NextFreeId + 1;\r\n            this.Id = engine.NextFreeId;    \r\n        }\r\n        \r\n    \tthis.Datas = {\r\n    \t};\r\n    \tthis.Components = {\r\n    \t};\r\n        \r\n    \tthis.UpdateComponents = [];\r\n    \t\r\n        //Adds a component and any dependencies.\r\n        this.AddComponent = function(componentName) {\r\n    \t\tif (!(componentName in self.Components)) {\r\n    \t\t\t//recursively add components here.\r\n    \t\t\t//make sure to add each components required data here as well.\r\n    \t\t\tengine.AddComponentWithRequirements(self, componentName);\r\n    \t\t}\r\n    \t};\r\n        \r\n        this.RemoveComponent = function(componentName) {\r\n            if (componentName in self.Components) {\r\n                self.Components[componentName].Methods.RemoveComponent(self, engine.LastUpdateTime);\r\n                delete self.Components[componentName];\r\n            }\r\n        };\r\n    \t\r\n    \tthis.Update = function(gameTime) {\r\n    \t\tvar i = 0;\r\n    \t\tfor (i = 0; i < self.UpdateComponents.length; i++) {\r\n    \t\t\tself.UpdateComponents[i].Methods.Update(self, gameTime);\r\n    \t\t}\r\n    \t};\r\n        \r\n        this.Render = function(gameTime) {\r\n            var i = 0;\r\n            for (i = 0; i < self.UpdateComponents.length; i++) {\r\n                self.UpdateComponents[i].Methods.Render(self, gameTime);\r\n            }\r\n        }\r\n    \t\r\n    \tengine.Entities[this.Id] = this;\r\n        engine.EntityUpdateList.push(this);\r\n    }\r\n    \r\n    this.CreateEntity = function(idToUse) {\r\n        return new engine.Entity(idToUse);\r\n    }\r\n    \r\n    this.RemoveEntity = function(entityId) {\r\n        var entityToRemove = engine.Entities[entityId];\r\n        \r\n        if (entityToRemove === null) {\r\n            return;\r\n        }\r\n        \r\n        var indexOfEntity = engine.EntityUpdateList.indexOf(entityToRemove);\r\n        \r\n        if (indexOfEntity !== -1) {\r\n            engine.EntityUpdateList.splice(indexOfEntity, 1);\r\n        }\r\n        \r\n        delete engine.Entities[entityId];\r\n    }\r\n    \r\n    this.Update = function(gameTime) {\r\n        var i = 0;\r\n        for(i = 0; i < engine.EntityUpdateList.length; i++) {\r\n            engine.EntityUpdateList[i].Update(gameTime);\r\n        }\r\n        \r\n        if (!engine.ShouldRender) {\r\n            return;\r\n        }\r\n        \r\n        var docHeight = $(document).height();\r\n        var docWidth = $(document).width();\r\n        canvasContext.fillStyle = fillColor;\r\n        canvasContext.fillRect(0,0,docWidth,docHeight);\r\n        \r\n        for (i = 0; i < engine.EntityUpdateList.length; i++) {\r\n            engine.EntityUpdateList[i].Render(gameTime);\r\n        }\r\n    }\r\n    \r\n    this.GameStart = (new Date()).getMilliseconds();\r\n    this.LastUpdateTime = this.GameStart;\r\n    \r\n    this.FrameCountThisSecond = 0;\r\n    this.LastSecondTime = 0;\r\n    \r\n    this.IntervalUpdateFunc = function() {\r\n        var currentTime = (new Date()).getMilliseconds();\r\n        var updateDelta = currentTime - engine.LastUpdateTime;\r\n\r\n        \r\n        //TODO: HACK: This sometimes comes out as a value ~-361 which... is wrong.\r\n        //As far as I know, javascript isn't capable of time travel...\r\n        if (updateDelta < 0) {\r\n            updateDelta = engine.UpdateIntervalMilliseconds;\r\n        }\r\n        \r\n        engine.LastSecondTime += updateDelta;\r\n        \r\n        if (engine.LastSecondTime > 1000) {\r\n            engine.LastSecondTime -= 1000;\r\n            $('#diagDiv').text(\"FPS: \" + engine.FrameCountThisSecond);\r\n            engine.FrameCountThisSecond = 0;\r\n        }\r\n        \r\n        engine.FrameCountThisSecond++;\r\n        \r\n        engine.Update(updateDelta);\r\n        \r\n        engine.LastUpdateTime = currentTime;\r\n    }\r\n    \r\n    this.StartUpdating = function() {\r\n        engine.StopUpdating();\r\n        \r\n        engine.UpdateIntervalKey = setInterval(engine.IntervalUpdateFunc, engine.UpdateIntervalMilliseconds);\r\n    }\r\n    \r\n    this.StopUpdating = function() {\r\n        if (typeof engine.UpdateIntervalKey !== 'undefined') {\r\n            clearInterval(engine.UpdateIntervalKey);\r\n            delete engine.UpdateIntervalKey;\r\n        }\r\n    }\r\n    \r\n    /*\r\n      Data should be passed in as json objects.\r\n    */\r\n    this.AddData = function(dataName, data) {\r\n        engine.Datas[dataName] = data;\r\n    }\r\n}\r\n\r\n$(function() {\r\n    var canvasElement = $(\"#myCanvas\");\r\n    var canvasContext = canvasElement[0].getContext(\"2d\");\r\n    var entitySystem = new JSEntitySystem(16, canvasContext, \"#000000\");\r\n    \r\n    //TODO: This 'TestComponent' should be reworked into a 'FollowMouse' component that takes an element reference in its Datas.\r\n    entitySystem.RegisterComponent('FollowMouse',\r\n        new entitySystem.Component(function(entity, gameTime) {\r\n                            //assigned\r\n                            \r\n                            if (typeof entity.Datas.ElementToMove !== 'undefined') {\r\n                                entity.Datas.ElementToMove.css('position', 'absolute');\r\n                                entity.Datas.ElementToMove.css('width','2em');\r\n                            }\r\n                            \r\n                            //if the current position is defined\r\n                            if (typeof entity.Datas.Position !== 'undefined') {\r\n                                //and if the original position is undefined, then we can copy over this current position\r\n                                if (typeof entity.Datas.OriginalPos === 'undefined') {\r\n                                    entity.Datas.OriginalPos = entity.Datas.Position.Copy();\r\n                                    entity.Datas.OriginalSpeed = entity.Datas.Speed;\r\n                                }\r\n                            }\r\n                            \r\n                            if (typeof entity.Datas.Position === 'undefined') {\r\n                                entity.Datas.Position = new V2();\r\n                            }\r\n                            \r\n                            if (typeof entity.Datas.ToMouse === 'undefined') {\r\n                                entity.Datas.ToMouse = new V2();\r\n                            }\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //removed\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //update\r\n                            \r\n                            //var div = entity.Datas.ElementToMove;\r\n                            //var divPos = div.position();\r\n                            \r\n                            //A -> B :: B - A\r\n                            var currentPos = entity.Datas.Position;//.Init(divPos.left, divPos.top);\r\n                            var toMouse = entity.Datas.ToMouse.InitFromV2(entitySystem.MousePos)\r\n                                                              .Sub(currentPos);\r\n                            var speedModifier = 1;\r\n                            var lengthToMouse = toMouse.Length();\r\n                            \r\n                            var sensingDistance = 400;\r\n                            \r\n                            if (lengthToMouse < 20) {\r\n                                entity.Datas.Speed = 0.1;\r\n                            } else if (lengthToMouse < sensingDistance) {\r\n                                if (lengthToMouse < (sensingDistance / 2)) {\r\n                                    entity.Datas.Speed = entity.Datas.OriginalSpeed * ((lengthToMouse / sensingDistance) - 0.25);\r\n                                } else {\r\n                                    entity.Datas.Speed = entity.Datas.OriginalSpeed * ((lengthToMouse / sensingDistance) - 0.5);   \r\n                                }\r\n                            } else {\r\n                                if (typeof entity.Datas.OriginalPos !== 'undefined') {\r\n                                    entity.Datas.Speed = entity.Datas.OriginalSpeed;\r\n                                    toMouse = entity.Datas.ToMouse.InitFromV2(entity.Datas.OriginalPos)\r\n                                                                  .Sub(currentPos);\r\n                                                                  \r\n                                    if (toMouse.Length() < 40) {\r\n                                        entity.Datas.Speed = 0;\r\n                                        entity.Datas.Position.InitFromV2(entity.Datas.OriginalPos);\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    entity.Datas.Speed = 0;\r\n                                }\r\n                            }\r\n                            \r\n                            //toMouse.Normalize()\r\n                            //       .Multiply(entity.Datas.Speed * (gameTime / 1000) * 5 * speedModifier);// * (5 * (Math.sin(entity.Datas.Counter) + 0.7)));\r\n                            entity.Datas.Rotation = Math.atan2(toMouse.Y, toMouse.X);\r\n                            //var rotation = Math.atan2(toMouse.Y, toMouse.X);\r\n                            \r\n                            //toMouse.Add(currentPos);\r\n                            \r\n                            \r\n                            //div.css({ WebkitTransform: 'rotate(' + rotation + 'rad)'});\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //render\r\n            \t\t\t}),\r\n                \t['MovementUpdater'],\r\n                    ['Speed']);\r\n                    \r\n    entitySystem.RegisterComponent('RotateClockwise',\r\n        new entitySystem.Component(function(entity, gameTime) {\r\n                            //assigned\r\n                            //entity.Datas.ElementToMove.css('width','0em');\r\n                            //entity.Datas.ElementToMove.css(\"-webkit-transform-origin\", \"50% 50%\" );\r\n            \t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //removed\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //update\r\n                            \r\n                            if (typeof entity.Datas.Rotation === 'undefined') {                                \r\n                                entity.Datas.Rotation = 0;\r\n                            }\r\n                            \r\n                            entity.Datas.Rotation += 100 * (gameTime / 1000);\r\n                            \r\n                            if (typeof entity.Datas.ElementToMove !== 'undefined') {\r\n                                entity.Datas.ElementToMove.rotate(entity.Datas.Rotation);\r\n                            }\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //render\r\n            \t\t\t}),\r\n                \t[],\r\n                    []);\r\n                    \r\n    entitySystem.RegisterComponent('MovementUpdater',\r\n        new entitySystem.Component(function(entity, gameTime) {\r\n            //assigned\r\n        },\r\n        function(entity, gameTime) {\r\n            //removed\r\n        },\r\n        function(entity, gameTime) {\r\n            //update\r\n            \r\n            var rot = entity.Datas.Rotation;\r\n\r\n            entity.Datas.Heading.Init(Math.cos(rot), Math.sin(rot)).Normalize();\r\n\r\n            entity.Datas.Position.Add(entity.Datas.Heading.Multiply(entity.Datas.Speed).Multiply(gameTime / 1000));\r\n            \r\n            if (typeof entity.Datas.ElementToMove !== 'undefined') {\r\n                var div = entity.Datas.ElementToMove;\r\n                div.css('left', entity.Datas.Position.X);\r\n                div.css('top', entity.Datas.Position.Y);\r\n            }\r\n        },\r\n        function(entity, gameTime) {\r\n            //render\r\n        }),\r\n        [],\r\n        ['Position', 'Speed', 'Heading']);\r\n        \r\n    var toRadians = Math.PI/180;\r\n    entitySystem.RegisterComponent('ImageCanvasRenderer', \r\n        new entitySystem.Component(function(entity, gameTime) {\r\n            //assigned\r\n        },\r\n        function(entity, gameTime) {\r\n            //removed\r\n        },\r\n        function(entity, gameTime) {\r\n            //update\r\n        },\r\n        function(entity, gameTime) {\r\n            //render\r\n            \r\n            var context = entity.Datas.ContextToRenderOn;\r\n            \r\n            context.save();\r\n \r\n        \tcontext.translate(entity.Datas.Position.X, entity.Datas.Position.Y);\r\n         \r\n        \tcontext.rotate(entity.Datas.Position.Rotation);\r\n         \r\n        \tcontext.drawImage(entity.Datas.ImageToRender, -(entity.Datas.ImageToRender.width/2), -(entity.Datas.ImageToRender.height/2));\r\n            \r\n            context.restore();\r\n        }),\r\n        [],\r\n        ['Position', 'Rotation', 'ImageToRender', 'ContextToRenderOn']);\r\n    \r\n    (function() {\r\n        var typedYet = false;\r\n        $(document).ready(function () {\r\n            $(window).keydown(function(args) {\r\n                if (typedYet) {\r\n                    $('div[id=getsMoved]').text(function(index, text) {\r\n                        return text + String.fromCharCode(args.which);  \r\n                    });\r\n                } else {\r\n                    $('div[id=getsMoved]').text(function(index, text) {\r\n                        return String.fromCharCode(args.which);  \r\n                    });\r\n                    typedYet = true;\r\n                }\r\n                \r\n            });\r\n        });\r\n        \r\n        \r\n        var docHeight = $(document).height();\r\n        var docWidth = $(document).width();\r\n        \r\n        canvasElement[0].width = $(window).width();\r\n        canvasElement[0].height = $(window).height();\r\n        \r\n        var bodyElem = $('body');\r\n        var image = new Image();\r\n        image.src = \"star.png\";\r\n        \r\n        var createNewElement = (function(x, y) {\r\n                var ent = entitySystem.CreateEntity();\r\n                \r\n                //var newDiv = $('<div id=\"getsMoved\"><img width=\"3\" height=\"3\" src=\"star.png\"></img></div>');\r\n                \r\n                //ent.Datas.ElementToMove = newDiv.appendTo(bodyElem);\r\n                \r\n                ent.Datas.Speed = 1000;//i + 1;\r\n                ent.Datas.Position = new V2(x, y);\r\n                \r\n                //newDiv.css('left', ent.Datas.Position.X);\r\n                //newDiv.css('top', ent.Datas.Position.Y);\r\n                \r\n                ent.Datas.Heading = new V2();\r\n                \r\n                ent.Datas.Rotation = 0;\r\n                \r\n                ent.Datas.ContextToRenderOn = canvasContext;\r\n                ent.Datas.ImageToRender = image;\r\n                \r\n                ent.AddComponent('FollowMouse');\r\n                ent.AddComponent('ImageCanvasRenderer');\r\n                \r\n                ent.Datas.Rotation = 0;\r\n            });\r\n        var i = 0;\r\n        \r\n        //random elements to make.\r\n        for (i = 0; i < 5000; i++) {\r\n            createNewElement(RandomFromTo(0, docWidth), RandomFromTo(0, docHeight));\r\n        }\r\n        \r\n        var elementsToMake = 0;\r\n        for (i = 0; i < elementsToMake; i++) {\r\n            createNewElement(docWidth / 2, docHeight * (i / elementsToMake));\r\n        }\r\n        \r\n        for (i = 0; i < elementsToMake; i++) {\r\n            createNewElement(docWidth * (i / elementsToMake), docHeight / 2);\r\n        }\r\n    })();\r\n    \r\n    entitySystem.StartUpdating();\r\n});"]],"start1":0,"start2":0,"length1":0,"length2":21129}]],"length":21129,"saved":false}
{"contributors":[],"silentsave":true,"ts":1345645304061,"patch":[[{"diffs":[[0,"    "],[-1,"\r\n"],[0,"   "],[-1," /*\r\n    The component metadata collection.\r\n    keyed on the componentName, toLowered\r\n    Component[\"name\"] =    {\r\n        ComponentName : \"name\",\r\n    \tMethods : {\r\n    \t\tAssigned : method,\r\n    \t\tRemoved : method,\r\n    \t\tUpdate : method,\r\n    \t\tRender : method\r\n    \t},\r\n    \tRequiredComponents : array of strings,\r\n    \tRequiredData : array of data names\r\n    }\r\n    */\r\n    this.Components = { };\r\n    \r\n    /*\r\n      Datas is a map for holding data.\r\n    */\r\n    this.Datas = { };\r\n    \r\n    /*\r\n      Entities is a map for holding entities.\r\n    */\r\n    this.Entities = { };\r\n    \r\n    /*\r\n      EntityUpdateList is an array used to update the entities for the engine.\r\n    */    \r\n    this.EntityUpdateList = [];\r\n    \r\n    /*\r\n      The factory for the Component methods.\r\n    */\r\n    this.Component = function(assigned, removed, update, render) {\r\n    \tthis.Assigned = assigned;\r\n    \tthis.Removed = removed;\r\n    \tthis.Update = update;\r\n    \tthis.Render = render;\r\n    }\r\n    \r\n    /*\r\n      Registers a Component by name in the Components map.\r\n    */\r\n    this.RegisterComponent = function(componentName, component, requiredComponents, requiredData) {\r\n    \tengine.Components[componentName] = {\r\n    \t\tComponentName : componentName,\r\n    \t\tMethods : component,\r\n    \t\tRequiredComponents : requiredComponents,\r\n    \t\tRequiredData : requiredData\r\n    \t};\r\n    }\r\n    \r\n    /*\r\n      Adds a component to the entity passed in.\r\n    */\r\n    this.AddComponentWithRequirements = function(entity, componentName) {\r\n    \tvar component = engine.Components[componentName];\r\n    \t\r\n    \tif (!(componentName in entity.Components)) {\r\n    \t\tentity.Components[componentName] = engine.Components[componentName];\r\n    \t\tentity.UpdateComponents.push(engine.Components[componentName]);\r\n    \t}\r\n    \t\r\n        var i = 0;\r\n    \tfor (; i < component.RequiredComponents.length; i++) {\r\n    \t\tif (!(component.RequiredComponents[i] in entity.Components)) {\r\n    \t\t\tengine.AddComponentWithRequirements(entity, component.RequiredComponents[i]);\r\n    \t\t}\r\n    \t}\r\n    \t\r\n        i = 0;\r\n        for (; i < component.RequiredData.length; i++) {\r\n    \t\tif (!(component.RequiredData[i] in entity.Datas)) {\r\n                //TODO: Implement required data factory. See TODO at top of class.\r\n        \t\t  throw new Error(\"Entity does not have data: \" + component.RequiredData[i] + \", required by component: \" + componentName);\r\n    \t\t}\r\n    \t}\r\n        \r\n        engine.Components[componentName].Methods.Assigned(entity, engine.LastUpdateTime);\r\n    }\r\n    \r\n    /*\r\n      The Entity factory method used by the engine to make new entities.\r\n    */\r\n    this.Entity = function(idToUse) {\r\n        var self = this;\r\n        \r\n        if (typeof idToUse == 'number') {\r\n            if (engine.Entities.Any(function(ent) { ent.Id == idToUse })) {\r\n                throw new Error(\"Tried to create an entity with an explicity Id that already existed! Entity in question: \" + idToUse);\r\n                return;\r\n            }\r\n            \r\n            this.Id = idToUse;\r\n        } else {\r\n            engine.NextFreeId = engine.NextFreeId + 1;\r\n            this.Id = engine.NextFreeId;    \r\n        }\r\n        \r\n    \tthis.Datas = {\r\n    \t};\r\n    \tthis.Components = {\r\n    \t};\r\n        \r\n    \tthis.UpdateComponents = [];\r\n    \t\r\n        //Adds a component and any dependencies.\r\n        this.AddComponent = function(componentName) {\r\n    \t\tif (!(componentName in self.Components)) {\r\n    \t\t\t//recursively add components here.\r\n    \t\t\t//make sure to add each components required data here as well.\r\n    \t\t\tengine.AddComponentWithRequirements(self, componentName);\r\n    \t\t}\r\n    \t};\r\n        \r\n        this.RemoveComponent = function(componentName) {\r\n            if (componentName in self.Components) {\r\n                self.Components[componentName].Methods.RemoveComponent(self, engine.LastUpdateTime);\r\n                delete self.Components[componentName];\r\n            }\r\n        };\r\n    \t\r\n    \tthis.Update = function(gameTime) {\r\n    \t\tvar i = 0;\r\n    \t\tfor (i = 0; i < self.UpdateComponents.length; i++) {\r\n    \t\t\tself.UpdateComponents[i].Methods.Update(self, gameTime);\r\n    \t\t}\r\n    \t};\r\n        \r\n        this.Render = function(gameTime) {\r\n            var i = 0;\r\n            for (i = 0; i < self.UpdateComponents.length; i++) {\r\n                self.UpdateComponents[i].Methods.Render(self, gameTime);\r\n            }\r\n        }\r\n    \t\r\n    \tengine.Entities[this.Id] = this;\r\n        engine.EntityUpdateList.push(this);\r\n    }\r\n    \r\n    this.CreateEntity = function(idToUse) {\r\n        return new engine.Entity(idToUse);\r\n    }\r\n    \r\n    this.RemoveEntity = function(entityId) {\r\n        var entityToRemove = engine.Entities[entityId];\r\n        \r\n        if (entityToRemove === null) {\r\n            return;\r\n        }\r\n        \r\n        var indexOfEntity = engine.EntityUpdateList.indexOf(entityToRemove);\r\n        \r\n        if (indexOfEntity !== -1) {\r\n            engine.EntityUpdateList.splice(indexOfEntity, 1);\r\n        }\r\n        \r\n        delete engine.Entities[entityId];\r\n    }\r\n    \r\n    this.Update = function(gameTime) {\r\n        var i = 0;\r\n        for(i = 0; i < engine.EntityUpdateList.length; i++) {\r\n            engine.EntityUpdateList[i].Update(gameTime);\r\n        }\r\n        \r\n        if (!engine.ShouldRender) {\r\n            return;\r\n        }\r\n        \r\n        var docHeight = $(document).height();\r\n        var docWidth = $(document).width();\r\n        canvasContext.fillStyle = fillColor;\r\n        canvasContext.fillRect(0,0,docWidth,docHeight);\r\n        \r\n        for (i = 0; i < engine.EntityUpdateList.length; i++) {\r\n            engine.EntityUpdateList[i].Render(gameTime);\r\n        }\r\n    }\r\n    \r\n    this.GameStart = (new Date()).getMilliseconds();\r\n    this.LastUpdateTime = this.GameStart;\r\n    \r\n    this.FrameCountThisSecond = 0;\r\n    this.LastSecondTime = 0;\r\n    \r\n    this.IntervalUpdateFunc = function() {\r\n        var currentTime = (new Date()).getMilliseconds();\r\n        var updateDelta = currentTime - engine.LastUpdateTime;\r\n\r\n        \r\n        //TODO: HACK: This sometimes comes out as a value ~-361 which... is wrong.\r\n        //As far as I know, javascript isn't capable of time travel...\r\n        if (updateDelta < 0) {\r\n            updateDelta = engine.UpdateIntervalMilliseconds;\r\n        }\r\n        \r\n        engine.LastSecondTime += updateDelta;\r\n        "],[1,"\r\n    this.IsOnTouchDevice = \r\n    \r\n    //engine.IsOnTouchDevice = ('ontouchstart' in document.documentElement);\r\n    //helped out: http://www.codeproject.com/Articles/355230/HTML-5-Canvas-A-Simple-Paint-Program-Touch-and-Mou"],[0,"\r\n"],[-1,"    "],[0,"    "]],"start1":2647,"start2":2647,"length1":6416,"length2":239},{"diffs":[[0,"ine."],[-1,"LastSecondTime > 1000) {\r\n            engine.LastSecondTime -= 1000;\r\n            $('#diagDiv').text(\"FPS: \" + engine.FrameCountThisSecond);\r\n            engine.FrameCountThisSecond = 0;\r\n        }\r\n        \r\n        engine.FrameCountThisSecond++;\r\n        \r\n        engine.Update(updateDelta);\r\n        \r\n        engine.LastUpdateTime = currentTime;\r\n    }\r\n    \r\n    this.StartUpdating = function() {\r\n        engine.StopUpdating();\r\n        \r\n        engine.UpdateIntervalKey = setInterval(engine.IntervalUpdateFunc, engine.UpdateIntervalMilliseconds);\r\n    }\r\n    \r\n    this.StopUpdating = function() {\r\n        if (typeof engine.UpdateIntervalKey !== 'undefined') {\r\n            clearInterval(engine.UpdateIntervalKey);\r\n            delete engine.UpdateIntervalKey;\r\n        }\r\n    }\r\n    \r\n    /*\r\n      Data should be passed in as json objects.\r\n    */\r\n    this.AddData = function(dataName, data) {\r\n        engine.Datas[dataName] = data;\r\n    }\r\n}\r\n\r\n$(function() {\r\n    var canvasElement = $(\"#myCanvas\");\r\n    var canvasContext = canvasElement[0].getContext(\"2d\");\r\n    var entitySystem = new JSEntitySystem(16, canvasContext, \"#000000\");\r\n    \r\n    //TODO: This 'TestComponent' should be reworked into a 'FollowMouse' component that takes an element reference in its Datas.\r\n    entitySystem.RegisterComponent('FollowMouse',\r\n        new entitySystem.Component(function(entity, gameTime) {\r\n                            //assigned\r\n                            \r\n                            if (typeof entity.Datas.ElementToMove !== 'undefined') {\r\n                                entity.Datas.ElementToMove.css('position', 'absolute');\r\n                                entity.Datas.ElementToMove.css('width','2em');\r\n                            }\r\n                            \r\n                            //if the current position is defined\r\n                            if (typeof entity.Datas.Position !== 'undefined') {\r\n                                //and if the original position is undefined, then we can copy over this current position\r\n                                if (typeof entity.Datas.OriginalPos === 'undefined') {\r\n                                    entity.Datas.OriginalPos = entity.Datas.Position.Copy();\r\n                                    entity.Datas.OriginalSpeed = entity.Datas.Speed;\r\n                                }\r\n                            }\r\n                            \r\n                            if (typeof entity.Datas.Position === 'undefined') {\r\n                                entity.Datas.Position = new V2();\r\n                            }\r\n                            \r\n                            if (typeof entity.Datas.ToMouse === 'undefined') {\r\n                                entity.Datas.ToMouse = new V2();\r\n                            }\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //removed\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //update\r\n                            \r\n                            //var div = entity.Datas.ElementToMove;\r\n                            //var divPos = div.position();\r\n                            \r\n                            //A -> B :: B - A\r\n                            var currentPos = entity.Datas.Position;//.Init(divPos.left, divPos.top);\r\n                            var toMouse = entity.Datas.ToMouse.InitFromV2(entitySystem.MousePos)\r\n                                                              .Sub(currentPos);\r\n                            var speedModifier = 1;\r\n                            var lengthToMouse = toMouse.Length();\r\n                            \r\n                            var sensingDistance = 400;\r\n                            \r\n                            if (lengthToMouse < 20) {\r\n                                entity.Datas.Speed = 0.1;\r\n                            } else if (lengthToMouse < sensingDistance) {\r\n                                if (lengthToMouse < (sensingDistance / 2)) {\r\n                                    entity.Datas.Speed = entity.Datas.OriginalSpeed * ((lengthToMouse / sensingDistance) - 0.25);\r\n                                } else {\r\n                                    entity.Datas.Speed = entity.Datas.OriginalSpeed * ((lengthToMouse / sensingDistance) - 0.5);   \r\n                                }\r\n                            } else {\r\n                                if (typeof entity.Datas.OriginalPos !== 'undefined') {\r\n                                    entity.Datas.Speed = entity.Datas.OriginalSpeed;\r\n                                    toMouse = entity.Datas.ToMouse.InitFromV2(entity.Datas.OriginalPos)\r\n                                                                  .Sub(currentPos);\r\n                                                                  \r\n                                    if (toMouse.Length() < 40) {\r\n                                        entity.Datas.Speed = 0;\r\n                                        entity.Datas.Position.InitFromV2(entity.Datas.OriginalPos);\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    entity.Datas.Speed = 0;\r\n                                }\r\n                            }\r\n                            \r\n                            //toMouse.Normalize()\r\n                            //       .Multiply(entity.Datas.Speed * (gameTime / 1000) * 5 * speedModifier);// * (5 * (Math.sin(entity.Datas.Counter) + 0.7)));\r\n                            entity.Datas.Rotation = Math.atan2(toMouse.Y, toMouse.X);\r\n                            //var rotation = Math.atan2(toMouse.Y, toMouse.X);\r\n                            \r\n                            //toMouse.Add(currentPos);\r\n                            \r\n                            \r\n                            //div.css({ WebkitTransform: 'rotate(' + rotation + 'rad)'});\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //render\r\n            \t\t\t}),\r\n                \t['MovementUpdater'],\r\n                    ['Speed']);\r\n                    \r\n    entitySystem.RegisterComponent('RotateClockwise',\r\n        new entitySystem.Component(function(entity, gameTime) {\r\n                            //assigned\r\n                            //entity.Datas.ElementToMove.css('width','0em');\r\n                            //entity.Datas.ElementToMove.css(\"-webkit-transform-origin\", \"50% 50%\" );\r\n            \t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //removed\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //update\r\n                            \r\n                            if (typeof entity.Datas.Rotation === 'undefined') {                                \r\n                                entity.Datas.Rotation = 0;\r\n                            }\r\n                            \r\n                            entity.Datas.Rotation += 100 * (gameTime / 1000);\r\n                            \r\n                            if (typeof entity.Datas.ElementToMove !== 'undefined') {\r\n                                entity.Datas.ElementToMove.rotate(entity.Datas.Rotation);\r\n                            }\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //render\r\n            \t\t\t}),\r\n                \t[],\r\n                    []);\r\n                    \r\n    entitySystem.RegisterComponent('MovementUpdater',\r\n        new entitySystem.Component(function(entity, gameTime) {\r\n            //assigned\r\n        },\r\n        function(entity, gameTime) {\r\n            //removed\r\n        },\r\n        function(entity, gameTime"],[1,"IsOnTouchDevice) {\r\n        //we're on a touch device.\r\n        var canvasElement = $(\"#myCanvas\")[0];\r\n        var updateEngineMousePosFromEventArgs = function(args) {\r\n            engine.MousePos.X = args.targetTouches[0].pageX;\r\n            engine.MousePos.Y = args.targetTouches[0].pageY;\r\n        };\r\n        canvasElement.addEventListener('touchstart', function (args"],[0,") {\r"]],"start1":2893,"start2":2893,"length1":7767,"length2":381},{"diffs":[[0,"    "],[-1,"//"],[0,"update"],[-1,"\r\n            \r\n            var rot = entity.Datas.Rotation;\r\n\r\n            entity.Datas.Heading.Init(Math.cos(rot), Math.sin(rot)).Normalize();\r\n\r\n            entity.Datas.Position.Add(entity.Datas.Heading.Multiply(entity.Datas.Speed).Multiply(gameTime / 1000));\r\n            \r\n            if (typeof entity.Datas.ElementToMove !== 'undefined') {\r\n                var div = entity.Datas.ElementToMove;\r\n                div.css('left', entity.Datas.Position.X);\r\n                div.css('top', entity.Datas.Position.Y);\r\n            }\r\n        },\r\n        function(entity, gameTime) {\r\n            //render\r\n        }),\r\n        [],\r\n        ['Position', 'Speed', 'Heading']);\r\n        \r\n    var toRadians = Math.PI/180;\r\n    entitySystem.RegisterComponent('ImageCanvasRenderer', \r\n        new entitySystem.Component(function(entity, gameTime) {\r\n            //assigned\r\n        },\r\n        function(entity, gameTime) {\r\n            //removed\r\n        },\r\n        function(entity, gameTime) {\r\n            //update\r\n        },\r\n        function(entity, gameTime) {\r\n            //render\r\n            \r\n            var context = entity.Datas.ContextToRenderOn;\r\n            \r\n            context.save();\r\n \r\n        \tcontext.translate(entity.Datas.Position.X, entity.Datas.Position.Y);\r\n         \r\n        \tcontext.rotate(entity.Datas.Position.Rotation);\r\n         \r\n        \tcontext.drawImage(entity.Datas.ImageToRender, -(entity.Datas.ImageToRender.width/2), -(entity.Datas.ImageToRender.height/2));\r\n            \r\n            context.restore();\r\n        }),\r\n        [],\r\n        ['Position', 'Rotation', 'ImageToRender', 'ContextToRenderOn']);\r\n    \r\n    (function() {\r\n        var typedYet = false;\r\n        $(document).ready(function () {\r\n            $(window).keydown(function(args) {\r\n                if (typedYet) {\r\n                    $('div[id=getsMoved]').text(function(index, text) {\r\n                        return text + String.fromCharCode(args.which);  \r\n                    });\r\n                } else {\r\n                    $('div[id=getsMoved]').text(function(index, text) {\r\n                        return String.fromCharCode(args.which);  \r\n                    });\r\n                    typedYet = true;\r\n                }\r\n                \r\n            });\r\n        });\r\n        \r\n        \r\n        var docHeight = $(document).height();\r\n        var docWidth = $(document).width();\r\n        \r\n        canvasElement[0].width = $(window).width();\r\n        canvasElement[0].height = $(window).height();\r\n        \r\n        var bodyElem = $('body');\r\n        var image = new Image();\r\n        image.src = \"star.png\";\r\n        \r\n        var createNewElement = (function(x, y) {\r\n                var ent = entitySystem.CreateEntity();\r\n                \r\n                //var newDiv = $('<div id=\"getsMoved\"><img width=\"3\" height=\"3\" src=\"star.png\"></img></div>');\r\n                \r\n                //ent.Datas.ElementToMove = newDiv.appendTo(bodyElem);\r\n                \r\n                ent.Datas.Speed = 1000;//i + 1;\r\n                ent.Datas.Position = new V2(x, y);\r\n                \r\n                //newDiv.css('left', ent.Datas.Position.X);\r\n                //newDiv.css('top', ent.Datas.Position.Y);\r\n                \r\n                ent.Datas.Heading = new V2();\r\n                \r\n                ent.Datas.Rotation = 0;\r\n                \r\n                ent.Datas.ContextToRenderOn = canvasContext;\r\n                ent.Datas.ImageToRender = image;\r\n                \r\n                ent.AddComponent('FollowMouse');\r\n                ent.AddComponent('ImageCanvasRenderer');\r\n                \r\n                ent.Datas.Rotation = 0;\r\n            });\r\n        var i = 0;\r\n        \r\n        //random elements to make.\r\n        for (i = 0; i < 5000; i++) {\r\n            createNewElement(RandomFromTo(0, docWidth), RandomFromTo(0, docHeight));\r\n        }\r\n        \r\n        var elementsToMake = 0;\r\n        for (i = 0; i < elementsToMake; i++) {\r\n            createNewElement(docWidth / 2, docHeight * (i / elementsToMake));\r\n        }\r\n        \r\n        for (i = 0; i < elementsToMake; i++) {\r\n            createNewElement(docWidth * (i / elementsToMake), docHeight / 2);\r\n        }\r\n    })();\r\n    \r\n    entitySystem.StartUpdating();\r\n});/*\r\n  A simple entity system with an entity centric component / data model.\r\n  \r\n  TODO: \r\n    -Need to find a dependency injection system for components.\r\n    -Need to think through data factories, probably should something like:\r\n        JSEntitySystem.Datas holds a collection of primitive values, object values or functions.\r\n        When a Component gets added, the system should look at the Datas collection for the value it should provide.\r\n        If the system sees the Datas[\"requestedData\"] in question is a primitive or object, it simply copies that in.\r\n        If the system sees the Datas[\"requestedData\"] in question is a function however, it should call that function.\r\n        This adds the edge case of having to get around the need to put a function into Datas[\"requestedData\"],\r\n        this however can be surpassed by wrapping the function you would like in the Datas collection in another function:\r\n            Datas[\"requestedData\"] = function() { return function() { return \"ouch, syntax heavy :(\"; }};\r\n        I could make a factory function to act as a wrapper:\r\n            Datas[\"requestedData\"] = engine.DataFunction(function() { return \"slightly better? I don't know really.\" });\r\n        This could then be checked against by:\r\n            var isDataFunction = (Datas[\"requestedData\"].constructor === JSEntitySystem.DataFunction);\r\n        Then retrieved:\r\n            return Datas[\"requestedData\"].wrappedFunction;\r\n*/\r\nfunction JSEntitySystem(updateIntervalMilliseconds, canvasContext, fillColor) {\r\n    /*\r\n      This is the next free Id ready to be assigned to an entity.\r\n    */\r\n    this.NextFreeId = 0;\r\n    \r\n    /*\r\n      The interval to use for the setInterval function.\r\n    */\r\n    this.UpdateIntervalMilliseconds = updateIntervalMilliseconds;\r\n    \r\n    /*\r\n      The variable used to hold the scope of the JSEntitySystem function.\r\n    */\r\n    var engine = this;\r\n    \r\n    /*\r\n      The MousePos is the current V2 of the mouse.\r\n    */\r\n    this.MousePos = new V2();\r\n    \r\n    /*\r\n      Currently, the engine uses HTML elements to render, so we don't really need this call to be made.\r\n      When we switch over to canvas rendering, this should be switched to true, \r\n      and really\r\n      TODO: Elements should have individual ShouldRender bools.\r\n    */\r\n    this.ShouldRender = true;\r\n    \r\n    /*\r\n      The jQuery callback used for the mouse movement callback and grab the latest mouse coordinates.\r\n    */\r\n    $(\"#myCanvas\").ready(function() {\r\n       $(\"#myCanvas\").mousemove(function(e) {\r\n          engine.MousePos.X = e.pageX;\r\n          engine.MousePos.Y = e.pageY;\r\n       })}); "],[1,"EngineMousePosFromEventArgs(args);\r\n        }, false);\r\n        canvasElement.addEventListener('touchmove', function (args) {\r\n            updateEngineMousePosFromEventArgs(args);\r\n            args.preventDefault();\r\n        }, false);\r\n        canvasElement.addEventListener('touchend', function (args) {\r\n            updateEngineMousePosFromEventArgs(args);\r\n        }, false);\r\n    }"],[0,"\r\n  "]],"start1":3283,"start2":3283,"length1":6932,"length2":400},{"diffs":[[0,"$('#"],[-1,"diagDiv"],[1,"fps"],[0,"').t"]],"start1":10190,"start2":10190,"length1":15,"length2":11},{"diffs":[[0,"hisSecond = 0;\r\n"],[1,"            \r\n            $('#entityCount').text((engine.IsOnTouchDevice ? \"Mobile! : \"\") + \"\"Entity Count: \" + engine.EntityUpdateList.length);\r\n"],[0,"        }\r\n     "]],"start1":10276,"start2":10276,"length1":32,"length2":178},{"diffs":[[0,"tance = "],[-1,"1"],[1,"4"],[0,"00;\r\n   "]],"start1":13965,"start2":13965,"length1":17,"length2":17},{"diffs":[[0,"= 0;\r\n        \r\n"],[1,"        var amountOfEntitiesToMake = entitySystem.IsOnTouchDevice ? 500 : 2000;\r\n"],[0,"        //random"]],"start1":21441,"start2":21441,"length1":32,"length2":113},{"diffs":[[0,"i < "],[-1,"5000"],[1,"amountOfEntitiesToMake"],[0,"; i+"]],"start1":21594,"start2":21594,"length1":12,"length2":30},{"diffs":[[0,"));\r\n        }\r\n"],[1,"\r\n"],[0,"        \r\n      "]],"start1":21711,"start2":21711,"length1":32,"length2":34},{"diffs":[[0," }\r\n\r\n        \r\n"],[1,"//"],[0,"        var elem"]],"start1":21723,"start2":21723,"length1":32,"length2":34},{"diffs":[[0,"ntsToMake = "],[1,"1"],[0,"0;\r\n"],[1,"//        var divisor = 0;\r\n//        var maxDivisions = 10;\r\n//        for (divisor = 0; divisor < (maxDivisions - 1); divisor++) {\r\n//    "],[0,"        for "]],"start1":21758,"start2":21758,"length1":28,"length2":169},{"diffs":[[0,"ToMake; i++) {\r\n"],[1,"//  "],[0,"            crea"]],"start1":21947,"start2":21947,"length1":32,"length2":36},{"diffs":[[0,"//              "],[1,"  "],[0,"createNewElement"]],"start1":21963,"start2":21963,"length1":32,"length2":34},{"diffs":[[0,"ocWidth "],[-1,"/ 2"],[1,"* ((divisor + 1) / maxDivisions)"],[0,", docHei"]],"start1":21999,"start2":21999,"length1":19,"length2":48},{"diffs":[[0,"sToMake));\r\n"],[1,"//    "],[0,"        }\r\n "]],"start1":22065,"start2":22065,"length1":24,"length2":30},{"diffs":[[0,"     }\r\n"],[1,"//     "],[0,"        "],[-1,"\r\n"],[1,"       \r\n//   "],[0,"        "],[1," "],[0,"for (i ="]],"start1":22086,"start2":22086,"length1":34,"length2":54},{"diffs":[[0,"ToMake; i++) {\r\n"],[1,"//    "],[0,"            crea"]],"start1":22156,"start2":22156,"length1":32,"length2":38},{"diffs":[[0,"ght "],[-1,"/ 2);\r\n"],[1,"* ((divisor + 1) / maxDivisions));\r\n//            }\r\n//"],[0,"    "]],"start1":22246,"start2":22246,"length1":15,"length2":63}]],"length":22371,"saved":false}
{"ts":1345645305085,"patch":[[{"diffs":[[0," \r\n       \r\n"],[1,"       \r\n"],[0,"    this.IsO"]],"start1":2644,"start2":2644,"length1":24,"length2":33},{"diffs":[[0,"chDevice"],[-1," = "],[0,"\r\n    \r\n"]],"start1":2681,"start2":2681,"length1":19,"length2":16}]],"length":22377,"saved":false}
{"ts":1345645306274,"patch":[[{"diffs":[[0,"    \r\n      "],[-1," "],[0,"\r\n    this.I"]],"start1":2650,"start2":2650,"length1":25,"length2":24}]],"length":22376,"saved":false}
{"ts":1345645307410,"patch":[[{"diffs":[[0,"      \r\n    "],[-1," "],[1,"if"],[0," \r\n    this."]],"start1":2648,"start2":2648,"length1":25,"length2":26}]],"length":22377,"saved":false}
{"ts":1345645308450,"patch":[[{"diffs":[[0,"\n    if "],[1,"($.support.mobile !== 'undefined')"],[0,"\r\n    th"]],"start1":2655,"start2":2655,"length1":16,"length2":50}]],"length":22411,"saved":false}
{"ts":1345645311577,"patch":[[{"diffs":[[0,"efined')"],[1," {\r\n        \r\n    }"],[0,"\r\n    th"]],"start1":2689,"start2":2689,"length1":16,"length2":35}]],"length":22430,"saved":false}
{"ts":1345645312981,"patch":[[{"diffs":[[0,"     \r\n    }"],[1," "],[0,"\r\n    this.I"]],"start1":2704,"start2":2704,"length1":24,"length2":25}]],"length":22431,"saved":false}
{"ts":1345645315480,"patch":[[{"diffs":[[0,"\r\n    } "],[1,"else {\r\n        \r\n    }"],[0,"\r\n    th"]],"start1":2709,"start2":2709,"length1":16,"length2":39}]],"length":22454,"saved":false}
{"ts":1345645317387,"patch":[[{"diffs":[[0," }\r\n"],[-1,"    this.IsOnTouchDevice\r\n"],[0,"    "]],"start1":2738,"start2":2738,"length1":34,"length2":8}]],"length":22428,"saved":false}
{"ts":1345645318602,"patch":[[{"diffs":[[0," } else {\r\n     "],[1,"this.IsOnTouchDevice"],[0,"   \r\n    }\r\n    "]],"start1":2714,"start2":2714,"length1":32,"length2":52}]],"length":22448,"saved":false}
{"ts":1345645319802,"patch":[[{"diffs":[[0,"lse {\r\n     "],[1,"   "],[0,"this.IsOnTou"]],"start1":2718,"start2":2718,"length1":24,"length2":27}]],"length":22451,"saved":false}
{"ts":1345645320852,"patch":[[{"diffs":[[0,"chDevice"],[-1,"   "],[0,"\r\n    }\r"]],"start1":2745,"start2":2745,"length1":19,"length2":16}]],"length":22448,"saved":false}
{"ts":1345645388201,"patch":[[{"diffs":[[0,"ined') {"],[-1," ="],[0,"\r\n      "]],"start1":2691,"start2":2691,"length1":18,"length2":16},{"diffs":[[0," {\r\n        "],[1,"this.IsOnTouchDevice = true;"],[0,"\r\n    } else"]],"start1":2697,"start2":2697,"length1":24,"length2":52},{"diffs":[[0,"chDevice"],[1," = false;"],[0,"\r\n    }\r"]],"start1":2773,"start2":2773,"length1":16,"length2":25}]],"length":22485,"saved":false}
{"contributors":[],"silentsave":true,"ts":1345671509536,"patch":[[{"diffs":[[0,"if ("],[-1,"$.support.mobile !== 'undefined'"],[1,"'ontouchstart' in document.documentElement"],[0,") {\r"]],"start1":2660,"start2":2660,"length1":40,"length2":50},{"diffs":[[0," }\r\n"],[1,""],[0,"    \r\n"],[-1,"    //engine.IsOnTouchDevice = ('ontouchstart' in document.documentElement);\r\n"],[0,"    "]],"start1":2805,"start2":2805,"length1":92,"length2":14},{"diffs":[[0,"! : "],[-1,"\""],[0,"\") + "],[-1,"\""],[0,"\"Ent"]],"start1":10420,"start2":10420,"length1":15,"length2":13}]],"length":22415,"saved":false}
{"contributors":[],"silentsave":false,"ts":1346028373767,"patch":[[{"diffs":[[0,"\r\n      "],[-1,""],[0,""],[1,"This array keeps track of touch positions in a multitouch environment\r\n      MousePos will still be set, but this will be viable if IsOnTouchDevice === true;\r\n    */\r\n    this.TouchPositions = new Array();\r\n    \r\n    /*\r\n      "],[0,"Currentl"]],"start1":2030,"start2":2030,"length1":16,"length2":243},{"diffs":[[0," = true;\r\n    \r\n"],[1,"    this.IsMouseDown = false;\r\n    \r\n"],[0,"    /*\r\n      Th"]],"start1":2558,"start2":2558,"length1":32,"length2":69},{"diffs":[[0,"\n       "],[-1,"$(\"#myCanvas\")"],[1," var canvasElem = $(\"#myCanvas\");\r\n       canvasElem"],[0,".mousemo"]],"start1":2768,"start2":2768,"length1":30,"length2":68},{"diffs":[[0,"  })"],[1,";\r\n       \r\n       canvasElem.mousedown(function() {\r\n           engine.IsMouseDown = true;\r\n       });\r\n       \r\n       canvasElem.mouseup(function() {\r\n           engine.IsMouseDown = false;\r\n       });\r\n    "],[0,"});"],[-1," "],[0,"\r\n  "]],"start1":2939,"start2":2939,"length1":12,"length2":221},{"diffs":[[0,"[0].pageY;\r\n"],[1,"            return;\r\n            var i = 0;\r\n            \r\n            engine.TouchPositions.clear();\r\n            \r\n            for (i = 0; i < args.targetTouches.length; i++) {\r\n                args.targetTouches[i] = new V2(args.targetTouches[i].pageX, args.targetTouches[i].pageY);\r\n            }\r\n"],[0,"        };\r\n"]],"start1":3736,"start2":3736,"length1":24,"length2":326},{"diffs":[[0,"ction (args) {\r\n"],[1,"            engine.IsMouseDown = true;\r\n"],[0,"            upda"]],"start1":4118,"start2":4118,"length1":32,"length2":72},{"diffs":[[0,"ction (args) {\r\n"],[1,"            engine.IsMouseDown = true;\r\n"],[0,"            upda"]],"start1":4303,"start2":4303,"length1":32,"length2":72},{"diffs":[[0,"unction (args) {"],[-1,""],[0,""],[1,"\r\n            engine.IsMouseDown = false;"],[0,"\r\n            up"]],"start1":4521,"start2":4521,"length1":32,"length2":73},{"diffs":[[0,"\"Mobile!"],[1,"\""],[0," : "],[1,"\""],[0,"\") + \"En"]],"start1":11347,"start2":11347,"length1":19,"length2":21},{"diffs":[[0,"tance = "],[-1,"4"],[1,"3"],[0,"00;\r\n   "]],"start1":14945,"start2":14945,"length1":17,"length2":17},{"diffs":[[0," = 0"],[-1,".1"],[0,";\r\n "]],"start1":15094,"start2":15094,"length1":10,"length2":8},{"diffs":[[0,"              } "],[-1,"else"],[1,"\r\n                            \r\n                            if (lengthToMouse >= sensingDistance || !entitySystem.IsMouseDown)"],[0," {\r\n            "]],"start1":15316,"start2":15316,"length1":36,"length2":158}]],"length":23471,"saved":false}
{"ts":1346028532203,"patch":[[{"diffs":[[0,"        "],[-1,"args.targetTouche"],[1,"engine.TouchPosition"],[0,"s[i] = n"]],"start1":3936,"start2":3936,"length1":33,"length2":36}]],"length":23474,"saved":false}
{"ts":1346028534548,"patch":[[{"diffs":[[0,"ions"],[-1,"[i] = "],[0,"new "]],"start1":3961,"start2":3961,"length1":14,"length2":8}]],"length":23468,"saved":false}
{"ts":1346028536611,"patch":[[{"diffs":[[0,"ositions"],[1,"P"],[0,"new V2(a"]],"start1":3957,"start2":3957,"length1":16,"length2":17}]],"length":23469,"saved":false}
{"ts":1346028538689,"patch":[[{"diffs":[[0,"ositions"],[-1,"P"],[1,".Push()"],[0,"new V2(a"]],"start1":3957,"start2":3957,"length1":17,"length2":23}]],"length":23475,"saved":false}
{"ts":1346028540995,"patch":[[{"diffs":[[0,"ions"],[-1,".Push"],[0,"()ne"]],"start1":3961,"start2":3961,"length1":13,"length2":8}]],"length":23470,"saved":false}
{"ts":1346028542430,"patch":[[{"diffs":[[0,"ositions"],[1,".p"],[0,"()new V2"]],"start1":3957,"start2":3957,"length1":16,"length2":18}]],"length":23472,"saved":false}
{"ts":1346028543866,"patch":[[{"diffs":[[0,"itions.p"],[1,"ush"],[0,"()new V2"]],"start1":3959,"start2":3959,"length1":16,"length2":19}]],"length":23475,"saved":false}
{"ts":1346028545200,"patch":[[{"diffs":[[0,"ns.push("],[-1,")"],[0,"new V2(a"]],"start1":3963,"start2":3963,"length1":17,"length2":16}]],"length":23474,"saved":false}
{"ts":1346028546330,"patch":[[{"diffs":[[0,"ns.push("],[-1,"n"],[0,"ew V2(ar"]],"start1":3963,"start2":3963,"length1":17,"length2":16}]],"length":23473,"saved":false}
{"ts":1346028547690,"patch":[[{"diffs":[[0,"ns.push("],[1,"n"],[0,"ew V2(ar"]],"start1":3963,"start2":3963,"length1":16,"length2":17}]],"length":23474,"saved":false}
{"ts":1346028550111,"patch":[[{"diffs":[[0,"].pageY)"],[1,")"],[0,";\r\n     "]],"start1":4027,"start2":4027,"length1":16,"length2":17}]],"length":23475,"saved":false}
{"ts":1346028568091,"patch":[[{"diffs":[[0,"es[0].pageY;"],[1,"\\"],[0,"\r\n          "]],"start1":3734,"start2":3734,"length1":24,"length2":25},{"diffs":[[0,";\\\r\n            "],[-1,"return;"],[0,"\r\n            va"]],"start1":3745,"start2":3745,"length1":39,"length2":32}]],"length":23469,"saved":false}
{"ts":1346028569791,"patch":[[{"diffs":[[0,"geY;"],[-1,"\\"],[0,"\r\n  "]],"start1":3742,"start2":3742,"length1":9,"length2":8}]],"length":23468,"saved":false}
{"ts":1346028866535,"patch":[[{"diffs":[[0,"ce = true;\r\n"],[1,"        \r\n"],[0,"    } else {"]],"start1":3248,"start2":3248,"length1":24,"length2":34}]],"length":23478,"saved":false}
{"ts":1346028868639,"patch":[[{"diffs":[[0,"e;\r\n        "],[1,"this.TouchPositions"],[0,"\r\n    } else"]],"start1":3256,"start2":3256,"length1":24,"length2":43}]],"length":23497,"saved":false}
{"ts":1346028936105,"patch":[[{"diffs":[[0,"ositions"],[1," = new Array();"],[0,"\r\n    } "]],"start1":3279,"start2":3279,"length1":16,"length2":31}]],"length":23512,"saved":false}
{"contributors":[],"silentsave":true,"ts":1346950240703,"patch":[[{"diffs":[[0,"Positions = "],[-1,"new Array()"],[1,"[]"],[0,";\r\n    \r\n   "]],"start1":2219,"start2":2219,"length1":35,"length2":26},{"diffs":[[0,"se;\r\n    \r\n    /"],[-1,"*\r\n"],[1,"/Initialization logic takes place wrapped in a function so that it doesn't interfere with the engine object, unless explicitly meant to.\r\n    (function() {\r\n        /*\r\n    "],[0,"      The jQuery"]],"start1":2591,"start2":2591,"length1":35,"length2":205},{"diffs":[[0,"nates.\r\n    "],[-1,"*/\r\n"],[1,"    */\r\n    "],[0,"    $(\"#myCa"]],"start1":2875,"start2":2875,"length1":28,"length2":36},{"diffs":[[0,"on() {\r\n        "],[1,"   "],[1," "],[0,"var canvasElem ="]],"start1":2930,"start2":2930,"length1":32,"length2":36},{"diffs":[[0,"yCanvas\");\r\n"],[1,"    "],[0,"       canva"]],"start1":2972,"start2":2972,"length1":24,"length2":28},{"diffs":[[0,"e) {\r\n          "],[1,"   "],[1," "],[0,"engine.MousePos."]],"start1":3025,"start2":3025,"length1":32,"length2":36},{"diffs":[[0,"s.X = e.pageX;\r\n"],[1,"    "],[0,"          engine"]],"start1":3059,"start2":3059,"length1":32,"length2":36},{"diffs":[[0,".pageY;\r\n       "],[1,"  "],[1,"  "],[0,"});\r\n       \r\n  "]],"start1":3110,"start2":3110,"length1":32,"length2":36},{"diffs":[[0,"});\r\n       "],[-1,"\r\n"],[1,"    \r\n  "],[0,"       "],[1,"  "],[0,"canvasElem.m"]],"start1":3130,"start2":3130,"length1":33,"length2":41},{"diffs":[[0,") {\r\n           "],[1,"    "],[0,"engine.IsMouseDo"]],"start1":3189,"start2":3189,"length1":32,"length2":36},{"diffs":[[0,"= true;\r\n       "],[1," "],[1,"   "],[0,"});\r\n       \r\n  "]],"start1":3228,"start2":3228,"length1":32,"length2":36},{"diffs":[[0,"});\r\n       "],[1,"   "],[1," "],[0,"\r\n"],[1,"    "],[0,"       canva"]],"start1":3248,"start2":3248,"length1":26,"length2":34},{"diffs":[[0,"p(function() {\r\n"],[1,"    "],[0,"           engin"]],"start1":3294,"start2":3294,"length1":32,"length2":36},{"diffs":[[0,"se;\r\n       "],[1,"    "],[0,"});\r\n"],[1,"    "],[0,"    });\r\n   "]],"start1":3349,"start2":3349,"length1":29,"length2":37},{"diffs":[[0,"\n       "],[-1,"\r\n"],[1,"    \r\n   "],[0,"    "],[1," "],[0,"if ('ont"]],"start1":3382,"start2":3382,"length1":22,"length2":30},{"diffs":[[0,"ent) {\r\n        "],[-1,"this"],[1,"    engine"],[0,".IsOnTouchDevice"]],"start1":3447,"start2":3447,"length1":36,"length2":42},{"diffs":[[0,"    "],[-1,"    this.TouchPositions = new Array();\r\n"],[0,"    "]],"start1":3499,"start2":3499,"length1":48,"length2":8},{"diffs":[[0,"        "],[-1,"this"],[1,"    engine"],[0,".IsOnTou"]],"start1":3517,"start2":3517,"length1":20,"length2":26},{"diffs":[[0,"e = false;\r\n"],[1,"    "],[0,"    }\r\n    \r"]],"start1":3550,"start2":3550,"length1":24,"length2":28},{"diffs":[[0," }\r\n    "],[1,"  "],[-1,"\r\n"],[1,"  \r\n   "],[0,"    "],[1," "],[0,"//helped"]],"start1":3569,"start2":3569,"length1":22,"length2":30},{"diffs":[[0,"nd-Mou\r\n"],[1,"    "],[0,"    if ("]],"start1":3692,"start2":3692,"length1":16,"length2":20},{"diffs":[[0,"        "],[1,"   "],[1," "],[0,"//we're "]],"start1":3739,"start2":3739,"length1":16,"length2":20},{"diffs":[[0,"ch device.\r\n"],[1,"    "],[0,"        var "]],"start1":3767,"start2":3767,"length1":24,"length2":28},{"diffs":[[0,"\")[0];\r\n        "],[1,"  "],[1,"  "],[0,"var updateEngine"]],"start1":3823,"start2":3823,"length1":32,"length2":36},{"diffs":[[0," {\r\n            "],[1,"    "],[0,"engine.MousePos."]],"start1":3897,"start2":3897,"length1":32,"length2":36},{"diffs":[[0,"X;\r\n            "],[1,"  "],[1,"  "],[0,"engine.MousePos."]],"start1":3963,"start2":3963,"length1":32,"length2":36},{"diffs":[[0,"Y;\r\n            "],[-1,"\r\n"],[0,"            var "]],"start1":4029,"start2":4029,"length1":34,"length2":32},{"diffs":[[0,"    "],[-1,"var i = 0;\r\n"],[1,"   "],[0,"     "],[-1,"   "],[1,"\r\n"],[0,"    "],[-1,"\r\n"],[0,"    "]],"start1":4053,"start2":4053,"length1":34,"length2":22},{"diffs":[[0,"ions"],[-1,".clear();\r\n"],[1," = [];\r\n    "],[0,"    "]],"start1":4100,"start2":4100,"length1":19,"length2":20},{"diffs":[[0,"              \r\n"],[1,"                var i = 0;\r\n    "],[0,"            for "]],"start1":4114,"start2":4114,"length1":32,"length2":64},{"diffs":[[0,"length; i++) {\r\n"],[1,"    "],[0,"                "]],"start1":4209,"start2":4209,"length1":32,"length2":36},{"diffs":[[0,");\r\n            "],[-1,"}\r\n"],[1,"    }\r\n    "],[0,"        };\r\n    "]],"start1":4336,"start2":4336,"length1":35,"length2":43},{"diffs":[[0,"    };\r\n        "],[1," "],[1,"   "],[0,"canvasElement.ad"]],"start1":4367,"start2":4367,"length1":32,"length2":36},{"diffs":[[0," {\r\n            "],[1,"    "],[0,"engine.IsMouseDo"]],"start1":4447,"start2":4447,"length1":32,"length2":36},{"diffs":[[0,"e;\r\n            "],[1," "],[1,"   "],[0,"updateEngineMous"]],"start1":4491,"start2":4491,"length1":32,"length2":36},{"diffs":[[0,"entArgs(args);\r\n"],[1,"    "],[0,"        }, false"]],"start1":4537,"start2":4537,"length1":32,"length2":36},{"diffs":[[0,"alse);\r\n        "],[1,"    "],[0,"canvasElement.ad"]],"start1":4569,"start2":4569,"length1":32,"length2":36},{"diffs":[[0,"ction (args) {\r\n"],[1,"    "],[0,"            engi"]],"start1":4636,"start2":4636,"length1":32,"length2":36},{"diffs":[[0,"e;\r\n            "],[1,"    "],[0,"updateEngineMous"]],"start1":4692,"start2":4692,"length1":32,"length2":36},{"diffs":[[0,"        "],[1,"   "],[1," "],[0,"args.pre"]],"start1":4758,"start2":4758,"length1":16,"length2":20},{"diffs":[[0,"ult();\r\n        "],[1,"    "],[0,"}, false);\r\n    "]],"start1":4786,"start2":4786,"length1":32,"length2":36},{"diffs":[[0,"alse);\r\n        "],[1,"   "],[1," "],[0,"canvasElement.ad"]],"start1":4810,"start2":4810,"length1":32,"length2":36},{"diffs":[[0," {\r\n            "],[1,"    "],[0,"engine.IsMouseDo"]],"start1":4888,"start2":4888,"length1":32,"length2":36},{"diffs":[[0,"e;\r\n            "],[1,"  "],[1,"  "],[0,"updateEngineMous"]],"start1":4933,"start2":4933,"length1":32,"length2":36},{"diffs":[[0,"args);\r\n        "],[1,"    "],[0,"}, false);\r\n    "]],"start1":4987,"start2":4987,"length1":32,"length2":36},{"diffs":[[0,"}, false);\r\n    "],[1,"   "],[1," "],[0,"}\r\n    "],[1,"})();"],[0,"\r\n    /*\r\n    Th"]],"start1":5007,"start2":5007,"length1":39,"length2":48},{"diffs":[[0,"}\r\n}\r\n\r\n"],[1,"\r\nvar image = new Image();\r\n        \r\n"],[0,"$(functi"]],"start1":12556,"start2":12556,"length1":16,"length2":54},{"diffs":[[0,"    "],[-1,"\t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //removed\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //update\r\n                            \r\n                            //var div = entity.Datas.ElementToMove;\r\n                            //var divPos = div.position();\r\n"],[1,"                    \r\n                            \r\n                            if (entitySystem.IsOnTouchDevice) {\r\n                                if (typeof entity.Datas.AveragePos === 'undefined') {\r\n                                    entity.Datas.AveragePos = new V2();\r\n                                }\r\n                            }\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //removed\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //update\r\n                            \r\n                            //A -> B :: B - A\r\n                            var currentPos = entity.Datas.Position;//.Init(divPos.left, divPos.top);\r\n                            \r\n                            var speedModifier = 1;\r\n                            var lengthToMouse = 10000;\r\n                            \r\n                            var sensingDistance = 300;\r\n                            var sensingDistanceSqr = sensingDistance * sensingDistance;\r\n                                                        \r\n                            if (entitySystem.IsOnTouchDevice && entitySystem.TouchPositions.Any()) {\r\n                                sensingDistance = 200;\r\n                                sensingDistanceSqr = sensingDistance * sensingDistance;\r\n                                \r\n                                //average out the positions of nearby touches and head for that point.                                \r\n                                var j = 0;\r\n                                for (j = 0; j < entitySystem.TouchPositions.length; j++) {\r\n                                    if (j === 0) {\r\n                                        entity.Datas.AveragePos.InitFromV2(entitySystem.TouchPositions.First());\r\n        "],[0,"    "]],"start1":14454,"start2":14454,"length1":358,"length2":1827},{"diffs":[[0,"                "],[1,"}"],[0,"\r\n              "]],"start1":16289,"start2":16289,"length1":32,"length2":33},{"diffs":[[0,"        "],[-1,"//A -> B :: B - A\r\n"],[1,"        \r\n        "],[0,"        "]],"start1":16328,"start2":16328,"length1":35,"length2":34},{"diffs":[[0,"var "],[-1,"currentPos = entity.Datas.Position;//.Init(divPos.left, divPos.top);\r\n                            var toMouse = entity.Datas.ToMouse.InitFromV2(entitySystem.Mouse"],[1,"touchToMouse = entitySystem.TouchPositions[j].Copy();\r\n                                    \r\n                                    touchToMouse.Sub(currentPos);\r\n                                    \r\n                                    if (touchToMouse.LengthSqr() < sensingDistanceSqr) {\r\n                                        //entity.Datas.AveragePos.Add(entitySystem.TouchPositions[j]);\r\n                                        entity.Datas.ToMouse.InitFromV2(touchToMouse);\r\n                                    }\r\n                                }\r\n//                                \r\n//                                var divideByAmount = 1;\r\n//                                if (entitySystem.TouchPositions.length > 1) {\r\n//                                    divideByAmount = entitySystem.TouchPositions.length;\r\n//                                }\r\n                                \r\n//                                entity.Datas.AveragePos.Divide(divideByAmount);\r\n//                                if (entityDatas.AveragePos.ToTouchPositions.Any()) {\r\n//                                    entity.Datas.ToMouse.InitFromV2(entityDatas.AveragePos.ToTouchPositions.First()).Sub(current"],[0,"Pos)"],[1,";"],[0,"\r\n"],[1,"//    "],[0,"        "],[1,"                    }\r\n"],[0,"    "]],"start1":16382,"start2":16382,"length1":184,"length2":1246},{"diffs":[[0,"    "],[-1,"                          .Sub(currentPos);\r\n                            var speedModifier = 1;\r\n                            var lengthT"],[1,"} else {                                \r\n                                entity.Datas.ToMouse.InitFromV2(entitySystem.MousePos).Sub(currentPos);\r\n                            }\r\n                            \r\n                            var toMouse = entity.Datas.ToMouse;\r\n                            \r\n                            entity.Datas.Rotation = Math.atan2(t"],[0,"oMouse"],[-1," ="],[1,".Y,"],[0," toM"]],"start1":17648,"start2":17648,"length1":152,"length2":384},{"diffs":[[0,"toMouse."],[-1,"Length("],[1,"X"],[0,");\r\n    "]],"start1":18029,"start2":18029,"length1":23,"length2":17},{"diffs":[[0,"    "],[-1,"var sensingDistance = 300"],[1,"lengthToMouse = toMouse.Length()"],[0,";\r\n "]],"start1":18096,"start2":18096,"length1":33,"length2":40},{"diffs":[[0,"       }"],[-1," "],[0,""],[1,""],[0,"\r\n      "]],"start1":18499,"start2":18499,"length1":17,"length2":16},{"diffs":[[0,"b(currentPos);\r\n"],[1,"\r\n"],[0,"                "]],"start1":18985,"start2":18985,"length1":32,"length2":34},{"diffs":[[0,"    "],[-1,"                              "],[1,"entity.Datas.Rotation = Math.atan2(toMouse.Y, toMouse.X);\r\n"],[0,"\r\n  "]],"start1":19035,"start2":19035,"length1":38,"length2":67},{"diffs":[[0,"  \r\n"],[-1,"                            //toMouse.Normalize()\r\n                            //       .Multiply(entity.Datas.Speed * (gameTime / 1000) * 5 * speedModifier);// * (5 * (Math.sin(entity.Datas.Counter) + 0.7)));\r\n                            entity.Datas.Rotation = Math.atan2(toMouse.Y, toMouse.X);\r\n                            //var rotation = Math.atan2(toMouse.Y, toMouse.X);\r\n                            \r\n                            //toMouse.Add(currentPos);\r\n                            \r\n                            \r\n                            //div.css({ WebkitTransform: 'rotate(' + rotation + 'rad)'});\r\n"],[0,"    "]],"start1":19615,"start2":19615,"length1":623,"length2":8},{"diffs":[[0,"      //render\r\n"],[1,"            if (entity.Datas.ContextToRenderOn === null || entity.Datas.ImageToRender === null) {\r\n                return;\r\n            }\r\n"],[0,"            \r\n  "]],"start1":22504,"start2":22504,"length1":32,"length2":171},{"diffs":[[0,"y.Datas."],[-1,"Position."],[0,""],[1,""],[0,"Rotation"]],"start1":22897,"start2":22897,"length1":25,"length2":16},{"diffs":[[0,"    "],[-1,"\r\n"],[0,"    "],[-1,"(function() {\r\n        var typedYet = false;\r\n        $(document).ready(function () {\r\n            $(window).keydown(function(args) {\r\n                if (typedYet) {\r\n                    $('div[id=getsMoved]').text(function(index, text) {\r\n     "],[1,"\r\n    entitySystem.RegisterComponent('CellAnimationUpdater', \r\n        new entitySystem.Component(function(entity, gameTime) {\r\n            //assigned\r\n            entity.Datas.Animation = new CellAnimation(entity.Datas.ImageFile, entity.Datas.CellX, entity.Datas.CellY, entity.Datas.FrameCount, entity.Datas.FramesPerSecond);\r\n"],[0,"        "],[1,"},\r\n"],[0,"        "],[-1,"   return text + String.fromCharCode(args.which);  "],[1,"function(entity, gameTime) {"],[0,"\r\n  "]],"start1":23210,"start2":23210,"length1":327,"length2":388},{"diffs":[[0," {\r\n            "],[1,"//removed\r\n"],[0,"        });\r\n   "]],"start1":23592,"start2":23592,"length1":32,"length2":43},{"diffs":[[0,"moved\r\n        }"],[-1,");"],[1,","],[0,"\r\n              "]],"start1":23612,"start2":23612,"length1":34,"length2":33},{"diffs":[[0,"        "],[-1,"        } else {"],[1,"function(entity, gameTime) {\r\n            //update"],[0,"\r\n      "]],"start1":23631,"start2":23631,"length1":32,"length2":66},{"diffs":[[0,"    "],[1,"\r\n"],[0,"        "],[-1,"$('div[id=getsMoved]').text(function(index, text) {\r\n                        return String.fromCharCode(args.which);  "],[1,"    entity.Datas.Animation.UpdateCell(gameTime);\r\n            entity.Datas.Animation.ImageToRender = entity.Datas.Animation.CurrentImage;"],[0,"\r\n  "]],"start1":23699,"start2":23699,"length1":134,"length2":155},{"diffs":[[0,"    "],[1,"},\r\n"],[0,"        "],[-1,"    });\r\n                    typedYet = true;"],[1,"function(entity, gameTime) {\r\n            //render"],[0,"\r\n  "]],"start1":23856,"start2":23856,"length1":61,"length2":70},{"diffs":[[0,"    "],[1,"}),\r\n"],[0,"        "],[-1,"}\r\n                "],[1,"['ImageCanvasRenderer'],\r\n        ['ImageFile', 'CellX', 'CellY', 'FrameCount', 'FramesPerSecond']);"],[0,"\r\n    "],[1,"\r\n"],[0,"    "],[-1,"    });\r\n        });\r\n"],[1,"(function() {\r\n        var typedYet = false;"],[0,"    "]],"start1":23928,"start2":23928,"length1":67,"length2":177},{"diffs":[[0,");\r\n"],[-1,"        var image = new Image();\r\n"],[0,"    "]],"start1":24372,"start2":24372,"length1":42,"length2":8},{"diffs":[[0,"    "],[-1,"var amountOfEntitiesToMake = entitySystem.IsOnTouchDevice ? 500 : 2000;\r\n        //random elements to make.\r\n"],[1,"//24 x 26\r\n        var animationEntity = entitySystem.CreateEntity();\r\n        \r\n        animationEntity.Datas.ImageFile = \"pokemon_sprites_1_151_by_dragonite14.png\";\r\n        animationEntity.Datas.CellX = 24;\r\n        animationEntity.Datas.CellY = 26;\r\n        animationEntity.Datas.FrameCount = 608;\r\n        animationEntity.Datas.FramesPerSecond = 5;                \r\n        animationEntity.Datas.Speed = 1000;//i + 1;\r\n        animationEntity.Datas.Position = new V2(100, 100);\r\n        animationEntity.Datas.Heading = new V2();\r\n        animationEntity.Datas.Rotation = 0;\r\n        animationEntity.Datas.ImageToRender = null;\r\n        animationEntity.Datas.ContextToRenderOn = canvasContext;\r\n        \r\n        animationEntity.AddComponent('CellAnimationUpdater');\r\n        \r\n        //random elements to make.\r\n        \r\n        var createMultipleRandomElements = function(amountOfEntitiesToMake) {\r\n    "],[0,"    "]],"start1":25493,"start2":25493,"length1":117,"length2":919},{"diffs":[[0,"ToMake; i++) {\r\n"],[1,"    "],[0,"            crea"]],"start1":26448,"start2":26448,"length1":32,"length2":36},{"diffs":[[0,"        "],[-1,"}\r\n"],[1,"    }\r\n        }\r\n        \r\n        createMultipleRandomElements(entitySystem.IsOnTouchDevice ? 250 : 2000);\r\n        \r\n        $(document).ready(function () {\r\n            $(window).keydown(function(args) {\r\n                var char = String.fromCharCode(args.which);\r\n                /*if (typedYet) {\r\n                    $('div[id=getsMoved]').text(function(index, text) {\r\n                        return text + char;  \r\n                    });\r\n                } else {\r\n                    $('div[id=getsMoved]').text(function(index, text) {\r\n                        return char;  \r\n                    });\r\n                    typedYet = true;\r\n                }*/\r\n                \r\n                if (char === ' ') {\r\n                    createMultipleRandomElements(10);\r\n                } else if (char === 'D') {\r\n                    //remove the last entity in the entities list\r\n                    for (i = 0; i < 10; i++) {\r\n                        if (entitySystem.EntityUpdateList.Any()) {\r\n                            entitySystem.RemoveEntity(entitySystem.EntityUpdateList.Last().Id);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });"],[0,"\r\n      "]],"start1":26554,"start2":26554,"length1":19,"length2":1220}]],"length":28410,"saved":false}
{"contributors":[],"silentsave":true,"ts":1347133506817,"patch":[[{"diffs":[[0,"ew Image();\r"],[1,"\n\r\nvar createAnimationEntity = null;\r"],[0,"\n        \r\n$"]],"start1":12579,"start2":12579,"length1":24,"length2":61},{"diffs":[[0,"oRender === null"],[-1,""],[0,""],[1,"\r\n                || typeof entity.Datas.ImageToRender === 'undefined'"],[0,") {\r\n           "]],"start1":22635,"start2":22635,"length1":32,"length2":102},{"diffs":[[0,"    //assigned\r\n"],[1,"            if (typeof entity.Datas.Animation === 'undefined') {\r\n    "],[0,"            enti"]],"start1":23461,"start2":23461,"length1":32,"length2":102},{"diffs":[[0,"mesPerSecond);\r\n"],[1,"            }\r\n            \r\n            entity.Datas.FrameDelta = 0;\r\n            entity.Datas.CurrentFrame = 0;\r\n"],[0,"        },\r\n    "]],"start1":23707,"start2":23707,"length1":32,"length2":147},{"diffs":[[0,"      //update\r\n"],[1,"            entity.Datas.Animation.FrameDelta = entity.Datas.FrameDelta;\r\n            entity.Datas.Animation.CurrentFrame = entity.Datas.CurrentFrame;\r\n"],[0,"            \r\n  "]],"start1":23967,"start2":23967,"length1":32,"length2":184},{"diffs":[[0,");\r\n            "],[1,"if (typeof "],[0,"entity.Datas.Ani"]],"start1":24203,"start2":24203,"length1":32,"length2":43},{"diffs":[[0,"ion."],[-1,"ImageToRender = entity.Datas.Animation.CurrentImag"],[1,"CurrentImage !== 'undefined') {\r\n                entity.Datas.ImageToRender = entity.Datas.Animation.CurrentImage;   \r\n            }\r\n            \r\n            entity.Datas.FrameDelta = entity.Datas.Animation.FrameDelta;\r\n            entity.Datas.CurrentFrame = entity.Datas.Animation.CurrentFram"],[0,"e;\r\n"]],"start1":24249,"start2":24249,"length1":58,"length2":304},{"diffs":[[0,"ng\";\r\n        \r\n"],[1,"        //entity.Datas.Animation \r\n        \r\n        //lol pokemon\r\n        var animation = new CellAnimation(\"pokemon_sprites_1_151_by_dragonite14.png\", 24, 26, 608, 5);\r\n        var animation = new CellAnimation(\"rolling_dot.png\", 10, 10, 100, 5);\r\n"],[0,"        var crea"]],"start1":25104,"start2":25104,"length1":32,"length2":283},{"diffs":[[0,"= image;"],[1,"            "],[0,"\r\n      "]],"start1":26199,"start2":26199,"length1":16,"length2":28},{"diffs":[[0,"              \r\n"],[1,"                ent.Datas.ImageFile = \"pokemon_sprites_1_151_by_dragonite14.png\";\r\n                ent.Datas.CellX = 24;\r\n                ent.Datas.CellY = 26;\r\n                ent.Datas.FrameCount = 608;\r\n                ent.Datas.FramesPerSecond = 5;\r\n                \r\n                ent.Datas.Animation = animation;\r\n                \r\n                ent.AddComponent('CellAnimationUpdater');\r\n                    \r\n"],[0,"                "]],"start1":26223,"start2":26223,"length1":32,"length2":453},{"diffs":[[0,"4 x 26\r\n        "],[1,"\r\n        createAnimationEntity = function() {\r\n            "],[0,"var animationEnt"]],"start1":26885,"start2":26885,"length1":32,"length2":92},{"diffs":[[0,"ity();\r\n        "],[-1,"\r\n"],[1,"    \r\n    "],[0,"        animatio"]],"start1":27005,"start2":27005,"length1":34,"length2":42},{"diffs":[[0,".png\";\r\n        "],[1," "],[1,"   "],[0,"animationEntity."]],"start1":27110,"start2":27110,"length1":32,"length2":36},{"diffs":[[0," = 24;\r\n        "],[1,"  "],[1,"  "],[0,"animationEntity."]],"start1":27157,"start2":27157,"length1":32,"length2":36},{"diffs":[[0," = 26;\r\n        "],[1,"   "],[1," "],[0,"animationEntity."]],"start1":27204,"start2":27204,"length1":32,"length2":36},{"diffs":[[0,"meCount = 608;\r\n"],[1,"    "],[0,"        animatio"]],"start1":27249,"start2":27249,"length1":32,"length2":36},{"diffs":[[0,"= 5;"],[-1,"           "],[1,"\r\n"],[0,"     "],[-1,"\r\n"],[0,"       "],[-1," "],[0,"anim"]],"start1":27315,"start2":27315,"length1":34,"length2":22},{"diffs":[[0," 1000;//i + 1;\r\n"],[1,"    "],[0,"        animatio"]],"start1":27362,"start2":27362,"length1":32,"length2":36},{"diffs":[[0," 100);\r\n        "],[1,"    "],[0,"animationEntity."]],"start1":27434,"start2":27434,"length1":32,"length2":36},{"diffs":[[0," V2();\r\n        "],[1," "],[1,"   "],[0,"animationEntity."]],"start1":27489,"start2":27489,"length1":32,"length2":36},{"diffs":[[0,".Rotation = 0;\r\n"],[1,"    "],[0,"        animatio"]],"start1":27530,"start2":27530,"length1":32,"length2":36},{"diffs":[[0," null;\r\n        "],[1,"  "],[1,"  "],[0,"animationEntity."]],"start1":27595,"start2":27595,"length1":32,"length2":36},{"diffs":[[0,"ntext;\r\n        "],[-1,"\r\n"],[1,"    \r\n            animationEntity.AddComponent('ImageCanvasRenderer');\r\n    "],[0,"        animatio"]],"start1":27665,"start2":27665,"length1":34,"length2":108},{"diffs":[[0,"ter');\r\n        "],[1,"};"],[0,"\r\n        //rand"]],"start1":27812,"start2":27812,"length1":32,"length2":34},{"diffs":[[0,"? 250 : "],[-1,"2"],[1,"1"],[0,"000);\r\n "]],"start1":28209,"start2":28209,"length1":17,"length2":17}]],"length":29963,"saved":false}
{"ts":1347133509707,"patch":[[{"diffs":[[0,"8, 5);\r\n        "],[1,"//"],[0,"var animation = "]],"start1":25284,"start2":25284,"length1":32,"length2":34}]],"length":29965,"saved":false}
{"ts":1347133607166,"patch":[[{"diffs":[[0,"6, 608, "],[-1,"5"],[1,"60"],[0,");\r\n    "]],"start1":25279,"start2":25279,"length1":17,"length2":18}]],"length":29966,"saved":false}
{"contributors":[],"silentsave":true,"ts":1347291603472,"patch":[[{"diffs":[[0,");\r\n        "],[-1,"//"],[0,"var animatio"]],"start1":25289,"start2":25289,"length1":26,"length2":24},{"diffs":[[0,"g\", "],[-1,"10"],[1,"4"],[0,", 1"],[-1,"0"],[0,", "],[-1,"100"],[1,"4"],[0,", 5)"]],"start1":25350,"start2":25350,"length1":19,"length2":15}]],"length":29960,"saved":false}
{"ts":1347291605325,"patch":[[{"diffs":[[0,", 60);\r\n        "],[1,"//"],[0,"var animation = "]],"start1":25285,"start2":25285,"length1":32,"length2":34}]],"length":29962,"saved":false}
