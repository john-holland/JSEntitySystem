{"ts":1350015576235,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"Array.prototype.Map = function(func) {\r\n    var mappedArray = new Array(this.length);\r\n\tvar i;\r\n\t\r\n\tfor (i = 0; i < this.length; i++) {\r\n\t\tmappedArray[i] = func(this[i]);\r\n\t}\r\n\t\r\n\treturn mappedArray;\r\n}\r\n\r\nArray.prototype.Select = Array.prototype.Map;\r\n\r\n//takes a function that takes: (accumulated, currentElement)\r\nArray.prototype.Fold = function(initialVal, func) {\r\n\tvar ret = initialVal;\r\n    var i;\r\n\tfor (i = 0; i < this.length; i++) {\r\n\t\tret = func(ret, this[i]);\r\n\t}\r\n\t\r\n\treturn ret;\r\n}\r\n\r\nArray.prototype.Aggregate = Array.Fold;\r\n\r\nArray.prototype.Find = function(predicate) {\r\n\tvar matches = [];\r\n\t\r\n\tvar i;\r\n\tfor (i = 0; i < this.length; i++) {\r\n\t\tif (predicate(this[i]))\r\n\t\t{\r\n\t\t\tmatches.push(this[i]);\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn matches;\r\n}\r\n\r\nArray.prototype.Where = Array.prototype.Find;\r\nArray.prototype.Filter = Array.prototype.Find;\r\n\r\nArray.prototype.First = function() {\r\n\treturn this[0];\r\n}\r\n\r\nArray.prototype.Last = function() {\r\n\treturn this[(this.length - 1)];\r\n}\r\n\r\nArray.prototype.Skip = function(amount) {\r\n\tvar remaining = this.length - amount;\r\n\t\r\n\t//can't skip more than exist!\r\n\tif (remaining > 0) {\r\n\t\tvar skipped = new Array(remaining);\r\n\t\r\n\t\tvar i;\r\n\t\tfor (i = amount; i < this.length; i++) {\r\n\t\t\tskipped[i];\r\n\t\t}\r\n\t\t\r\n\t\treturn skipped;\r\n\t}\r\n\t\r\n\treturn null;\r\n}\r\n\r\nArray.prototype.Take = function(amount) {\r\n\tif (this.length > amount) {\r\n\t\tamount = this.length;\r\n\t}\r\n\t\r\n\tvar takenElements = new Array(amount);\r\n\t\r\n\tvar i;\r\n\tfor (i = 0; i < amount; i++) {\r\n\t\ttakenElements[i] = this[i];\r\n\t}\r\n\t\r\n\treturn takenElements;\r\n}\r\n\r\n/*\r\n  The Any function accepts either a predicate function, a predicate object or\r\n  no parameter (in which case it simply checks to see if the Array has anything at all).\r\n  \r\n  Usage:\r\n  var collection = new Array(1, 2, 3);\r\n  \r\n  if (collection.Any(function(x) { return x == 3 })) {\r\n    //Yes it does have 3!\r\n  }\r\n  \r\n  if (collection.Any(2)) {\r\n    //yup it has 2!\r\n  }\r\n  \r\n  if (collection.Any()) {\r\n    //yup it has stuff.\r\n  }\r\n*/\r\nArray.prototype.Any = function(predicate) {\r\n    if (typeof predicate == 'undefined') {\r\n        return (this.length > 0);\r\n    }\r\n    \r\n    var i;\r\n    \r\n    if (typeof predicate == 'Function') {\r\n        for (i = 0; i < this.length; i++) {\r\n            if (predicate(this[i])) {\r\n                return true;\r\n            }\r\n        }\r\n    } else {        \r\n        for (i = 0; i < this.length; i++) {\r\n            if (this[i] === predicate) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    return false;\r\n}\r\n\r\n\r\n\r\n/* TODO FixME!?\r\n//Takes a function, then some arguments and stores them so that you can later\r\n//Call that function and it will remember its args.\r\n\r\n\tFor example,\r\n\t\r\n\tfunction plus(x, y)\r\n\t{\r\n\t\treturn x + y;\r\n\t}\r\n\t\r\n\tvar fivePlus(5).Curry();\r\n*/\r\nFunction.prototype.Curry = function() {\r\n    var args = new Array(arguments.length);\r\n    var self = this;\r\n    var i;\r\n    for (i = 0; i < arguments.length; i++) {\r\n        args[i] = arguments[i];\r\n    }\r\n    \r\n    return function() {\r\n        return self.apply(self, args.concat(arguments));\r\n    };\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":3092}]],"length":3092}
{"contributors":[],"silentsave":true,"ts":1351011984305,"patch":[[{"diffs":[[0,"ngth);\r\n"],[-1,"\t"],[1,"    "],[0,"var i;\r\n"],[-1,"\t"],[1,"    "],[0,"\r\n\tfor ("]],"start1":79,"start2":79,"length1":26,"length2":32},{"diffs":[[0,"= Array."],[1,"prototype."],[0,"Fold;\r\n\r"]],"start1":531,"start2":531,"length1":16,"length2":26},{"diffs":[[0,"d = "],[-1,"new Array(remaining)"],[1,"[]"],[0,";\r\n\t"]],"start1":1155,"start2":1155,"length1":28,"length2":10},{"diffs":[[0,"\tskipped"],[1,".push(this"],[0,"[i]"],[1,")"],[0,";\r\n\t\t}\r\n"]],"start1":1223,"start2":1223,"length1":19,"length2":30},{"diffs":[[0,"s = "],[-1,"new Array(amount)"],[1,"[]"],[0,";\r\n\t"]],"start1":1425,"start2":1425,"length1":25,"length2":10},{"diffs":[[0,"ents"],[-1,"[i] = "],[1,".push("],[0,"this[i]"],[1,")"],[0,";\r\n\t"]],"start1":1490,"start2":1490,"length1":21,"length2":22},{"diffs":[[0,"icate =="],[1,"="],[0," 'undefi"]],"start1":2053,"start2":2053,"length1":16,"length2":17},{"diffs":[[0,"e =="],[1,"="],[0," '"],[-1,"F"],[1,"f"],[0,"unct"]],"start1":2168,"start2":2168,"length1":11,"length2":12}]],"length":3089,"saved":false}
{"ts":1351011986252,"patch":[[{"diffs":[[0,"ngth);\r\n"],[-1,"    "],[1,"\t"],[0,"var i;\r\n"],[-1,"    "],[1,"\t"],[0,"\r\n\tfor ("]],"start1":79,"start2":79,"length1":32,"length2":26},{"diffs":[[0,"ate = Array."],[-1,"prototype."],[0,"Fold;\r\n\r\nArr"]],"start1":521,"start2":521,"length1":34,"length2":24},{"diffs":[[0,"ipped = "],[-1,"[]"],[1,"new Array(remaining)"],[0,";\r\n\t\r\n\t\t"]],"start1":1135,"start2":1135,"length1":18,"length2":36},{"diffs":[[0,"\tskipped"],[-1,".push(this"],[0,"[i]"],[-1,")"],[0,";\r\n\t\t}\r\n"]],"start1":1225,"start2":1225,"length1":30,"length2":19},{"diffs":[[0,"nElements = "],[-1,"[]"],[1,"new Array(amount)"],[0,";\r\n\t\r\n\tvar i"]],"start1":1408,"start2":1408,"length1":26,"length2":41},{"diffs":[[0,"Elements"],[-1,".push("],[1,"[i] = "],[0,"this[i]"],[-1,")"],[0,";\r\n\t}\r\n\t"]],"start1":1492,"start2":1492,"length1":30,"length2":29},{"diffs":[[0,"icate =="],[-1,"="],[0," 'undefi"]],"start1":2058,"start2":2058,"length1":17,"length2":16},{"diffs":[[0,"e =="],[-1,"="],[0," '"],[-1,"f"],[1,"F"],[0,"unct"]],"start1":2172,"start2":2172,"length1":12,"length2":11}]],"length":3092,"saved":false}
{"ts":1351011988117,"patch":[[{"diffs":[[0,"ngth);\r\n"],[-1,"\t"],[1,"    "],[0,"var i;\r\n"],[-1,"\t"],[1,"    "],[0,"\r\n\tfor ("]],"start1":79,"start2":79,"length1":26,"length2":32},{"diffs":[[0,"= Array."],[1,"prototype."],[0,"Fold;\r\n\r"]],"start1":531,"start2":531,"length1":16,"length2":26},{"diffs":[[0,"d = "],[-1,"new Array(remaining)"],[1,"[]"],[0,";\r\n\t"]],"start1":1155,"start2":1155,"length1":28,"length2":10},{"diffs":[[0,"\tskipped"],[1,".push(this"],[0,"[i]"],[1,")"],[0,";\r\n\t\t}\r\n"]],"start1":1223,"start2":1223,"length1":19,"length2":30},{"diffs":[[0,"s = "],[-1,"new Array(amount)"],[1,"[]"],[0,";\r\n\t"]],"start1":1425,"start2":1425,"length1":25,"length2":10},{"diffs":[[0,"ents"],[-1,"[i] = "],[1,".push("],[0,"this[i]"],[1,")"],[0,";\r\n\t"]],"start1":1490,"start2":1490,"length1":21,"length2":22},{"diffs":[[0,"icate =="],[1,"="],[0," 'undefi"]],"start1":2053,"start2":2053,"length1":16,"length2":17},{"diffs":[[0,"e =="],[1,"="],[0," '"],[-1,"F"],[1,"f"],[0,"unct"]],"start1":2168,"start2":2168,"length1":11,"length2":12}]],"length":3089,"saved":false}
