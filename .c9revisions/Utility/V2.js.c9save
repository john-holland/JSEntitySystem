{"ts":1350097631443,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\r\n  A simple vector2 class. Each operation returns a new vector2, so beware of garbage collection!\r\n  \r\n  TODO: Make side effecting versions of the functions below for performance benefits.\r\n*/\r\nfunction V2(x, y) {\r\n    if (typeof x === 'undefined' || typeof y === 'undefined') {\r\n        this.X = 0;\r\n        this.Y = 0;\r\n    } else {\r\n        this.X = x;\r\n        this.Y = y;\r\n    }\r\n    \r\n    /*\r\n      Checks the value passed in to make sure it's a Vector2.\r\n    */\r\n    var IsVector2 = function (value) {\r\n        return value.constructor === V2;\r\n    };\r\n    \r\n    this.IsVector2 = IsVector2;\r\n    \r\n    /*\r\n      Performs a Dot on this V2 and the V2 passed in.\r\n    */\r\n    this.Dot = function(vec2) {\r\n        return (this.X * vec2.X + this.Y * vec2.Y); \r\n    }\r\n\r\n    /*\r\n      Returns the Length of the V2. It should be noted that LengthSqr should be used\r\n      for greater performance.\r\n    */\r\n    this.Length = function() {\r\n        return Math.sqrt(this.Dot(this)); \r\n    }\r\n\r\n    /*\r\n      Returns the length * length of the V2. Faster than V2.Length as it does not\r\n      make a Math.sqrt call.\r\n    */\r\n    this.LengthSqr = function() { \r\n        return this.Dot(this); \r\n    }\r\n    \r\n    /*\r\n      Returns the Absolute value for this vector's X and Y in a new V2.\r\n    */\r\n    this.Abs = function() {\r\n        this.X = Math.abs(this.X);\r\n        this.Y = Math.abs(this.Y);\r\n        return this;\r\n    }\r\n\r\n    /*\r\n      Returns the unit length V2 (vector components divided by length)\r\n    */\r\n    this.Normalize = function() {\r\n        var vlen = this.Length();\r\n        this.X = (this.X / vlen);\r\n        this.Y = (this.Y / vlen);\r\n        return this;\r\n    }\r\n    \r\n    /*\r\n      Returns the product of this vector and either a scalar or a V2 passed in.\r\n    */\r\n    this.Multiply = function (value) {\r\n        if (IsVector2(value)) {\r\n            this.X = (this.X * value.X);\r\n            this.Y = (this.Y * value.Y);\r\n            return this;\r\n        } else {\r\n            this.X = (this.X * value);\r\n            this.Y = (this.Y * value);\r\n            return this;\r\n        }\r\n    }\r\n    \r\n    /*\r\n      Returns the divisor of this vector and a scalar passed in.\r\n    */\r\n    this.Divide = function(value) {\r\n        this.X = (this.X / value);\r\n        this.Y = (this.Y / value);\r\n        return this;\r\n    }\r\n    \r\n    /*\r\n      Returns the sum of this vector and either a scalar or a V2 passed in.\r\n    */\r\n    this.Add = function(value) {\r\n        if (IsVector2(value)) {\r\n            this.X = (this.X + value.X);\r\n            this.Y = (this.Y + value.Y);\r\n            return this;\r\n        } else {\r\n            this.X = (this.X + value);\r\n            this.Y = (this.Y + value);\r\n            return this;\r\n        }\r\n    }\r\n    \r\n    /*\r\n      Returns the difference of this vector and either a scalar or a V2 passed in.\r\n    */\r\n    this.Sub = function(value) {\r\n        if (IsVector2(value)) { \r\n            this.X = (this.X - value.X);\r\n            this.Y = (this.Y - value.Y);\r\n            return this;\r\n        } else {\r\n            this.X = (this.X - value);\r\n            this.Y = (this.Y - value);\r\n            return this;\r\n        }\r\n    }\r\n    \r\n    this.Init = function(_x, _y) {\r\n        this.X = _x;\r\n        this.Y = _y;\r\n        return this;\r\n    }\r\n    \r\n    this.InitFromV2 = function(vec2) {\r\n        this.X = vec2.X;\r\n        this.Y = vec2.Y;\r\n        return this;\r\n    }\r\n    \r\n    this.Copy = function() {\r\n        return new V2(this.X, this.Y);\r\n    }\r\n    \r\n    this.AsImmutable = function() {\r\n        return new ImmutableV2(this.X, this.Y);\r\n    }\r\n}\r\n\r\n\r\nfunction ImmutableV2(x, y) {\r\n    if (typeof x === 'undefined' || typeof y === 'undefined') {\r\n        this.X = 0;\r\n        this.Y = 0;\r\n    } else {\r\n        this.X = x;\r\n        this.Y = y;\r\n    }\r\n    \r\n    /*\r\n      Checks the value passed in to make sure it's a Vector2.\r\n    */\r\n    var IsVector2 = function (value) {\r\n        return value.constructor === V2;\r\n    };\r\n    \r\n    /*\r\n      Performs a Dot on this V2 and the V2 passed in.\r\n    */\r\n    this.Dot = function(vec2) {\r\n        return (this.X * vec2.X + this.Y * vec2.Y); \r\n    }\r\n\r\n    /*\r\n      Returns the Length of the V2. It should be noted that LengthSqr should be used\r\n      for greater performance.\r\n    */\r\n    this.Length = function() {\r\n        return Math.sqrt(this.Dot(this)); \r\n    }\r\n\r\n    /*\r\n      Returns the length * length of the V2. Faster than V2.Length as it does not\r\n      make a Math.sqrt call.\r\n    */\r\n    this.LengthSqr = function() { \r\n        return this.Dot(this); \r\n    }\r\n    \r\n    /*\r\n      Returns the Absolute value for this vector's X and Y in a new V2.\r\n    */\r\n    this.Abs = function() {\r\n        return new V2(Math.abs(this.X), Math.abs(this.Y));\r\n    }\r\n\r\n    /*\r\n      Returns the unit length V2 (vector components divided by length)\r\n    */\r\n    this.Normalize = function() {\r\n        var vlen = this.Length();\r\n        return new V2(this.X / vlen, this.Y / vlen);\r\n    }\r\n    \r\n    /*\r\n      Returns the product of this vector and either a scalar or a V2 passed in.\r\n    */\r\n    this.Multiply = function (value) {\r\n        if (IsVector2(value)) {\r\n            return new V2(this.X * value.X, this.Y * value.Y);\r\n        } else {\r\n            return new V2(this.X * value, this.Y * value);   \r\n        }\r\n    }\r\n    \r\n    /*\r\n      Returns the divisor of this vector and a scalar passed in.\r\n    */\r\n    this.Divide = function(value) {\r\n        return new V2(this.X / value, this.Y / value); \r\n    }\r\n    \r\n    /*\r\n      Returns the sum of this vector and either a scalar or a V2 passed in.\r\n    */\r\n    this.Add = function(value) {\r\n        if (IsVector2(value)) {\r\n            return new V2(this.X + value.X, this.Y + value.Y); \r\n        } else {\r\n            return new V2(this.X + value, this.Y + value);\r\n        }\r\n    }\r\n    \r\n    /*\r\n      Returns the difference of this vector and either a scalar or a V2 passed in.\r\n    */\r\n    this.Sub = function(value) {\r\n        if (IsVector2(value)) { \r\n            return new V2(this.X - value.X, this.Y - value.Y);\r\n        } else {\r\n            return new V2(this.X - value, this.Y - value); \r\n        }\r\n    }\r\n    \r\n    this.AsMutable = function() {\r\n        return new V2(this.X, this.Y);\r\n    }\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":6275}]],"length":6275}
{"contributors":[],"silentsave":true,"ts":1351011978165,"patch":[[{"diffs":[[0,"nstructor === V2"],[1," || value.constructor === ImmutableV2"],[0,";\r\n    };\r\n    \r"]],"start1":536,"start2":536,"length1":32,"length2":69},{"diffs":[[0,"r === V2"],[-1,""],[0,""],[1," || value.constructor === ImmutableV2"],[0,";\r\n    }"]],"start1":4005,"start2":4005,"length1":16,"length2":53},{"diffs":[[0,"this)); \r\n    }\r"],[1,"\n    \r\n    this.Perpindicular = function() {\r\n        return new ImmutableV2(-this.Y, this.X);\r\n    }\r"],[0,"\n\r\n    /*\r\n     "]],"start1":4434,"start2":4434,"length1":32,"length2":134},{"diffs":[[0,"urn new "],[-1,""],[0,""],[1,"Immutable"],[0,"V2(Math."]],"start1":4895,"start2":4895,"length1":16,"length2":25},{"diffs":[[0,"     return new "],[-1,""],[0,""],[1,"Immutable"],[0,"V2(this.X / vlen"]],"start1":5123,"start2":5123,"length1":32,"length2":41},{"diffs":[[0,"     return new "],[1,"Immutable"],[0,"V2(this.X * valu"]],"start1":5373,"start2":5373,"length1":32,"length2":41},{"diffs":[[0,"     return new "],[1,"Immutable"],[0,"V2(this.X * valu"]],"start1":5464,"start2":5464,"length1":32,"length2":41},{"diffs":[[0,"     return new "],[-1,""],[0,""],[1,"Immutable"],[0,"V2(this.X / valu"]],"start1":5675,"start2":5675,"length1":32,"length2":41},{"diffs":[[0,"     return new "],[1,"Immutable"],[0,"V2(this.X + valu"]],"start1":5918,"start2":5918,"length1":32,"length2":41},{"diffs":[[0,"     return new "],[1,"Immutable"],[0,"V2(this.X + valu"]],"start1":6010,"start2":6010,"length1":32,"length2":41},{"diffs":[[0,"     return new "],[1,"Immutable"],[0,"V2(this.X - valu"]],"start1":6271,"start2":6271,"length1":32,"length2":41},{"diffs":[[0,"     return new "],[1,"Immutable"],[0,"V2(this.X - valu"]],"start1":6362,"start2":6362,"length1":32,"length2":41}]],"length":6532,"saved":false}
{"ts":1351017488549,"patch":[[{"diffs":[[0,";\r\n    }\r\n    \r\n"],[1,"    \r\n    \r\n"],[0,"    this.Copy = "]],"start1":3450,"start2":3450,"length1":32,"length2":44}]],"length":6544,"saved":false}
{"ts":1351017490025,"patch":[[{"diffs":[[0,"\n    }\r\n"],[-1,"    \r\n    "],[0,"\r\n    \r\n"]],"start1":3452,"start2":3452,"length1":26,"length2":16}]],"length":6534,"saved":false}
{"ts":1351017491341,"patch":[[{"diffs":[[0,"is;\r\n    }\r\n"],[-1,"\r\n"],[0,"    \r\n    th"]],"start1":3448,"start2":3448,"length1":26,"length2":24}]],"length":6532,"saved":false}
{"ts":1351017494865,"patch":[[{"diffs":[[0,"\n    }\r\n"],[1,"    \r\n    this.To\r\n"],[0,"}\r\n\r\n\r\nf"]],"start1":3634,"start2":3634,"length1":16,"length2":35}]],"length":6551,"saved":false}
{"ts":1351017495532,"patch":[[{"diffs":[[0," this.To"],[1,"R"],[0,"\r\n}\r\n\r\n\r"]],"start1":3651,"start2":3651,"length1":16,"length2":17}]],"length":6552,"saved":false}
{"ts":1351017497377,"patch":[[{"diffs":[[0,"this.ToR"],[1,"adians"],[0,"\r\n}\r\n\r\n\r"]],"start1":3652,"start2":3652,"length1":16,"length2":22}]],"length":6558,"saved":false}
{"ts":1351017502558,"patch":[[{"diffs":[[0,"oRadians"],[1," = function() {\r\n        \r\n    }"],[0,"\r\n}\r\n\r\n\r"]],"start1":3658,"start2":3658,"length1":16,"length2":48}]],"length":6590,"saved":false}
{"ts":1351017505044,"patch":[[{"diffs":[[0," {\r\n        "],[1,"return Math."],[0,"\r\n    }\r\n}\r\n"]],"start1":3679,"start2":3679,"length1":24,"length2":36}]],"length":6602,"saved":false}
{"ts":1351017507061,"patch":[[{"diffs":[[0,"rn Math."],[1,"ata"],[0,"\r\n    }\r"]],"start1":3695,"start2":3695,"length1":16,"length2":19}]],"length":6605,"saved":false}
{"ts":1351017508603,"patch":[[{"diffs":[[0,"Math.ata"],[1,"n2()"],[0,"\r\n    }\r"]],"start1":3698,"start2":3698,"length1":16,"length2":20}]],"length":6609,"saved":false}
{"ts":1351017511618,"patch":[[{"diffs":[[0,"h.atan2("],[1,"this.Y, this.X"],[0,")\r\n    }"]],"start1":3701,"start2":3701,"length1":16,"length2":30}]],"length":6623,"saved":false}
{"ts":1351017513158,"patch":[[{"diffs":[[0," this.X)"],[1,";"],[0,"\r\n    }\r"]],"start1":3716,"start2":3716,"length1":16,"length2":17}]],"length":6624,"saved":false}
{"ts":1351017522792,"patch":[[{"diffs":[[0,"his.Y);\r\n    }\r\n"],[1,"    \r\n    \r\n    this.ToRadians = function() {\r\n        return Math.atan2(this.Y, this.X);\r\n    }\r\n"],[0,"}"]],"start1":6607,"start2":6607,"length1":17,"length2":115}]],"length":6722,"saved":false}
{"ts":1351017525398,"patch":[[{"diffs":[[0,"\r\n    \r\n"],[-1,"    "],[0,"\r\n    th"]],"start1":6621,"start2":6621,"length1":20,"length2":16}]],"length":6718,"saved":false}
{"ts":1351017526420,"patch":[[{"diffs":[[0,"\r\n    \r\n"],[-1,"\r\n"],[0,"    this"]],"start1":6621,"start2":6621,"length1":18,"length2":16}]],"length":6716,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351296872213,"patch":[[{"diffs":[[0,"\r\n    };\r\n    \r\n"],[1,"        this.Equals = function(vec2) {\r\n        return IsVector2(vec2) && this.X == vec2.X && this.Y == vec2.Y;\r\n    };\r\n    \r\n"],[0,"    /*\r\n      Pe"]],"start1":4143,"start2":4143,"length1":32,"length2":159}]],"length":6843,"saved":false}
{"ts":1351296875318,"patch":[[{"diffs":[[0,"  };\r\n    \r\n"],[-1,"    "],[0,"    this.Equ"]],"start1":4147,"start2":4147,"length1":28,"length2":24}]],"length":6839,"saved":false}
