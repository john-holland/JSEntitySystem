{"ts":1351451552274,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\r\n * Canvas2Image v0.1\r\n * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk\r\n * MIT License [http://www.opensource.org/licenses/mit-license.php]\r\n */\r\n\r\nvar Canvas2Image = (function() {\r\n\r\n\t// check if we have canvas support\r\n\tvar bHasCanvas = false;\r\n\tvar oCanvas = document.createElement(\"canvas\");\r\n\tif (oCanvas.getContext(\"2d\")) {\r\n\t\tbHasCanvas = true;\r\n\t}\r\n\r\n\t// no canvas, bail out.\r\n\tif (!bHasCanvas) {\r\n\t\treturn {\r\n\t\t\tsaveAsBMP : function(){},\r\n\t\t\tsaveAsPNG : function(){},\r\n\t\t\tsaveAsJPEG : function(){}\r\n\t\t}\r\n\t}\r\n\r\n\tvar bHasImageData = !!(oCanvas.getContext(\"2d\").getImageData);\r\n\tvar bHasDataURL = !!(oCanvas.toDataURL);\r\n\tvar bHasBase64 = !!(window.btoa);\r\n\r\n\tvar strDownloadMime = \"image/octet-stream\";\r\n\r\n\t// ok, we're good\r\n\tvar readCanvasData = function(oCanvas) {\r\n\t\tvar iWidth = parseInt(oCanvas.width);\r\n\t\tvar iHeight = parseInt(oCanvas.height);\r\n\t\treturn oCanvas.getContext(\"2d\").getImageData(0,0,iWidth,iHeight);\r\n\t}\r\n\r\n\t// base64 encodes either a string or an array of charcodes\r\n\tvar encodeData = function(data) {\r\n\t\tvar strData = \"\";\r\n\t\tif (typeof data == \"string\") {\r\n\t\t\tstrData = data;\r\n\t\t} else {\r\n\t\t\tvar aData = data;\r\n\t\t\tfor (var i=0;i<aData.length;i++) {\r\n\t\t\t\tstrData += String.fromCharCode(aData[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn btoa(strData);\r\n\t}\r\n\r\n\t// creates a base64 encoded string containing BMP data\r\n\t// takes an imagedata object as argument\r\n\tvar createBMP = function(oData) {\r\n\t\tvar aHeader = [];\r\n\t\r\n\t\tvar iWidth = oData.width;\r\n\t\tvar iHeight = oData.height;\r\n\r\n\t\taHeader.push(0x42); // magic 1\r\n\t\taHeader.push(0x4D); \r\n\t\r\n\t\tvar iFileSize = iWidth*iHeight*3 + 54; // total header size = 54 bytes\r\n\t\taHeader.push(iFileSize % 256); iFileSize = Math.floor(iFileSize / 256);\r\n\t\taHeader.push(iFileSize % 256); iFileSize = Math.floor(iFileSize / 256);\r\n\t\taHeader.push(iFileSize % 256); iFileSize = Math.floor(iFileSize / 256);\r\n\t\taHeader.push(iFileSize % 256);\r\n\r\n\t\taHeader.push(0); // reserved\r\n\t\taHeader.push(0);\r\n\t\taHeader.push(0); // reserved\r\n\t\taHeader.push(0);\r\n\r\n\t\taHeader.push(54); // dataoffset\r\n\t\taHeader.push(0);\r\n\t\taHeader.push(0);\r\n\t\taHeader.push(0);\r\n\r\n\t\tvar aInfoHeader = [];\r\n\t\taInfoHeader.push(40); // info header size\r\n\t\taInfoHeader.push(0);\r\n\t\taInfoHeader.push(0);\r\n\t\taInfoHeader.push(0);\r\n\r\n\t\tvar iImageWidth = iWidth;\r\n\t\taInfoHeader.push(iImageWidth % 256); iImageWidth = Math.floor(iImageWidth / 256);\r\n\t\taInfoHeader.push(iImageWidth % 256); iImageWidth = Math.floor(iImageWidth / 256);\r\n\t\taInfoHeader.push(iImageWidth % 256); iImageWidth = Math.floor(iImageWidth / 256);\r\n\t\taInfoHeader.push(iImageWidth % 256);\r\n\t\r\n\t\tvar iImageHeight = iHeight;\r\n\t\taInfoHeader.push(iImageHeight % 256); iImageHeight = Math.floor(iImageHeight / 256);\r\n\t\taInfoHeader.push(iImageHeight % 256); iImageHeight = Math.floor(iImageHeight / 256);\r\n\t\taInfoHeader.push(iImageHeight % 256); iImageHeight = Math.floor(iImageHeight / 256);\r\n\t\taInfoHeader.push(iImageHeight % 256);\r\n\t\r\n\t\taInfoHeader.push(1); // num of planes\r\n\t\taInfoHeader.push(0);\r\n\t\r\n\t\taInfoHeader.push(24); // num of bits per pixel\r\n\t\taInfoHeader.push(0);\r\n\t\r\n\t\taInfoHeader.push(0); // compression = none\r\n\t\taInfoHeader.push(0);\r\n\t\taInfoHeader.push(0);\r\n\t\taInfoHeader.push(0);\r\n\t\r\n\t\tvar iDataSize = iWidth*iHeight*3; \r\n\t\taInfoHeader.push(iDataSize % 256); iDataSize = Math.floor(iDataSize / 256);\r\n\t\taInfoHeader.push(iDataSize % 256); iDataSize = Math.floor(iDataSize / 256);\r\n\t\taInfoHeader.push(iDataSize % 256); iDataSize = Math.floor(iDataSize / 256);\r\n\t\taInfoHeader.push(iDataSize % 256); \r\n\t\r\n\t\tfor (var i=0;i<16;i++) {\r\n\t\t\taInfoHeader.push(0);\t// these bytes not used\r\n\t\t}\r\n\t\r\n\t\tvar iPadding = (4 - ((iWidth * 3) % 4)) % 4;\r\n\r\n\t\tvar aImgData = oData.data;\r\n\r\n\t\tvar strPixelData = \"\";\r\n\t\tvar y = iHeight;\r\n\t\tdo {\r\n\t\t\tvar iOffsetY = iWidth*(y-1)*4;\r\n\t\t\tvar strPixelRow = \"\";\r\n\t\t\tfor (var x=0;x<iWidth;x++) {\r\n\t\t\t\tvar iOffsetX = 4*x;\r\n\r\n\t\t\t\tstrPixelRow += String.fromCharCode(aImgData[iOffsetY+iOffsetX+2]);\r\n\t\t\t\tstrPixelRow += String.fromCharCode(aImgData[iOffsetY+iOffsetX+1]);\r\n\t\t\t\tstrPixelRow += String.fromCharCode(aImgData[iOffsetY+iOffsetX]);\r\n\t\t\t}\r\n\t\t\tfor (var c=0;c<iPadding;c++) {\r\n\t\t\t\tstrPixelRow += String.fromCharCode(0);\r\n\t\t\t}\r\n\t\t\tstrPixelData += strPixelRow;\r\n\t\t} while (--y);\r\n\r\n\t\tvar strEncoded = encodeData(aHeader.concat(aInfoHeader)) + encodeData(strPixelData);\r\n\r\n\t\treturn strEncoded;\r\n\t}\r\n\r\n\r\n\t// sends the generated file to the client\r\n\tvar saveFile = function(strData) {\r\n\t\tdocument.location.href = strData;\r\n\t}\r\n\r\n\tvar makeDataURI = function(strData, strMime) {\r\n\t\treturn \"data:\" + strMime + \";base64,\" + strData;\r\n\t}\r\n\r\n\t// generates a <img> object containing the imagedata\r\n\tvar makeImageObject = function(strSource) {\r\n\t\tvar oImgElement = document.createElement(\"img\");\r\n\t\toImgElement.src = strSource;\r\n\t\treturn oImgElement;\r\n\t}\r\n\r\n\tvar scaleCanvas = function(oCanvas, iWidth, iHeight) {\r\n\t\tif (iWidth && iHeight) {\r\n\t\t\tvar oSaveCanvas = document.createElement(\"canvas\");\r\n\t\t\toSaveCanvas.width = iWidth;\r\n\t\t\toSaveCanvas.height = iHeight;\r\n\t\t\toSaveCanvas.style.width = iWidth+\"px\";\r\n\t\t\toSaveCanvas.style.height = iHeight+\"px\";\r\n\r\n\t\t\tvar oSaveCtx = oSaveCanvas.getContext(\"2d\");\r\n\r\n\t\t\toSaveCtx.drawImage(oCanvas, 0, 0, oCanvas.width, oCanvas.height, 0, 0, iWidth, iHeight);\r\n\t\t\treturn oSaveCanvas;\r\n\t\t}\r\n\t\treturn oCanvas;\r\n\t}\r\n\r\n\treturn {\r\n\r\n\t\tsaveAsPNG : function(oCanvas, bReturnImg, iWidth, iHeight) {\r\n\t\t\tif (!bHasDataURL) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar oScaledCanvas = scaleCanvas(oCanvas, iWidth, iHeight);\r\n\t\t\tvar strData = oScaledCanvas.toDataURL(\"image/png\");\r\n\t\t\tif (bReturnImg) {\r\n\t\t\t\treturn makeImageObject(strData);\r\n\t\t\t} else {\r\n\t\t\t\tsaveFile(strData.replace(\"image/png\", strDownloadMime));\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\tsaveAsJPEG : function(oCanvas, bReturnImg, iWidth, iHeight) {\r\n\t\t\tif (!bHasDataURL) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvar oScaledCanvas = scaleCanvas(oCanvas, iWidth, iHeight);\r\n\t\t\tvar strMime = \"image/jpeg\";\r\n\t\t\tvar strData = oScaledCanvas.toDataURL(strMime);\r\n\t\r\n\t\t\t// check if browser actually supports jpeg by looking for the mime type in the data uri.\r\n\t\t\t// if not, return false\r\n\t\t\tif (strData.indexOf(strMime) != 5) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (bReturnImg) {\r\n\t\t\t\treturn makeImageObject(strData);\r\n\t\t\t} else {\r\n\t\t\t\tsaveFile(strData.replace(strMime, strDownloadMime));\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\tsaveAsBMP : function(oCanvas, bReturnImg, iWidth, iHeight) {\r\n\t\t\tif (!(bHasImageData && bHasBase64)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvar oScaledCanvas = scaleCanvas(oCanvas, iWidth, iHeight);\r\n\r\n\t\t\tvar oData = readCanvasData(oScaledCanvas);\r\n\t\t\tvar strImgData = createBMP(oData);\r\n\t\t\tif (bReturnImg) {\r\n\t\t\t\treturn makeImageObject(makeDataURI(strImgData, \"image/bmp\"));\r\n\t\t\t} else {\r\n\t\t\t\tsaveFile(makeDataURI(strImgData, strDownloadMime));\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t};\r\n\r\n})();"]],"start1":0,"start2":0,"length1":0,"length2":6770}]],"length":6770}
