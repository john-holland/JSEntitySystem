{"ts":1347396165810,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var image = new Image();\r\n\r\nvar createAnimationEntity = null;\r\n        \r\n$(function() {\r\n    var canvasElement = $(\"#myCanvas\");\r\n    var canvasContext = canvasElement[0].getContext(\"2d\");\r\n    var entitySystem = new JSEntitySystem(16, canvasContext, \"#000000\");\r\n    \r\n    //TODO: This 'TestComponent' should be reworked into a 'FollowMouse' component that takes an element reference in its Datas.\r\n    entitySystem.RegisterComponent('FollowMouse',\r\n        new entitySystem.Component(function(entity, gameTime) {\r\n                            //assigned\r\n                            \r\n                            if (typeof entity.Datas.ElementToMove !== 'undefined') {\r\n                                entity.Datas.ElementToMove.css('position', 'absolute');\r\n                                entity.Datas.ElementToMove.css('width','2em');\r\n                            }\r\n                            \r\n                            //if the current position is defined\r\n                            if (typeof entity.Datas.Position !== 'undefined') {\r\n                                //and if the original position is undefined, then we can copy over this current position\r\n                                if (typeof entity.Datas.OriginalPos === 'undefined') {\r\n                                    entity.Datas.OriginalPos = entity.Datas.Position.Copy();\r\n                                    entity.Datas.OriginalSpeed = entity.Datas.Speed;\r\n                                }\r\n                            }\r\n                            \r\n                            if (typeof entity.Datas.Position === 'undefined') {\r\n                                entity.Datas.Position = new V2();\r\n                            }\r\n                            \r\n                            if (typeof entity.Datas.ToMouse === 'undefined') {\r\n                                entity.Datas.ToMouse = new V2();\r\n                            }\r\n                            \r\n                            \r\n                            if (entitySystem.IsOnTouchDevice) {\r\n                                if (typeof entity.Datas.AveragePos === 'undefined') {\r\n                                    entity.Datas.AveragePos = new V2();\r\n                                }\r\n                            }\r\n            \t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //removed\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //update\r\n                            \r\n                            //A -> B :: B - A\r\n                            var currentPos = entity.Datas.Position;//.Init(divPos.left, divPos.top);\r\n                            \r\n                            var speedModifier = 1;\r\n                            var lengthToMouse = 10000;\r\n                            \r\n                            var sensingDistance = 300;\r\n                            var sensingDistanceSqr = sensingDistance * sensingDistance;\r\n                                                        \r\n                            if (entitySystem.IsOnTouchDevice && entitySystem.TouchPositions.Any()) {\r\n                                sensingDistance = 200;\r\n                                sensingDistanceSqr = sensingDistance * sensingDistance;\r\n                                \r\n                                //average out the positions of nearby touches and head for that point.                                \r\n                                var j = 0;\r\n                                for (j = 0; j < entitySystem.TouchPositions.length; j++) {\r\n                                    if (j === 0) {\r\n                                        entity.Datas.AveragePos.InitFromV2(entitySystem.TouchPositions.First());\r\n                                    }\r\n                                    \r\n                                    var touchToMouse = entitySystem.TouchPositions[j].Copy();\r\n                                    \r\n                                    touchToMouse.Sub(currentPos);\r\n                                    \r\n                                    if (touchToMouse.LengthSqr() < sensingDistanceSqr) {\r\n                                        //entity.Datas.AveragePos.Add(entitySystem.TouchPositions[j]);\r\n                                        entity.Datas.ToMouse.InitFromV2(touchToMouse);\r\n                                    }\r\n                                }\r\n//                                \r\n//                                var divideByAmount = 1;\r\n//                                if (entitySystem.TouchPositions.length > 1) {\r\n//                                    divideByAmount = entitySystem.TouchPositions.length;\r\n//                                }\r\n                                \r\n//                                entity.Datas.AveragePos.Divide(divideByAmount);\r\n//                                if (entityDatas.AveragePos.ToTouchPositions.Any()) {\r\n//                                    entity.Datas.ToMouse.InitFromV2(entityDatas.AveragePos.ToTouchPositions.First()).Sub(currentPos);\r\n//                                }\r\n                            } else {                                \r\n                                entity.Datas.ToMouse.InitFromV2(entitySystem.MousePos).Sub(currentPos);\r\n                            }\r\n                            \r\n                            var toMouse = entity.Datas.ToMouse;\r\n                            \r\n                            entity.Datas.Rotation = Math.atan2(toMouse.Y, toMouse.X);\r\n                            \r\n                            lengthToMouse = toMouse.Length();\r\n                            \r\n                            if (lengthToMouse < 20) {\r\n                                entity.Datas.Speed = 0;\r\n                            } else if (lengthToMouse < sensingDistance) {\r\n                                entity.Datas.Speed = entity.Datas.OriginalSpeed * ((lengthToMouse / sensingDistance) - 0.5);\r\n                            }\r\n                            \r\n                            if (lengthToMouse >= sensingDistance || !entitySystem.IsMouseDown) {\r\n                                if (typeof entity.Datas.OriginalPos !== 'undefined') {\r\n                                    entity.Datas.Speed = entity.Datas.OriginalSpeed;\r\n                                    toMouse = entity.Datas.ToMouse.InitFromV2(entity.Datas.OriginalPos)\r\n                                                                  .Sub(currentPos);\r\n\r\n                                    entity.Datas.Rotation = Math.atan2(toMouse.Y, toMouse.X);\r\n\r\n                                    if (toMouse.Length() < 40) {\r\n                                        entity.Datas.Speed = 0;\r\n                                        entity.Datas.Position.InitFromV2(entity.Datas.OriginalPos);\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    entity.Datas.Speed = 0;\r\n                                }\r\n                            }\r\n                            \r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //render\r\n            \t\t\t}),\r\n                \t['MovementUpdater'],\r\n                    ['Speed']);\r\n                    \r\n    entitySystem.RegisterComponent('RotateClockwise',\r\n        new entitySystem.Component(function(entity, gameTime) {\r\n                            //assigned\r\n                            //entity.Datas.ElementToMove.css('width','0em');\r\n                            //entity.Datas.ElementToMove.css(\"-webkit-transform-origin\", \"50% 50%\" );\r\n            \t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //removed\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //update\r\n                            \r\n                            if (typeof entity.Datas.Rotation === 'undefined') {                                \r\n                                entity.Datas.Rotation = 0;\r\n                            }\r\n                            \r\n                            entity.Datas.Rotation += 100 * (gameTime / 1000);\r\n                            \r\n                            if (typeof entity.Datas.ElementToMove !== 'undefined') {\r\n                                entity.Datas.ElementToMove.rotate(entity.Datas.Rotation);\r\n                            }\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //render\r\n            \t\t\t}),\r\n                \t[],\r\n                    []);\r\n                    \r\n    entitySystem.RegisterComponent('MovementUpdater',\r\n        new entitySystem.Component(function(entity, gameTime) {\r\n            //assigned\r\n        },\r\n        function(entity, gameTime) {\r\n            //removed\r\n        },\r\n        function(entity, gameTime) {\r\n            //update\r\n            \r\n            var rot = entity.Datas.Rotation;\r\n\r\n            entity.Datas.Heading.Init(Math.cos(rot), Math.sin(rot)).Normalize();\r\n\r\n            entity.Datas.Position.Add(entity.Datas.Heading.Multiply(entity.Datas.Speed).Multiply(gameTime / 1000));\r\n            \r\n            if (typeof entity.Datas.ElementToMove !== 'undefined') {\r\n                var div = entity.Datas.ElementToMove;\r\n                div.css('left', entity.Datas.Position.X);\r\n                div.css('top', entity.Datas.Position.Y);\r\n            }\r\n        },\r\n        function(entity, gameTime) {\r\n            //render\r\n        }),\r\n        [],\r\n        ['Position', 'Speed', 'Heading']);\r\n        \r\n    var toRadians = Math.PI/180;\r\n    entitySystem.RegisterComponent('ImageCanvasRenderer', \r\n        new entitySystem.Component(function(entity, gameTime) {\r\n            //assigned\r\n        },\r\n        function(entity, gameTime) {\r\n            //removed\r\n        },\r\n        function(entity, gameTime) {\r\n            //update\r\n        },\r\n        function(entity, gameTime) {\r\n            //render\r\n            if (entity.Datas.ContextToRenderOn === null || entity.Datas.ImageToRender === null\r\n                || typeof entity.Datas.ImageToRender === 'undefined') {\r\n                return;\r\n            }\r\n            \r\n            var context = entity.Datas.ContextToRenderOn;\r\n            \r\n            context.save();\r\n \r\n        \tcontext.translate(entity.Datas.Position.X, entity.Datas.Position.Y);\r\n         \r\n        \tcontext.rotate(entity.Datas.Rotation);\r\n         \r\n        \tcontext.drawImage(entity.Datas.ImageToRender, -(entity.Datas.ImageToRender.width/2), -(entity.Datas.ImageToRender.height/2));\r\n            \r\n            context.restore();\r\n        }),\r\n        [],\r\n        ['Position', 'Rotation', 'ImageToRender', 'ContextToRenderOn']);\r\n        \r\n    entitySystem.RegisterComponent('CellAnimationUpdater', \r\n        new entitySystem.Component(function(entity, gameTime) {\r\n            //assigned\r\n            if (typeof entity.Datas.Animation === 'undefined') {\r\n                entity.Datas.Animation = new CellAnimation(entity.Datas.ImageFile, entity.Datas.CellX, entity.Datas.CellY, entity.Datas.FrameCount, entity.Datas.FramesPerSecond);\r\n            }\r\n            \r\n            entity.Datas.FrameDelta = 0;\r\n            entity.Datas.CurrentFrame = 0;\r\n        },\r\n        function(entity, gameTime) {\r\n            //removed\r\n        },\r\n        function(entity, gameTime) {\r\n            //update\r\n            entity.Datas.Animation.FrameDelta = entity.Datas.FrameDelta;\r\n            entity.Datas.Animation.CurrentFrame = entity.Datas.CurrentFrame;\r\n            \r\n            entity.Datas.Animation.UpdateCell(gameTime);\r\n            if (typeof entity.Datas.Animation.CurrentImage !== 'undefined') {\r\n                entity.Datas.ImageToRender = entity.Datas.Animation.CurrentImage;   \r\n            }\r\n            \r\n            entity.Datas.FrameDelta = entity.Datas.Animation.FrameDelta;\r\n            entity.Datas.CurrentFrame = entity.Datas.Animation.CurrentFrame;\r\n        },\r\n        function(entity, gameTime) {\r\n            //render\r\n        }),\r\n        ['ImageCanvasRenderer'],\r\n        ['ImageFile', 'CellX', 'CellY', 'FrameCount', 'FramesPerSecond']);\r\n    \r\n    (function() {\r\n        var typedYet = false;        \r\n        \r\n        var docHeight = $(document).height();\r\n        var docWidth = $(document).width();\r\n        \r\n        canvasElement[0].width = $(window).width();\r\n        canvasElement[0].height = $(window).height();\r\n        \r\n        var bodyElem = $('body');\r\n        image.src = \"star.png\";\r\n        \r\n        //entity.Datas.Animation \r\n        \r\n        //lol pokemon\r\n        var animation = new CellAnimation(\"pokemon_sprites_1_151_by_dragonite14.png\", 24, 26, 608, 10,\r\n                                function() { animation.ChangeAnimationBounds(0, 3); });\r\n        \r\n        //var animation = new CellAnimation(\"rolling_dot.png\", 4, 1, 4, 5);\r\n        //var animation = new CellAnimation(\"swirls.png\", 3, 3, 9, 60);\r\n        var createNewElement = (function(x, y) {\r\n                var ent = entitySystem.CreateEntity();\r\n                \r\n                //var newDiv = $('<div id=\"getsMoved\"><img width=\"3\" height=\"3\" src=\"star.png\"></img></div>');\r\n                \r\n                //ent.Datas.ElementToMove = newDiv.appendTo(bodyElem);\r\n                \r\n                ent.Datas.Speed = 1000;//i + 1;\r\n                ent.Datas.Position = new V2(x, y);\r\n                \r\n                //newDiv.css('left', ent.Datas.Position.X);\r\n                //newDiv.css('top', ent.Datas.Position.Y);\r\n                \r\n                ent.Datas.Heading = new V2();\r\n                \r\n                ent.Datas.Rotation = 0;\r\n                \r\n                ent.Datas.ContextToRenderOn = canvasContext;\r\n                ent.Datas.ImageToRender = image;            \r\n                \r\n                ent.Datas.ImageFile = \"pokemon_sprites_1_151_by_dragonite14.png\";\r\n                ent.Datas.CellX = 24;\r\n                ent.Datas.CellY = 26;\r\n                ent.Datas.FrameCount = 608;\r\n                ent.Datas.FramesPerSecond = 5;\r\n                \r\n                ent.Datas.Animation = animation;\r\n                \r\n                ent.AddComponent('CellAnimationUpdater');\r\n                    \r\n                ent.AddComponent('FollowMouse');\r\n                ent.AddComponent('ImageCanvasRenderer');\r\n                \r\n                ent.Datas.Rotation = 0;\r\n            });\r\n        var i = 0;\r\n        \r\n        //24 x 26\r\n        \r\n        createAnimationEntity = function() {\r\n            var animationEntity = entitySystem.CreateEntity();\r\n            \r\n            animationEntity.Datas.ImageFile = \"pokemon_sprites_1_151_by_dragonite14.png\";\r\n            animationEntity.Datas.CellX = 24;\r\n            animationEntity.Datas.CellY = 26;\r\n            animationEntity.Datas.FrameCount = 608;\r\n            animationEntity.Datas.FramesPerSecond = 5;\r\n            animationEntity.Datas.Speed = 1000;//i + 1;\r\n            animationEntity.Datas.Position = new V2(100, 100);\r\n            animationEntity.Datas.Heading = new V2();\r\n            animationEntity.Datas.Rotation = 0;\r\n            animationEntity.Datas.ImageToRender = null;\r\n            animationEntity.Datas.ContextToRenderOn = canvasContext;\r\n            \r\n            animationEntity.AddComponent('ImageCanvasRenderer');\r\n            animationEntity.AddComponent('CellAnimationUpdater');\r\n        };\r\n        //random elements to make.\r\n        \r\n        var createMultipleRandomElements = function(amountOfEntitiesToMake) {\r\n            for (i = 0; i < amountOfEntitiesToMake; i++) {\r\n                createNewElement(RandomFromTo(0, docWidth), RandomFromTo(0, docHeight));\r\n            }\r\n        }\r\n        \r\n        createMultipleRandomElements(entitySystem.IsOnTouchDevice ? 250 : 1000);\r\n        \r\n        $(document).ready(function () {\r\n            $(window).keydown(function(args) {\r\n                var char = String.fromCharCode(args.which);\r\n                /*if (typedYet) {\r\n                    $('div[id=getsMoved]').text(function(index, text) {\r\n                        return text + char;  \r\n                    });\r\n                } else {\r\n                    $('div[id=getsMoved]').text(function(index, text) {\r\n                        return char;  \r\n                    });\r\n                    typedYet = true;\r\n                }*/\r\n                var entIndex = 0;\r\n                if (char === ' ') {\r\n                    createMultipleRandomElements(10);\r\n                } else if (char === 'D') {\r\n                    //remove the last entity in the entities list\r\n                    for (i = 0; i < 10; i++) {\r\n                        if (entitySystem.EntityUpdateList.Any()) {\r\n                            entitySystem.RemoveEntity(entitySystem.EntityUpdateList.Last().Id);\r\n                        }\r\n                    }\r\n                } else if (char === 'N') {\r\n                    if ((animation.EndFrame + 4) >= animation.Frames.length) {\r\n                        animation.ChangeAnimationBounds(0, 3);\r\n                    } else {\r\n                        animation.ChangeAnimationBounds(animation.StartFrame + 4, animation.EndFrame + 4);   \r\n                    }\r\n                    for (entIndex = 0; entIndex < entitySystem.EntityUpdateList.length; entIndex++) {\r\n                        entitySystem.EntityUpdateList[entIndex].Datas.CurrentFrame = animation.CurrentFrame;\r\n                    }\r\n                } else if (char === 'P') {\r\n                    if ((animation.StartFrame - 4) < 0) {\r\n                        animation.ChangeAnimationBounds(animation.Frames.length - 5, animation.Frames.length - 1);\r\n                    } else {\r\n                        animation.ChangeAnimationBounds(animation.StartFrame - 4, animation.EndFrame - 4);   \r\n                    }\r\n                    for (entIndex = 0; entIndex < entitySystem.EntityUpdateList.length; entIndex++) {\r\n                        entitySystem.EntityUpdateList[entIndex].Datas.CurrentFrame = animation.CurrentFrame;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        \r\n//        var elementsToMake = 10;\r\n//        var divisor = 0;\r\n//        var maxDivisions = 10;\r\n//        for (divisor = 0; divisor < (maxDivisions - 1); divisor++) {\r\n//            for (i = 0; i < elementsToMake; i++) {\r\n//                createNewElement(docWidth * ((divisor + 1) / maxDivisions), docHeight * (i / elementsToMake));\r\n//            }\r\n//                    \r\n//            for (i = 0; i < elementsToMake; i++) {\r\n//                createNewElement(docWidth * (i / elementsToMake), docHeight * ((divisor + 1) / maxDivisions));\r\n//            }\r\n//        }\r\n    })();\r\n    \r\n    entitySystem.StartUpdating();\r\n});"]],"start1":0,"start2":0,"length1":0,"length2":18794}]],"length":18794}
