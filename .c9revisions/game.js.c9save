{"ts":1347396165810,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var image = new Image();\r\n\r\nvar createAnimationEntity = null;\r\n        \r\n$(function() {\r\n    var canvasElement = $(\"#myCanvas\");\r\n    var canvasContext = canvasElement[0].getContext(\"2d\");\r\n    var entitySystem = new JSEntitySystem(16, canvasContext, \"#000000\");\r\n    \r\n    //TODO: This 'TestComponent' should be reworked into a 'FollowMouse' component that takes an element reference in its Datas.\r\n    entitySystem.RegisterComponent('FollowMouse',\r\n        new entitySystem.Component(function(entity, gameTime) {\r\n                            //assigned\r\n                            \r\n                            if (typeof entity.Datas.ElementToMove !== 'undefined') {\r\n                                entity.Datas.ElementToMove.css('position', 'absolute');\r\n                                entity.Datas.ElementToMove.css('width','2em');\r\n                            }\r\n                            \r\n                            //if the current position is defined\r\n                            if (typeof entity.Datas.Position !== 'undefined') {\r\n                                //and if the original position is undefined, then we can copy over this current position\r\n                                if (typeof entity.Datas.OriginalPos === 'undefined') {\r\n                                    entity.Datas.OriginalPos = entity.Datas.Position.Copy();\r\n                                    entity.Datas.OriginalSpeed = entity.Datas.Speed;\r\n                                }\r\n                            }\r\n                            \r\n                            if (typeof entity.Datas.Position === 'undefined') {\r\n                                entity.Datas.Position = new V2();\r\n                            }\r\n                            \r\n                            if (typeof entity.Datas.ToMouse === 'undefined') {\r\n                                entity.Datas.ToMouse = new V2();\r\n                            }\r\n                            \r\n                            \r\n                            if (entitySystem.IsOnTouchDevice) {\r\n                                if (typeof entity.Datas.AveragePos === 'undefined') {\r\n                                    entity.Datas.AveragePos = new V2();\r\n                                }\r\n                            }\r\n            \t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //removed\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //update\r\n                            \r\n                            //A -> B :: B - A\r\n                            var currentPos = entity.Datas.Position;//.Init(divPos.left, divPos.top);\r\n                            \r\n                            var speedModifier = 1;\r\n                            var lengthToMouse = 10000;\r\n                            \r\n                            var sensingDistance = 300;\r\n                            var sensingDistanceSqr = sensingDistance * sensingDistance;\r\n                                                        \r\n                            if (entitySystem.IsOnTouchDevice && entitySystem.TouchPositions.Any()) {\r\n                                sensingDistance = 200;\r\n                                sensingDistanceSqr = sensingDistance * sensingDistance;\r\n                                \r\n                                //average out the positions of nearby touches and head for that point.                                \r\n                                var j = 0;\r\n                                for (j = 0; j < entitySystem.TouchPositions.length; j++) {\r\n                                    if (j === 0) {\r\n                                        entity.Datas.AveragePos.InitFromV2(entitySystem.TouchPositions.First());\r\n                                    }\r\n                                    \r\n                                    var touchToMouse = entitySystem.TouchPositions[j].Copy();\r\n                                    \r\n                                    touchToMouse.Sub(currentPos);\r\n                                    \r\n                                    if (touchToMouse.LengthSqr() < sensingDistanceSqr) {\r\n                                        //entity.Datas.AveragePos.Add(entitySystem.TouchPositions[j]);\r\n                                        entity.Datas.ToMouse.InitFromV2(touchToMouse);\r\n                                    }\r\n                                }\r\n//                                \r\n//                                var divideByAmount = 1;\r\n//                                if (entitySystem.TouchPositions.length > 1) {\r\n//                                    divideByAmount = entitySystem.TouchPositions.length;\r\n//                                }\r\n                                \r\n//                                entity.Datas.AveragePos.Divide(divideByAmount);\r\n//                                if (entityDatas.AveragePos.ToTouchPositions.Any()) {\r\n//                                    entity.Datas.ToMouse.InitFromV2(entityDatas.AveragePos.ToTouchPositions.First()).Sub(currentPos);\r\n//                                }\r\n                            } else {                                \r\n                                entity.Datas.ToMouse.InitFromV2(entitySystem.MousePos).Sub(currentPos);\r\n                            }\r\n                            \r\n                            var toMouse = entity.Datas.ToMouse;\r\n                            \r\n                            entity.Datas.Rotation = Math.atan2(toMouse.Y, toMouse.X);\r\n                            \r\n                            lengthToMouse = toMouse.Length();\r\n                            \r\n                            if (lengthToMouse < 20) {\r\n                                entity.Datas.Speed = 0;\r\n                            } else if (lengthToMouse < sensingDistance) {\r\n                                entity.Datas.Speed = entity.Datas.OriginalSpeed * ((lengthToMouse / sensingDistance) - 0.5);\r\n                            }\r\n                            \r\n                            if (lengthToMouse >= sensingDistance || !entitySystem.IsMouseDown) {\r\n                                if (typeof entity.Datas.OriginalPos !== 'undefined') {\r\n                                    entity.Datas.Speed = entity.Datas.OriginalSpeed;\r\n                                    toMouse = entity.Datas.ToMouse.InitFromV2(entity.Datas.OriginalPos)\r\n                                                                  .Sub(currentPos);\r\n\r\n                                    entity.Datas.Rotation = Math.atan2(toMouse.Y, toMouse.X);\r\n\r\n                                    if (toMouse.Length() < 40) {\r\n                                        entity.Datas.Speed = 0;\r\n                                        entity.Datas.Position.InitFromV2(entity.Datas.OriginalPos);\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    entity.Datas.Speed = 0;\r\n                                }\r\n                            }\r\n                            \r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //render\r\n            \t\t\t}),\r\n                \t['MovementUpdater'],\r\n                    ['Speed']);\r\n                    \r\n    entitySystem.RegisterComponent('RotateClockwise',\r\n        new entitySystem.Component(function(entity, gameTime) {\r\n                            //assigned\r\n                            //entity.Datas.ElementToMove.css('width','0em');\r\n                            //entity.Datas.ElementToMove.css(\"-webkit-transform-origin\", \"50% 50%\" );\r\n            \t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //removed\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //update\r\n                            \r\n                            if (typeof entity.Datas.Rotation === 'undefined') {                                \r\n                                entity.Datas.Rotation = 0;\r\n                            }\r\n                            \r\n                            entity.Datas.Rotation += 100 * (gameTime / 1000);\r\n                            \r\n                            if (typeof entity.Datas.ElementToMove !== 'undefined') {\r\n                                entity.Datas.ElementToMove.rotate(entity.Datas.Rotation);\r\n                            }\r\n        \t\t\t\t},\r\n            \t\t\tfunction(entity, gameTime) {\r\n                            //render\r\n            \t\t\t}),\r\n                \t[],\r\n                    []);\r\n                    \r\n    entitySystem.RegisterComponent('MovementUpdater',\r\n        new entitySystem.Component(function(entity, gameTime) {\r\n            //assigned\r\n        },\r\n        function(entity, gameTime) {\r\n            //removed\r\n        },\r\n        function(entity, gameTime) {\r\n            //update\r\n            \r\n            var rot = entity.Datas.Rotation;\r\n\r\n            entity.Datas.Heading.Init(Math.cos(rot), Math.sin(rot)).Normalize();\r\n\r\n            entity.Datas.Position.Add(entity.Datas.Heading.Multiply(entity.Datas.Speed).Multiply(gameTime / 1000));\r\n            \r\n            if (typeof entity.Datas.ElementToMove !== 'undefined') {\r\n                var div = entity.Datas.ElementToMove;\r\n                div.css('left', entity.Datas.Position.X);\r\n                div.css('top', entity.Datas.Position.Y);\r\n            }\r\n        },\r\n        function(entity, gameTime) {\r\n            //render\r\n        }),\r\n        [],\r\n        ['Position', 'Speed', 'Heading']);\r\n        \r\n    var toRadians = Math.PI/180;\r\n    entitySystem.RegisterComponent('ImageCanvasRenderer', \r\n        new entitySystem.Component(function(entity, gameTime) {\r\n            //assigned\r\n        },\r\n        function(entity, gameTime) {\r\n            //removed\r\n        },\r\n        function(entity, gameTime) {\r\n            //update\r\n        },\r\n        function(entity, gameTime) {\r\n            //render\r\n            if (entity.Datas.ContextToRenderOn === null || entity.Datas.ImageToRender === null\r\n                || typeof entity.Datas.ImageToRender === 'undefined') {\r\n                return;\r\n            }\r\n            \r\n            var context = entity.Datas.ContextToRenderOn;\r\n            \r\n            context.save();\r\n \r\n        \tcontext.translate(entity.Datas.Position.X, entity.Datas.Position.Y);\r\n         \r\n        \tcontext.rotate(entity.Datas.Rotation);\r\n         \r\n        \tcontext.drawImage(entity.Datas.ImageToRender, -(entity.Datas.ImageToRender.width/2), -(entity.Datas.ImageToRender.height/2));\r\n            \r\n            context.restore();\r\n        }),\r\n        [],\r\n        ['Position', 'Rotation', 'ImageToRender', 'ContextToRenderOn']);\r\n        \r\n    entitySystem.RegisterComponent('CellAnimationUpdater', \r\n        new entitySystem.Component(function(entity, gameTime) {\r\n            //assigned\r\n            if (typeof entity.Datas.Animation === 'undefined') {\r\n                entity.Datas.Animation = new CellAnimation(entity.Datas.ImageFile, entity.Datas.CellX, entity.Datas.CellY, entity.Datas.FrameCount, entity.Datas.FramesPerSecond);\r\n            }\r\n            \r\n            entity.Datas.FrameDelta = 0;\r\n            entity.Datas.CurrentFrame = 0;\r\n        },\r\n        function(entity, gameTime) {\r\n            //removed\r\n        },\r\n        function(entity, gameTime) {\r\n            //update\r\n            entity.Datas.Animation.FrameDelta = entity.Datas.FrameDelta;\r\n            entity.Datas.Animation.CurrentFrame = entity.Datas.CurrentFrame;\r\n            \r\n            entity.Datas.Animation.UpdateCell(gameTime);\r\n            if (typeof entity.Datas.Animation.CurrentImage !== 'undefined') {\r\n                entity.Datas.ImageToRender = entity.Datas.Animation.CurrentImage;   \r\n            }\r\n            \r\n            entity.Datas.FrameDelta = entity.Datas.Animation.FrameDelta;\r\n            entity.Datas.CurrentFrame = entity.Datas.Animation.CurrentFrame;\r\n        },\r\n        function(entity, gameTime) {\r\n            //render\r\n        }),\r\n        ['ImageCanvasRenderer'],\r\n        ['ImageFile', 'CellX', 'CellY', 'FrameCount', 'FramesPerSecond']);\r\n    \r\n    (function() {\r\n        var typedYet = false;        \r\n        \r\n        var docHeight = $(document).height();\r\n        var docWidth = $(document).width();\r\n        \r\n        canvasElement[0].width = $(window).width();\r\n        canvasElement[0].height = $(window).height();\r\n        \r\n        var bodyElem = $('body');\r\n        image.src = \"star.png\";\r\n        \r\n        //entity.Datas.Animation \r\n        \r\n        //lol pokemon\r\n        var animation = new CellAnimation(\"pokemon_sprites_1_151_by_dragonite14.png\", 24, 26, 608, 10,\r\n                                function() { animation.ChangeAnimationBounds(0, 3); });\r\n        \r\n        //var animation = new CellAnimation(\"rolling_dot.png\", 4, 1, 4, 5);\r\n        //var animation = new CellAnimation(\"swirls.png\", 3, 3, 9, 60);\r\n        var createNewElement = (function(x, y) {\r\n                var ent = entitySystem.CreateEntity();\r\n                \r\n                //var newDiv = $('<div id=\"getsMoved\"><img width=\"3\" height=\"3\" src=\"star.png\"></img></div>');\r\n                \r\n                //ent.Datas.ElementToMove = newDiv.appendTo(bodyElem);\r\n                \r\n                ent.Datas.Speed = 1000;//i + 1;\r\n                ent.Datas.Position = new V2(x, y);\r\n                \r\n                //newDiv.css('left', ent.Datas.Position.X);\r\n                //newDiv.css('top', ent.Datas.Position.Y);\r\n                \r\n                ent.Datas.Heading = new V2();\r\n                \r\n                ent.Datas.Rotation = 0;\r\n                \r\n                ent.Datas.ContextToRenderOn = canvasContext;\r\n                ent.Datas.ImageToRender = image;            \r\n                \r\n                ent.Datas.ImageFile = \"pokemon_sprites_1_151_by_dragonite14.png\";\r\n                ent.Datas.CellX = 24;\r\n                ent.Datas.CellY = 26;\r\n                ent.Datas.FrameCount = 608;\r\n                ent.Datas.FramesPerSecond = 5;\r\n                \r\n                ent.Datas.Animation = animation;\r\n                \r\n                ent.AddComponent('CellAnimationUpdater');\r\n                    \r\n                ent.AddComponent('FollowMouse');\r\n                ent.AddComponent('ImageCanvasRenderer');\r\n                \r\n                ent.Datas.Rotation = 0;\r\n            });\r\n        var i = 0;\r\n        \r\n        //24 x 26\r\n        \r\n        createAnimationEntity = function() {\r\n            var animationEntity = entitySystem.CreateEntity();\r\n            \r\n            animationEntity.Datas.ImageFile = \"pokemon_sprites_1_151_by_dragonite14.png\";\r\n            animationEntity.Datas.CellX = 24;\r\n            animationEntity.Datas.CellY = 26;\r\n            animationEntity.Datas.FrameCount = 608;\r\n            animationEntity.Datas.FramesPerSecond = 5;\r\n            animationEntity.Datas.Speed = 1000;//i + 1;\r\n            animationEntity.Datas.Position = new V2(100, 100);\r\n            animationEntity.Datas.Heading = new V2();\r\n            animationEntity.Datas.Rotation = 0;\r\n            animationEntity.Datas.ImageToRender = null;\r\n            animationEntity.Datas.ContextToRenderOn = canvasContext;\r\n            \r\n            animationEntity.AddComponent('ImageCanvasRenderer');\r\n            animationEntity.AddComponent('CellAnimationUpdater');\r\n        };\r\n        //random elements to make.\r\n        \r\n        var createMultipleRandomElements = function(amountOfEntitiesToMake) {\r\n            for (i = 0; i < amountOfEntitiesToMake; i++) {\r\n                createNewElement(RandomFromTo(0, docWidth), RandomFromTo(0, docHeight));\r\n            }\r\n        }\r\n        \r\n        createMultipleRandomElements(entitySystem.IsOnTouchDevice ? 250 : 1000);\r\n        \r\n        $(document).ready(function () {\r\n            $(window).keydown(function(args) {\r\n                var char = String.fromCharCode(args.which);\r\n                /*if (typedYet) {\r\n                    $('div[id=getsMoved]').text(function(index, text) {\r\n                        return text + char;  \r\n                    });\r\n                } else {\r\n                    $('div[id=getsMoved]').text(function(index, text) {\r\n                        return char;  \r\n                    });\r\n                    typedYet = true;\r\n                }*/\r\n                var entIndex = 0;\r\n                if (char === ' ') {\r\n                    createMultipleRandomElements(10);\r\n                } else if (char === 'D') {\r\n                    //remove the last entity in the entities list\r\n                    for (i = 0; i < 10; i++) {\r\n                        if (entitySystem.EntityUpdateList.Any()) {\r\n                            entitySystem.RemoveEntity(entitySystem.EntityUpdateList.Last().Id);\r\n                        }\r\n                    }\r\n                } else if (char === 'N') {\r\n                    if ((animation.EndFrame + 4) >= animation.Frames.length) {\r\n                        animation.ChangeAnimationBounds(0, 3);\r\n                    } else {\r\n                        animation.ChangeAnimationBounds(animation.StartFrame + 4, animation.EndFrame + 4);   \r\n                    }\r\n                    for (entIndex = 0; entIndex < entitySystem.EntityUpdateList.length; entIndex++) {\r\n                        entitySystem.EntityUpdateList[entIndex].Datas.CurrentFrame = animation.CurrentFrame;\r\n                    }\r\n                } else if (char === 'P') {\r\n                    if ((animation.StartFrame - 4) < 0) {\r\n                        animation.ChangeAnimationBounds(animation.Frames.length - 5, animation.Frames.length - 1);\r\n                    } else {\r\n                        animation.ChangeAnimationBounds(animation.StartFrame - 4, animation.EndFrame - 4);   \r\n                    }\r\n                    for (entIndex = 0; entIndex < entitySystem.EntityUpdateList.length; entIndex++) {\r\n                        entitySystem.EntityUpdateList[entIndex].Datas.CurrentFrame = animation.CurrentFrame;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        \r\n//        var elementsToMake = 10;\r\n//        var divisor = 0;\r\n//        var maxDivisions = 10;\r\n//        for (divisor = 0; divisor < (maxDivisions - 1); divisor++) {\r\n//            for (i = 0; i < elementsToMake; i++) {\r\n//                createNewElement(docWidth * ((divisor + 1) / maxDivisions), docHeight * (i / elementsToMake));\r\n//            }\r\n//                    \r\n//            for (i = 0; i < elementsToMake; i++) {\r\n//                createNewElement(docWidth * (i / elementsToMake), docHeight * ((divisor + 1) / maxDivisions));\r\n//            }\r\n//        }\r\n    })();\r\n    \r\n    entitySystem.StartUpdating();\r\n});"]],"start1":0,"start2":0,"length1":0,"length2":18794}]],"length":18794}
{"contributors":[],"silentsave":true,"ts":1350960485968,"patch":[[{"diffs":[[0,"lements("],[1,"0)"],[0,"entitySy"]],"start1":15779,"start2":15779,"length1":16,"length2":18},{"diffs":[[0,"ength - "],[-1,"5"],[1,"4"],[0,", animat"]],"start1":17663,"start2":17663,"length1":17,"length2":17}]],"length":18796,"saved":false}
{"ts":1350960487390,"patch":[[{"diffs":[[0,"ments(0)"],[1,";//"],[0,"entitySy"]],"start1":15781,"start2":15781,"length1":16,"length2":19}]],"length":18799,"saved":false}
{"contributors":[],"silentsave":true,"ts":1350960652640,"patch":[[{"diffs":[[0,"lements("],[1,"1"],[0,"0);//ent"]],"start1":15779,"start2":15779,"length1":16,"length2":17}]],"length":18800,"saved":false}
{"ts":1350960708869,"patch":[[{"diffs":[[0,"']);\r\n    \r\n"],[1,"    \r\n    \r\n"],[0,"    (functio"]],"start1":12179,"start2":12179,"length1":24,"length2":36}]],"length":18812,"saved":false}
{"ts":1350960711930,"patch":[[{"diffs":[[0,"\r\n    \r\n    "],[1,"entity"],[0,"\r\n    \r\n    "]],"start1":12183,"start2":12183,"length1":24,"length2":30}]],"length":18818,"saved":false}
{"ts":1350960713166,"patch":[[{"diffs":[[0,"  entity"],[1,"System.Re"],[0,"\r\n    \r\n"]],"start1":12193,"start2":12193,"length1":16,"length2":25}]],"length":18827,"saved":false}
{"ts":1350960714659,"patch":[[{"diffs":[[0,"ystem.Re"],[1,"gisterComponent()"],[0,"\r\n    \r\n"]],"start1":12202,"start2":12202,"length1":16,"length2":33}]],"length":18844,"saved":false}
{"ts":1350960720724,"patch":[[{"diffs":[[0,"mponent("],[1,"\"\""],[0,")\r\n    \r"]],"start1":12218,"start2":12218,"length1":16,"length2":18}]],"length":18846,"saved":false}
{"ts":1350960722324,"patch":[[{"diffs":[[0,"ponent(\""],[1,"SomeGuy"],[0,"\")\r\n    "]],"start1":12219,"start2":12219,"length1":16,"length2":23}]],"length":18853,"saved":false}
{"ts":1350960725241,"patch":[[{"diffs":[[0,"SomeGuy\""],[1,", null, "],[0,")\r\n    \r"]],"start1":12227,"start2":12227,"length1":16,"length2":24}]],"length":18861,"saved":false}
{"ts":1350960727398,"patch":[[{"diffs":[[0,", null, "],[1,"[], []"],[0,")\r\n    \r"]],"start1":12235,"start2":12235,"length1":16,"length2":22}]],"length":18867,"saved":false}
{"ts":1350960729854,"patch":[[{"diffs":[[0,"], [])\r\n"],[1,"        \r\n"],[0,"    \r\n  "]],"start1":12244,"start2":12244,"length1":16,"length2":26}]],"length":18877,"saved":false}
{"ts":1350960733553,"patch":[[{"diffs":[[0,"])\r\n        "],[1,".Update"],[0,"\r\n    \r\n    "]],"start1":12248,"start2":12248,"length1":24,"length2":31}]],"length":18884,"saved":false}
{"ts":1350960734360,"patch":[[{"diffs":[[0,"     .Update"],[1,"()"],[0,"\r\n    \r\n    "]],"start1":12255,"start2":12255,"length1":24,"length2":26}]],"length":18886,"saved":false}
{"ts":1350960738375,"patch":[[{"diffs":[[0,".Update("],[1,"function(gameTime) "],[0,")\r\n    \r"]],"start1":12260,"start2":12260,"length1":16,"length2":35}]],"length":18905,"saved":false}
{"ts":1350960739628,"patch":[[{"diffs":[[0,"meTime) "],[1,"{\r\n        \r\n        }"],[0,")\r\n    \r"]],"start1":12279,"start2":12279,"length1":16,"length2":38}]],"length":18927,"saved":false}
{"ts":1350960743944,"patch":[[{"diffs":[[0,"      })"],[1,";"],[0,"\r\n    \r\n"]],"start1":12302,"start2":12302,"length1":16,"length2":17}]],"length":18928,"saved":false}
{"ts":1350960852861,"patch":[[{"diffs":[[0,"unction("],[1,"entity, "],[0,"gameTime"]],"start1":12269,"start2":12269,"length1":16,"length2":24}]],"length":18936,"saved":false}
{"ts":1350960862629,"patch":[[{"diffs":[[0,"ime) {\r\n        "],[1,"        "],[0,"\r\n        });\r\n "]],"start1":12290,"start2":12290,"length1":32,"length2":40}]],"length":18944,"saved":false}
{"ts":1350960863668,"patch":[[{"diffs":[[0," {\r\n            "],[-1,"    "],[0,"\r\n        });\r\n "]],"start1":12294,"start2":12294,"length1":36,"length2":32}]],"length":18940,"saved":false}
{"ts":1350960865373,"patch":[[{"diffs":[[0," {\r\n            "],[1,"entity."],[0,"\r\n        });\r\n "]],"start1":12294,"start2":12294,"length1":32,"length2":39}]],"length":18947,"saved":false}
{"ts":1350960869291,"patch":[[{"diffs":[[0," entity."],[1,"Datas.Rotation"],[0,"\r\n      "]],"start1":12309,"start2":12309,"length1":16,"length2":30}]],"length":18961,"saved":false}
{"ts":1350960871861,"patch":[[{"diffs":[[0,"tas.Rotation"],[1," += "],[0,"\r\n        })"]],"start1":12319,"start2":12319,"length1":24,"length2":28}]],"length":18965,"saved":false}
{"ts":1350960874328,"patch":[[{"diffs":[[0,"otation "],[-1,"+"],[0,"= \r\n    "]],"start1":12324,"start2":12324,"length1":17,"length2":16}]],"length":18964,"saved":false}
{"ts":1350960878409,"patch":[[{"diffs":[[0,"ation = "],[1,"entity.Datas.Rotation"],[0,"\r\n      "]],"start1":12326,"start2":12326,"length1":16,"length2":37}]],"length":18985,"saved":false}
{"ts":1350960880107,"patch":[[{"diffs":[[0,"tas.Rotation"],[1," + "],[0,"\r\n        })"]],"start1":12343,"start2":12343,"length1":24,"length2":27}]],"length":18988,"saved":false}
{"ts":1350960882159,"patch":[[{"diffs":[[0,"ation + "],[1,"0.1;"],[0,"\r\n      "]],"start1":12350,"start2":12350,"length1":16,"length2":20}]],"length":18992,"saved":false}
{"ts":1350960925265,"patch":[[{"diffs":[[0,"                "],[1,"ent.Datas."],[0,"\r\n              "]],"start1":14360,"start2":14360,"length1":32,"length2":42}]],"length":19002,"saved":false}
{"ts":1350960926236,"patch":[[{"diffs":[[0,"    ent."],[-1,"Datas."],[1,"Ad"],[0,"\r\n      "]],"start1":14372,"start2":14372,"length1":22,"length2":18}]],"length":18998,"saved":false}
{"ts":1350960927803,"patch":[[{"diffs":[[0,"  ent.Ad"],[1,"dComponent()"],[0,"\r\n      "]],"start1":14374,"start2":14374,"length1":16,"length2":28}]],"length":19010,"saved":false}
{"ts":1350960929310,"patch":[[{"diffs":[[0,"mponent("],[1,"''"],[0,")\r\n     "]],"start1":14385,"start2":14385,"length1":16,"length2":18}]],"length":19012,"saved":false}
{"ts":1350960931587,"patch":[[{"diffs":[[0,"ponent('"],[1,"SomeGuy"],[0,"')\r\n    "]],"start1":14386,"start2":14386,"length1":16,"length2":23}]],"length":19019,"saved":false}
{"ts":1350960933898,"patch":[[{"diffs":[[0,"omeGuy')"],[1,";"],[0,"\r\n      "]],"start1":14395,"start2":14395,"length1":16,"length2":17}]],"length":19020,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351002501967,"patch":[[{"diffs":[[0,"ments(10"],[1,"0"],[0,");//enti"]],"start1":16001,"start2":16001,"length1":16,"length2":17}]],"length":19021,"saved":false}
{"ts":1351009703145,"patch":[[{"diffs":[[0,"\n    })();\r\n    "],[1,"al"],[0,"\r\n    entitySyst"]],"start1":18965,"start2":18965,"length1":32,"length2":34}]],"length":19023,"saved":false}
{"ts":1351009705274,"patch":[[{"diffs":[[0,"\r\n    al"],[1,"ert(\"hey\")"],[0,"\r\n    en"]],"start1":18975,"start2":18975,"length1":16,"length2":26}]],"length":19033,"saved":false}
{"ts":1351009706248,"patch":[[{"diffs":[[0,"ert(\"hey"],[1,")"],[0,"\")\r\n    "]],"start1":18983,"start2":18983,"length1":16,"length2":17}]],"length":19034,"saved":false}
{"ts":1351009707548,"patch":[[{"diffs":[[0,"rt(\"hey)"],[-1,"\")"],[0,"\r\n    en"]],"start1":18984,"start2":18984,"length1":18,"length2":16}]],"length":19032,"saved":false}
{"ts":1351009708509,"patch":[[{"diffs":[[0,"ert(\"hey"],[-1,")"],[1,"\");"],[0,"\r\n    en"]],"start1":18983,"start2":18983,"length1":17,"length2":19}]],"length":19034,"saved":false}
